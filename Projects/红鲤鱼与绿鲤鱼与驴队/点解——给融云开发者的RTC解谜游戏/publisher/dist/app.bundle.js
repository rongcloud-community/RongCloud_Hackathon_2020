!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=39)}([function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,o){"use strict";var i=[],s=Object.getPrototypeOf,a=i.slice,c=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},u=i.push,l=i.indexOf,d={},f=d.toString,p=d.hasOwnProperty,g=p.toString,h=g.call(Object),m={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},C=n.document,R={type:!0,src:!0,nonce:!0,noModule:!0};function T(e,t,n){var r,o,i=(n=n||C).createElement("script");if(i.text=e,t)for(r in R)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function I(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[f.call(e)]||"object":typeof e}var S=function(e,t){return new S.fn.init(e,t)};function E(e){var t=!!e&&"length"in e&&e.length,n=I(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}S.fn=S.prototype={jquery:"3.5.1",constructor:S,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return S.each(this,e)},map:function(e){return this.pushStack(S.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(S.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:i.sort,splice:i.splice},S.extend=S.fn.extend=function(){var e,t,n,r,o,i,s=arguments[0]||{},a=1,c=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||v(s)||(s={}),a===c&&(s=this,a--);a<c;a++)if(null!=(e=arguments[a]))for(t in e)r=e[t],"__proto__"!==t&&s!==r&&(u&&r&&(S.isPlainObject(r)||(o=Array.isArray(r)))?(n=s[t],i=o&&!Array.isArray(n)?[]:o||S.isPlainObject(n)?n:{},o=!1,s[t]=S.extend(u,i,r)):void 0!==r&&(s[t]=r));return s},S.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==f.call(e))&&(!(t=s(e))||"function"==typeof(n=p.call(t,"constructor")&&t.constructor)&&g.call(n)===h)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){T(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(E(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(E(Object(e))?S.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:l.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,s=!n;o<i;o++)!t(e[o],o)!==s&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,s=[];if(E(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&s.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&s.push(o);return c(s)},guid:1,support:m}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=i[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var M=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,n,r,o,i,s,a,c,u,l,d,f,p,g,h,m,v,y,C,R="sizzle"+1*new Date,T=e.document,I=0,S=0,E=ce(),M=ce(),_=ce(),b=ce(),O=function(e,t){return e===t&&(d=!0),0},N={}.hasOwnProperty,A=[],w=A.pop,P=A.push,L=A.push,U=A.slice,k=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},D="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",x="[\\x20\\t\\r\\n\\f]",B="(?:\\\\[\\da-fA-F]{1,6}"+x+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",j="\\["+x+"*("+B+")(?:"+x+"*([*^$|!~]?=)"+x+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+x+"*\\]",V=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+j+")*)|.*)\\)|)",H=new RegExp(x+"+","g"),F=new RegExp("^"+x+"+|((?:^|[^\\\\])(?:\\\\.)*)"+x+"+$","g"),q=new RegExp("^"+x+"*,"+x+"*"),G=new RegExp("^"+x+"*([>+~]|"+x+")"+x+"*"),K=new RegExp(x+"|>"),J=new RegExp(V),W=new RegExp("^"+B+"$"),Y={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+j),PSEUDO:new RegExp("^"+V),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+x+"*(even|odd|(([+-]|)(\\d*)n|)"+x+"*(?:([+-]|)"+x+"*(\\d+)|))"+x+"*\\)|)","i"),bool:new RegExp("^(?:"+D+")$","i"),needsContext:new RegExp("^"+x+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+x+"*((?:-\\d)?\\d*)"+x+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,z=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+x+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){f()},se=Re((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{L.apply(A=U.call(T.childNodes),T.childNodes),A[T.childNodes.length].nodeType}catch(e){L={apply:A.length?function(e,t){P.apply(e,U.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ae(e,t,r,o){var i,a,u,l,d,g,v,y=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!o&&(f(t),t=t||p,h)){if(11!==T&&(d=Z.exec(e)))if(i=d[1]){if(9===T){if(!(u=t.getElementById(i)))return r;if(u.id===i)return r.push(u),r}else if(y&&(u=y.getElementById(i))&&C(t,u)&&u.id===i)return r.push(u),r}else{if(d[2])return L.apply(r,t.getElementsByTagName(e)),r;if((i=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!b[e+" "]&&(!m||!m.test(e))&&(1!==T||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===T&&(K.test(e)||G.test(e))){for((y=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((l=t.getAttribute("id"))?l=l.replace(re,oe):t.setAttribute("id",l=R)),a=(g=s(e)).length;a--;)g[a]=(l?"#"+l:":scope")+" "+Ce(g[a]);v=g.join(",")}try{return L.apply(r,y.querySelectorAll(v)),r}catch(t){b(e,!0)}finally{l===R&&t.removeAttribute("id")}}}return c(e.replace(F,"$1"),t,r,o)}function ce(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ue(e){return e[R]=!0,e}function le(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function fe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function ge(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function he(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ue((function(t){return t=+t,ue((function(n,r){for(var o,i=e([],n.length,t),s=i.length;s--;)n[o=i[s]]&&(n[o]=!(r[o]=n[o]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},i=ae.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Q.test(t||n&&n.nodeName||"HTML")},f=ae.setDocument=function(e){var t,o,s=e?e.ownerDocument||e:T;return s!=p&&9===s.nodeType&&s.documentElement?(g=(p=s).documentElement,h=!i(p),T!=p&&(o=p.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),n.scope=le((function(e){return g.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=le((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=le((function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=$.test(p.getElementsByClassName),n.getById=le((function(e){return g.appendChild(e).id=R,!p.getElementsByName||!p.getElementsByName(R).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&h){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&h){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&h)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=$.test(p.querySelectorAll))&&(le((function(e){var t;g.appendChild(e).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+x+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+x+"*(?:value|"+D+")"),e.querySelectorAll("[id~="+R+"-]").length||m.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\["+x+"*name"+x+"*="+x+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+R+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),le((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+x+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),g.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=$.test(y=g.matches||g.webkitMatchesSelector||g.mozMatchesSelector||g.oMatchesSelector||g.msMatchesSelector))&&le((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",V)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=$.test(g.compareDocumentPosition),C=t||$.test(g.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},O=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==p||e.ownerDocument==T&&C(T,e)?-1:t==p||t.ownerDocument==T&&C(T,t)?1:l?k(l,e)-k(l,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,s=[e],a=[t];if(!o||!i)return e==p?-1:t==p?1:o?-1:i?1:l?k(l,e)-k(l,t):0;if(o===i)return fe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?fe(s[r],a[r]):s[r]==T?-1:a[r]==T?1:0},p):p},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(f(e),n.matchesSelector&&h&&!b[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){b(t,!0)}return ae(t,p,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=p&&f(e),C(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=p&&f(e);var o=r.attrHandle[t.toLowerCase()],i=o&&N.call(r.attrHandle,t.toLowerCase())?o(e,t,!h):void 0;return void 0!==i?i:n.attributes||!h?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ae.escape=function(e){return(e+"").replace(re,oe)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,r=[],o=0,i=0;if(d=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(O),d){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return l=null,e},o=ae.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=ae.selectors={cacheLength:50,createPseudo:ue,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&J.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+x+")"+e+"("+x+"|$)"))&&E(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var o=ae.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(H," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,c){var u,l,d,f,p,g,h=i!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!c&&!a,C=!1;if(m){if(i){for(;h;){for(f=t;f=f[h];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;g=h="only"===e&&!g&&"nextSibling"}return!0}if(g=[s?m.firstChild:m.lastChild],s&&y){for(C=(p=(u=(l=(d=(f=m)[R]||(f[R]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===I&&u[1])&&u[2],f=p&&m.childNodes[p];f=++p&&f&&f[h]||(C=p=0)||g.pop();)if(1===f.nodeType&&++C&&f===t){l[e]=[I,p,C];break}}else if(y&&(C=p=(u=(l=(d=(f=t)[R]||(f[R]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===I&&u[1]),!1===C)for(;(f=++p&&f&&f[h]||(C=p=0)||g.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++C||(y&&((l=(d=f[R]||(f[R]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[I,C]),f!==t)););return(C-=o)===r||C%r==0&&C/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return o[R]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var r,i=o(e,t),s=i.length;s--;)e[r=k(e,i[s])]=!(n[r]=i[s])})):function(e){return o(e,0,n)}):o}},pseudos:{not:ue((function(e){var t=[],n=[],r=a(e.replace(F,"$1"));return r[R]?ue((function(e,t,n,o){for(var i,s=r(e,null,o,[]),a=e.length;a--;)(i=s[a])&&(e[a]=!(t[a]=i))})):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return ae(e,t).length>0}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:ue((function(e){return W.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=h?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===g},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:me((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=ge(t);function ye(){}function Ce(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function Re(e,t,n){var r=t.dir,o=t.next,i=o||r,s=n&&"parentNode"===i,a=S++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,c){var u,l,d,f=[I,a];if(c){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,c))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(l=(d=t[R]||(t[R]={}))[t.uniqueID]||(d[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=l[i])&&u[0]===I&&u[1]===a)return f[2]=u[2];if(l[i]=f,f[2]=e(t,n,c))return!0}return!1}}function Te(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function Ie(e,t,n,r,o){for(var i,s=[],a=0,c=e.length,u=null!=t;a<c;a++)(i=e[a])&&(n&&!n(i,r,o)||(s.push(i),u&&t.push(a)));return s}function Se(e,t,n,r,o,i){return r&&!r[R]&&(r=Se(r)),o&&!o[R]&&(o=Se(o,i)),ue((function(i,s,a,c){var u,l,d,f=[],p=[],g=s.length,h=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)ae(e,t[r],n);return n}(t||"*",a.nodeType?[a]:a,[]),m=!e||!i&&t?h:Ie(h,f,e,a,c),v=n?o||(i?e:g||r)?[]:s:m;if(n&&n(m,v,a,c),r)for(u=Ie(v,p),r(u,[],a,c),l=u.length;l--;)(d=u[l])&&(v[p[l]]=!(m[p[l]]=d));if(i){if(o||e){if(o){for(u=[],l=v.length;l--;)(d=v[l])&&u.push(m[l]=d);o(null,v=[],u,c)}for(l=v.length;l--;)(d=v[l])&&(u=o?k(i,d):f[l])>-1&&(i[u]=!(s[u]=d))}}else v=Ie(v===s?v.splice(g,v.length):v),o?o(null,s,v,c):L.apply(s,v)}))}function Ee(e){for(var t,n,o,i=e.length,s=r.relative[e[0].type],a=s||r.relative[" "],c=s?1:0,l=Re((function(e){return e===t}),a,!0),d=Re((function(e){return k(t,e)>-1}),a,!0),f=[function(e,n,r){var o=!s&&(r||n!==u)||((t=n).nodeType?l(e,n,r):d(e,n,r));return t=null,o}];c<i;c++)if(n=r.relative[e[c].type])f=[Re(Te(f),n)];else{if((n=r.filter[e[c].type].apply(null,e[c].matches))[R]){for(o=++c;o<i&&!r.relative[e[o].type];o++);return Se(c>1&&Te(f),c>1&&Ce(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(F,"$1"),n,c<o&&Ee(e.slice(c,o)),o<i&&Ee(e=e.slice(o)),o<i&&Ce(e))}f.push(n)}return Te(f)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,s=ae.tokenize=function(e,t){var n,o,i,s,a,c,u,l=M[e+" "];if(l)return t?0:l.slice(0);for(a=e,c=[],u=r.preFilter;a;){for(s in n&&!(o=q.exec(a))||(o&&(a=a.slice(o[0].length)||a),c.push(i=[])),n=!1,(o=G.exec(a))&&(n=o.shift(),i.push({value:n,type:o[0].replace(F," ")}),a=a.slice(n.length)),r.filter)!(o=Y[s].exec(a))||u[s]&&!(o=u[s](o))||(n=o.shift(),i.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):M(e,c).slice(0)},a=ae.compile=function(e,t){var n,o=[],i=[],a=_[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=Ee(t[n]))[R]?o.push(a):i.push(a);(a=_(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,s,a,c,l){var d,g,m,v=0,y="0",C=i&&[],R=[],T=u,S=i||o&&r.find.TAG("*",l),E=I+=null==T?1:Math.random()||.1,M=S.length;for(l&&(u=s==p||s||l);y!==M&&null!=(d=S[y]);y++){if(o&&d){for(g=0,s||d.ownerDocument==p||(f(d),a=!h);m=e[g++];)if(m(d,s||p,a)){c.push(d);break}l&&(I=E)}n&&((d=!m&&d)&&v--,i&&C.push(d))}if(v+=y,n&&y!==v){for(g=0;m=t[g++];)m(C,R,s,a);if(i){if(v>0)for(;y--;)C[y]||R[y]||(R[y]=w.call(c));R=Ie(R)}L.apply(c,R),l&&!i&&R.length>0&&v+t.length>1&&ae.uniqueSort(c)}return l&&(I=E,u=T),C};return n?ue(i):i}(i,o))).selector=e}return a},c=ae.select=function(e,t,n,o){var i,c,u,l,d,f="function"==typeof e&&e,p=!o&&s(e=f.selector||e);if(n=n||[],1===p.length){if((c=p[0]=p[0].slice(0)).length>2&&"ID"===(u=c[0]).type&&9===t.nodeType&&h&&r.relative[c[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(c.shift().value.length)}for(i=Y.needsContext.test(e)?0:c.length;i--&&(u=c[i],!r.relative[l=u.type]);)if((d=r.find[l])&&(o=d(u.matches[0].replace(te,ne),ee.test(c[0].type)&&ve(t.parentNode)||t))){if(c.splice(i,1),!(e=o.length&&Ce(c)))return L.apply(n,o),n;break}}return(f||a(e,p))(o,t,!h,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=R.split("").sort(O).join("")===R,n.detectDuplicates=!!d,f(),n.sortDetached=le((function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))})),le((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&le((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),le((function(e){return null==e.getAttribute("disabled")}))||de(D,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),ae}(n);S.find=M,S.expr=M.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=M.uniqueSort,S.text=M.getText,S.isXMLDoc=M.isXML,S.contains=M.contains,S.escapeSelector=M.escape;var _=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&S(e).is(n))break;r.push(e)}return r},b=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},O=S.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function w(e,t,n){return v(t)?S.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?S.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?S.grep(e,(function(e){return l.call(t,e)>-1!==n})):S.filter(t,e,n)}S.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?S.find.matchesSelector(r,e)?[r]:[]:S.find.matches(e,S.grep(t,(function(e){return 1===e.nodeType})))},S.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(S(e).filter((function(){for(t=0;t<r;t++)if(S.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)S.find(e,o[t],n);return r>1?S.uniqueSort(n):n},filter:function(e){return this.pushStack(w(this,e||[],!1))},not:function(e){return this.pushStack(w(this,e||[],!0))},is:function(e){return!!w(this,"string"==typeof e&&O.test(e)?S(e):e||[],!1).length}});var P,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||P,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),A.test(r[1])&&S.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=C.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(S):S.makeArray(e,this)}).prototype=S.fn,P=S(C);var U=/^(?:parents|prev(?:Until|All))/,k={children:!0,contents:!0,next:!0,prev:!0};function D(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}S.fn.extend({has:function(e){var t=S(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(S.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,o=this.length,i=[],s="string"!=typeof e&&S(e);if(!O.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&S.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?S.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?l.call(S(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return _(e,"parentNode")},parentsUntil:function(e,t,n){return _(e,"parentNode",n)},next:function(e){return D(e,"nextSibling")},prev:function(e){return D(e,"previousSibling")},nextAll:function(e){return _(e,"nextSibling")},prevAll:function(e){return _(e,"previousSibling")},nextUntil:function(e,t,n){return _(e,"nextSibling",n)},prevUntil:function(e,t,n){return _(e,"previousSibling",n)},siblings:function(e){return b((e.parentNode||{}).firstChild,e)},children:function(e){return b(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(N(e,"template")&&(e=e.content||e),S.merge([],e.childNodes))}},(function(e,t){S.fn[e]=function(n,r){var o=S.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=S.filter(r,o)),this.length>1&&(k[e]||S.uniqueSort(o),U.test(e)&&o.reverse()),this.pushStack(o)}}));var x=/[^\x20\t\r\n\f]+/g;function B(e){return e}function j(e){throw e}function V(e,t,n,r){var o;try{e&&v(o=e.promise)?o.call(e).done(t).fail(n):e&&v(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}S.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return S.each(e.match(x)||[],(function(e,n){t[n]=!0})),t}(e):S.extend({},e);var t,n,r,o,i=[],s=[],a=-1,c=function(){for(o=o||e.once,r=t=!0;s.length;a=-1)for(n=s.shift();++a<i.length;)!1===i[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},u={add:function(){return i&&(n&&!t&&(a=i.length-1,s.push(n)),function t(n){S.each(n,(function(n,r){v(r)?e.unique&&u.has(r)||i.push(r):r&&r.length&&"string"!==I(r)&&t(r)}))}(arguments),n&&!t&&c()),this},remove:function(){return S.each(arguments,(function(e,t){for(var n;(n=S.inArray(t,i,n))>-1;)i.splice(n,1),n<=a&&a--})),this},has:function(e){return e?S.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=s=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},S.extend({Deferred:function(e){var t=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return S.Deferred((function(n){S.each(t,(function(t,r){var o=v(e[r[4]])&&e[r[4]];i[r[1]]((function(){var e=o&&o.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,r,o){var i=0;function s(e,t,r,o){return function(){var a=this,c=arguments,u=function(){var n,u;if(!(e<i)){if((n=r.apply(a,c))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(u)?o?u.call(n,s(i,t,B,o),s(i,t,j,o)):(i++,u.call(n,s(i,t,B,o),s(i,t,j,o),s(i,t,B,t.notifyWith))):(r!==B&&(a=void 0,c=[n]),(o||t.resolveWith)(a,c))}},l=o?u:function(){try{u()}catch(n){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(n,l.stackTrace),e+1>=i&&(r!==j&&(a=void 0,c=[n]),t.rejectWith(a,c))}};e?l():(S.Deferred.getStackHook&&(l.stackTrace=S.Deferred.getStackHook()),n.setTimeout(l))}}return S.Deferred((function(n){t[0][3].add(s(0,n,v(o)?o:B,n.notifyWith)),t[1][3].add(s(0,n,v(e)?e:B)),t[2][3].add(s(0,n,v(r)?r:j))})).promise()},promise:function(e){return null!=e?S.extend(e,o):o}},i={};return S.each(t,(function(e,n){var s=n[2],a=n[5];o[n[1]]=s.add,a&&s.add((function(){r=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=s.fireWith})),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=a.call(arguments),i=S.Deferred(),s=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?a.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(V(e,i.done(s(n)).resolve,i.reject,!t),"pending"===i.state()||v(o[n]&&o[n].then)))return i.then();for(;n--;)V(o[n],s(n),i.reject);return i.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&H.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},S.readyException=function(e){n.setTimeout((function(){throw e}))};var F=S.Deferred();function q(){C.removeEventListener("DOMContentLoaded",q),n.removeEventListener("load",q),S.ready()}S.fn.ready=function(e){return F.then(e).catch((function(e){S.readyException(e)})),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0,!0!==e&&--S.readyWait>0||F.resolveWith(C,[S]))}}),S.ready.then=F.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?n.setTimeout(S.ready):(C.addEventListener("DOMContentLoaded",q),n.addEventListener("load",q));var G=function(e,t,n,r,o,i,s){var a=0,c=e.length,u=null==n;if("object"===I(n))for(a in o=!0,n)G(e,t,a,n[a],!0,i,s);else if(void 0!==r&&(o=!0,v(r)||(s=!0),u&&(s?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(S(e),n)})),t))for(;a<c;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return o?e:u?t.call(e):c?t(e[0],n):i},K=/^-ms-/,J=/-([a-z])/g;function W(e,t){return t.toUpperCase()}function Y(e){return e.replace(K,"ms-").replace(J,W)}var Q=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function z(){this.expando=S.expando+z.uid++}z.uid=1,z.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Q(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[Y(t)]=n;else for(r in t)o[Y(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in r?[t]:t.match(x)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||S.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var X=new z,$=new z,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}(n)}catch(e){}$.set(e,t,n)}else n=void 0;return n}S.extend({hasData:function(e){return $.hasData(e)||X.hasData(e)},data:function(e,t,n){return $.access(e,t,n)},removeData:function(e,t){$.remove(e,t)},_data:function(e,t,n){return X.access(e,t,n)},_removeData:function(e,t){X.remove(e,t)}}),S.fn.extend({data:function(e,t){var n,r,o,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(o=$.get(i),1===i.nodeType&&!X.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=Y(r.slice(5)),te(i,r,o[r]));X.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){$.set(this,e)})):G(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=$.get(i,e))||void 0!==(n=te(i,e))?n:void 0;this.each((function(){$.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){$.remove(this,e)}))}}),S.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=X.get(e,t),n&&(!r||Array.isArray(n)?r=X.access(e,t,S.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=S.queue(e,t),r=n.length,o=n.shift(),i=S._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,(function(){S.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return X.get(e,n)||X.access(e,n,{empty:S.Callbacks("once memory").add((function(){X.remove(e,[t+"queue",n])}))})}}),S.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?S.queue(this[0],e):void 0===t?this:this.each((function(){var n=S.queue(this,e,t);S._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&S.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){S.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=S.Deferred(),i=this,s=this.length,a=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=X.get(i[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),o.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ie=C.documentElement,se=function(e){return S.contains(e.ownerDocument,e)},ae={composed:!0};ie.getRootNode&&(se=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var ce=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===S.css(e,"display")};function ue(e,t,n,r){var o,i,s=20,a=r?function(){return r.cur()}:function(){return S.css(e,t,"")},c=a(),u=n&&n[3]||(S.cssNumber[t]?"":"px"),l=e.nodeType&&(S.cssNumber[t]||"px"!==u&&+c)&&re.exec(S.css(e,t));if(l&&l[3]!==u){for(c/=2,u=u||l[3],l=+c||1;s--;)S.style(e,t,l+u),(1-i)*(1-(i=a()/c||.5))<=0&&(s=0),l/=i;l*=2,S.style(e,t,l+u),n=n||[]}return n&&(l=+l||+c||0,o=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=l,r.end=o)),o}var le={};function de(e){var t,n=e.ownerDocument,r=e.nodeName,o=le[r];return o||(t=n.body.appendChild(n.createElement(r)),o=S.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),le[r]=o,o)}function fe(e,t){for(var n,r,o=[],i=0,s=e.length;i<s;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=X.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&ce(r)&&(o[i]=de(r))):"none"!==n&&(o[i]="none",X.set(r,"display",n)));for(i=0;i<s;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}S.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ce(this)?S(this).show():S(this).hide()}))}});var pe,ge,he=/^(?:checkbox|radio)$/i,me=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;pe=C.createDocumentFragment().appendChild(C.createElement("div")),(ge=C.createElement("input")).setAttribute("type","radio"),ge.setAttribute("checked","checked"),ge.setAttribute("name","t"),pe.appendChild(ge),m.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",m.option=!!pe.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Ce(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?S.merge([e],n):n}function Re(e,t){for(var n=0,r=e.length;n<r;n++)X.set(e[n],"globalEval",!t||X.get(t[n],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,m.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var Te=/<|&#?\w+;/;function Ie(e,t,n,r,o){for(var i,s,a,c,u,l,d=t.createDocumentFragment(),f=[],p=0,g=e.length;p<g;p++)if((i=e[p])||0===i)if("object"===I(i))S.merge(f,i.nodeType?[i]:i);else if(Te.test(i)){for(s=s||d.appendChild(t.createElement("div")),a=(me.exec(i)||["",""])[1].toLowerCase(),c=ye[a]||ye._default,s.innerHTML=c[1]+S.htmlPrefilter(i)+c[2],l=c[0];l--;)s=s.lastChild;S.merge(f,s.childNodes),(s=d.firstChild).textContent=""}else f.push(t.createTextNode(i));for(d.textContent="",p=0;i=f[p++];)if(r&&S.inArray(i,r)>-1)o&&o.push(i);else if(u=se(i),s=Ce(d.appendChild(i),"script"),u&&Re(s),n)for(l=0;i=s[l++];)ve.test(i.type||"")&&n.push(i);return d}var Se=/^key/,Ee=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Me=/^([^.]*)(?:\.(.+)|)/;function _e(){return!0}function be(){return!1}function Oe(e,t){return e===function(){try{return C.activeElement}catch(e){}}()==("focus"===t)}function Ne(e,t,n,r,o,i){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)Ne(e,a,n,r,t[a],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=be;else if(!o)return e;return 1===i&&(s=o,(o=function(e){return S().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=S.guid++)),e.each((function(){S.event.add(this,t,o,r,n)}))}function Ae(e,t,n){n?(X.set(e,t,!1),S.event.add(e,t,{namespace:!1,handler:function(e){var r,o,i=X.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(S.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),X.set(this,t,i),r=n(this,t),this[t](),i!==(o=X.get(this,t))||r?X.set(this,t,!1):o={},i!==o)return e.stopImmediatePropagation(),e.preventDefault(),o.value}else i.length&&(X.set(this,t,{value:S.event.trigger(S.extend(i[0],S.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===X.get(e,t)&&S.event.add(e,t,_e)}S.event={global:{},add:function(e,t,n,r,o){var i,s,a,c,u,l,d,f,p,g,h,m=X.get(e);if(Q(e))for(n.handler&&(n=(i=n).handler,o=i.selector),o&&S.find.matchesSelector(ie,o),n.guid||(n.guid=S.guid++),(c=m.events)||(c=m.events=Object.create(null)),(s=m.handle)||(s=m.handle=function(t){return void 0!==S&&S.event.triggered!==t.type?S.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(x)||[""]).length;u--;)p=h=(a=Me.exec(t[u])||[])[1],g=(a[2]||"").split(".").sort(),p&&(d=S.event.special[p]||{},p=(o?d.delegateType:d.bindType)||p,d=S.event.special[p]||{},l=S.extend({type:p,origType:h,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&S.expr.match.needsContext.test(o),namespace:g.join(".")},i),(f=c[p])||((f=c[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,g,s)||e.addEventListener&&e.addEventListener(p,s)),d.add&&(d.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,l):f.push(l),S.event.global[p]=!0)},remove:function(e,t,n,r,o){var i,s,a,c,u,l,d,f,p,g,h,m=X.hasData(e)&&X.get(e);if(m&&(c=m.events)){for(u=(t=(t||"").match(x)||[""]).length;u--;)if(p=h=(a=Me.exec(t[u])||[])[1],g=(a[2]||"").split(".").sort(),p){for(d=S.event.special[p]||{},f=c[p=(r?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=f.length;i--;)l=f[i],!o&&h!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(f.splice(i,1),l.selector&&f.delegateCount--,d.remove&&d.remove.call(e,l));s&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,g,m.handle)||S.removeEvent(e,p,m.handle),delete c[p])}else for(p in c)S.event.remove(e,p+t[u],n,r,!0);S.isEmptyObject(c)&&X.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,s,a=new Array(arguments.length),c=S.event.fix(e),u=(X.get(this,"events")||Object.create(null))[c.type]||[],l=S.event.special[c.type]||{};for(a[0]=c,t=1;t<arguments.length;t++)a[t]=arguments[t];if(c.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,c)){for(s=S.event.handlers.call(this,c,u),t=0;(o=s[t++])&&!c.isPropagationStopped();)for(c.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!c.isImmediatePropagationStopped();)c.rnamespace&&!1!==i.namespace&&!c.rnamespace.test(i.namespace)||(c.handleObj=i,c.data=i.data,void 0!==(r=((S.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,a))&&!1===(c.result=r)&&(c.preventDefault(),c.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,c),c.result}},handlers:function(e,t){var n,r,o,i,s,a=[],c=t.delegateCount,u=e.target;if(c&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(i=[],s={},n=0;n<c;n++)void 0===s[o=(r=t[n]).selector+" "]&&(s[o]=r.needsContext?S(o,this).index(u)>-1:S.find(o,this,null,[u]).length),s[o]&&i.push(r);i.length&&a.push({elem:u,handlers:i})}return u=this,c<t.length&&a.push({elem:u,handlers:t.slice(c)}),a},addProp:function(e,t){Object.defineProperty(S.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return he.test(t.type)&&t.click&&N(t,"input")&&Ae(t,"click",_e),!1},trigger:function(e){var t=this||e;return he.test(t.type)&&t.click&&N(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return he.test(t.type)&&t.click&&N(t,"input")&&X.get(t,"click")||N(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?_e:be,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:be,isPropagationStopped:be,isImmediatePropagationStopped:be,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=_e,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=_e,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=_e,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Se.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ee.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},(function(e,t){S.event.special[e]={setup:function(){return Ae(this,e,Oe),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}})),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){S.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,o=e.relatedTarget,i=e.handleObj;return o&&(o===r||S.contains(r,o))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),S.fn.extend({on:function(e,t,n,r){return Ne(this,e,t,n,r)},one:function(e,t,n,r){return Ne(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,S(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=be),this.each((function(){S.event.remove(this,e,n,t)}))}});var we=/<script|<style|<link/i,Pe=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ue(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")&&S(e).children("tbody")[0]||e}function ke(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function xe(e,t){var n,r,o,i,s,a;if(1===t.nodeType){if(X.hasData(e)&&(a=X.get(e).events))for(o in X.remove(t,"handle events"),a)for(n=0,r=a[o].length;n<r;n++)S.event.add(t,o,a[o][n]);$.hasData(e)&&(i=$.access(e),s=S.extend({},i),$.set(t,s))}}function Be(e,t){var n=t.nodeName.toLowerCase();"input"===n&&he.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function je(e,t,n,r){t=c(t);var o,i,s,a,u,l,d=0,f=e.length,p=f-1,g=t[0],h=v(g);if(h||f>1&&"string"==typeof g&&!m.checkClone&&Pe.test(g))return e.each((function(o){var i=e.eq(o);h&&(t[0]=g.call(this,o,i.html())),je(i,t,n,r)}));if(f&&(i=(o=Ie(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(a=(s=S.map(Ce(o,"script"),ke)).length;d<f;d++)u=o,d!==p&&(u=S.clone(u,!0,!0),a&&S.merge(s,Ce(u,"script"))),n.call(e[d],u,d);if(a)for(l=s[s.length-1].ownerDocument,S.map(s,De),d=0;d<a;d++)u=s[d],ve.test(u.type||"")&&!X.access(u,"globalEval")&&S.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?S._evalUrl&&!u.noModule&&S._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},l):T(u.textContent.replace(Le,""),u,l))}return e}function Ve(e,t,n){for(var r,o=t?S.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||S.cleanData(Ce(r)),r.parentNode&&(n&&se(r)&&Re(Ce(r,"script")),r.parentNode.removeChild(r));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,o,i,s,a=e.cloneNode(!0),c=se(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(s=Ce(a),r=0,o=(i=Ce(e)).length;r<o;r++)Be(i[r],s[r]);if(t)if(n)for(i=i||Ce(e),s=s||Ce(a),r=0,o=i.length;r<o;r++)xe(i[r],s[r]);else xe(e,a);return(s=Ce(a,"script")).length>0&&Re(s,!c&&Ce(e,"script")),a},cleanData:function(e){for(var t,n,r,o=S.event.special,i=0;void 0!==(n=e[i]);i++)if(Q(n)){if(t=n[X.expando]){if(t.events)for(r in t.events)o[r]?S.event.remove(n,r):S.removeEvent(n,r,t.handle);n[X.expando]=void 0}n[$.expando]&&(n[$.expando]=void 0)}}}),S.fn.extend({detach:function(e){return Ve(this,e,!0)},remove:function(e){return Ve(this,e)},text:function(e){return G(this,(function(e){return void 0===e?S.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return je(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ue(this,e).appendChild(e)}))},prepend:function(){return je(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ue(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(Ce(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return S.clone(this,e,t)}))},html:function(e){return G(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!we.test(e)&&!ye[(me.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(S.cleanData(Ce(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return je(this,arguments,(function(t){var n=this.parentNode;S.inArray(this,e)<0&&(S.cleanData(Ce(this)),n&&n.replaceChild(t,this))}),e)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){S.fn[e]=function(e){for(var n,r=[],o=S(e),i=o.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),S(o[s])[t](n),u.apply(r,n.get());return this.pushStack(r)}}));var He=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},qe=function(e,t,n){var r,o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in r=n.call(e),t)e.style[o]=i[o];return r},Ge=new RegExp(oe.join("|"),"i");function Ke(e,t,n){var r,o,i,s,a=e.style;return(n=n||Fe(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||se(e)||(s=S.style(e,t)),!m.pixelBoxStyles()&&He.test(s)&&Ge.test(t)&&(r=a.width,o=a.minWidth,i=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=o,a.maxWidth=i)),void 0!==s?s+"":s}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(u).appendChild(l);var e=n.getComputedStyle(l);r="1%"!==e.top,c=12===t(e.marginLeft),l.style.right="60%",s=36===t(e.right),o=36===t(e.width),l.style.position="absolute",i=12===t(l.offsetWidth/3),ie.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var r,o,i,s,a,c,u=C.createElement("div"),l=C.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===l.style.backgroundClip,S.extend(m,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),c},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,r,o;return null==a&&(e=C.createElement("table"),t=C.createElement("tr"),r=C.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",r.style.height="9px",ie.appendChild(e).appendChild(t).appendChild(r),o=n.getComputedStyle(t),a=parseInt(o.height)>3,ie.removeChild(e)),a}}))}();var We=["Webkit","Moz","ms"],Ye=C.createElement("div").style,Qe={};function ze(e){var t=S.cssProps[e]||Qe[e];return t||(e in Ye?e:Qe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=We.length;n--;)if((e=We[n]+t)in Ye)return e}(e)||e)}var Xe=/^(none|table(?!-c[ea]).+)/,$e=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var r=re.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function nt(e,t,n,r,o,i){var s="width"===t?1:0,a=0,c=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(c+=S.css(e,n+oe[s],!0,o)),r?("content"===n&&(c-=S.css(e,"padding"+oe[s],!0,o)),"margin"!==n&&(c-=S.css(e,"border"+oe[s]+"Width",!0,o))):(c+=S.css(e,"padding"+oe[s],!0,o),"padding"!==n?c+=S.css(e,"border"+oe[s]+"Width",!0,o):a+=S.css(e,"border"+oe[s]+"Width",!0,o));return!r&&i>=0&&(c+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-c-a-.5))||0),c}function rt(e,t,n){var r=Fe(e),o=(!m.boxSizingReliable()||n)&&"border-box"===S.css(e,"boxSizing",!1,r),i=o,s=Ke(e,t,r),a="offset"+t[0].toUpperCase()+t.slice(1);if(He.test(s)){if(!n)return s;s="auto"}return(!m.boxSizingReliable()&&o||!m.reliableTrDimensions()&&N(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===S.css(e,"display",!1,r))&&e.getClientRects().length&&(o="border-box"===S.css(e,"boxSizing",!1,r),(i=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+nt(e,t,n||(o?"border":"content"),i,r,s)+"px"}function ot(e,t,n,r,o){return new ot.prototype.init(e,t,n,r,o)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ke(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,s,a=Y(t),c=$e.test(t),u=e.style;if(c||(t=ze(a)),s=S.cssHooks[t]||S.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,r))?o:u[t];"string"===(i=typeof n)&&(o=re.exec(n))&&o[1]&&(n=ue(e,t,o),i="number"),null!=n&&n==n&&("number"!==i||c||(n+=o&&o[3]||(S.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(c?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var o,i,s,a=Y(t);return $e.test(t)||(t=ze(a)),(s=S.cssHooks[t]||S.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Ke(e,t,r)),"normal"===o&&t in et&&(o=et[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),S.each(["height","width"],(function(e,t){S.cssHooks[t]={get:function(e,n,r){if(n)return!Xe.test(S.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?rt(e,t,r):qe(e,Ze,(function(){return rt(e,t,r)}))},set:function(e,n,r){var o,i=Fe(e),s=!m.scrollboxSize()&&"absolute"===i.position,a=(s||r)&&"border-box"===S.css(e,"boxSizing",!1,i),c=r?nt(e,t,r,a,i):0;return a&&s&&(c-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-nt(e,t,"border",!1,i)-.5)),c&&(o=re.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=S.css(e,t)),tt(0,n,c)}}})),S.cssHooks.marginLeft=Je(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ke(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),S.each({margin:"",padding:"",border:"Width"},(function(e,t){S.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+oe[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(S.cssHooks[e+t].set=tt)})),S.fn.extend({css:function(e,t){return G(this,(function(e,t,n){var r,o,i={},s=0;if(Array.isArray(t)){for(r=Fe(e),o=t.length;s<o;s++)i[t[s]]=S.css(e,t[s],!1,r);return i}return void 0!==n?S.style(e,t,n):S.css(e,t)}),e,t,arguments.length>1)}}),S.Tween=ot,ot.prototype={constructor:ot,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(S.cssNumber[n]?"":"px")},cur:function(){var e=ot.propHooks[this.prop];return e&&e.get?e.get(this):ot.propHooks._default.get(this)},run:function(e){var t,n=ot.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ot.propHooks._default.set(this),this}},ot.prototype.init.prototype=ot.prototype,ot.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[ze(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}},ot.propHooks.scrollTop=ot.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},S.fx=ot.prototype.init,S.fx.step={};var it,st,at=/^(?:toggle|show|hide)$/,ct=/queueHooks$/;function ut(){st&&(!1===C.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ut):n.setTimeout(ut,S.fx.interval),S.fx.tick())}function lt(){return n.setTimeout((function(){it=void 0})),it=Date.now()}function dt(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=oe[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function ft(e,t,n){for(var r,o=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),i=0,s=o.length;i<s;i++)if(r=o[i].call(n,t,e))return r}function pt(e,t,n){var r,o,i=0,s=pt.prefilters.length,a=S.Deferred().always((function(){delete c.elem})),c=function(){if(o)return!1;for(var t=it||lt(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),i=0,s=u.tweens.length;i<s;i++)u.tweens[i].run(r);return a.notifyWith(e,[u,r,n]),r<1&&s?n:(s||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:S.extend({},t),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=S.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),l=u.props;for(!function(e,t){var n,r,o,i,s;for(n in e)if(o=t[r=Y(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(s=S.cssHooks[r])&&"expand"in s)for(n in i=s.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(l,u.opts.specialEasing);i<s;i++)if(r=pt.prefilters[i].call(u,e,l,u.opts))return v(r.stop)&&(S._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return S.map(l,ft,u),v(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),S.fx.timer(S.extend(c,{elem:e,anim:u,queue:u.opts.queue})),u}S.Animation=S.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(x);for(var n,r=0,o=e.length;r<o;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,s,a,c,u,l,d="width"in t||"height"in t,f=this,p={},g=e.style,h=e.nodeType&&ce(e),m=X.get(e,"fxshow");for(r in n.queue||(null==(s=S._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always((function(){f.always((function(){s.unqueued--,S.queue(e,"fx").length||s.empty.fire()}))}))),t)if(o=t[r],at.test(o)){if(delete t[r],i=i||"toggle"===o,o===(h?"hide":"show")){if("show"!==o||!m||void 0===m[r])continue;h=!0}p[r]=m&&m[r]||S.style(e,r)}if((c=!S.isEmptyObject(t))||!S.isEmptyObject(p))for(r in d&&1===e.nodeType&&(n.overflow=[g.overflow,g.overflowX,g.overflowY],null==(u=m&&m.display)&&(u=X.get(e,"display")),"none"===(l=S.css(e,"display"))&&(u?l=u:(fe([e],!0),u=e.style.display||u,l=S.css(e,"display"),fe([e]))),("inline"===l||"inline-block"===l&&null!=u)&&"none"===S.css(e,"float")&&(c||(f.done((function(){g.display=u})),null==u&&(l=g.display,u="none"===l?"":l)),g.display="inline-block")),n.overflow&&(g.overflow="hidden",f.always((function(){g.overflow=n.overflow[0],g.overflowX=n.overflow[1],g.overflowY=n.overflow[2]}))),c=!1,p)c||(m?"hidden"in m&&(h=m.hidden):m=X.access(e,"fxshow",{display:u}),i&&(m.hidden=!h),h&&fe([e],!0),f.done((function(){for(r in h||fe([e]),X.remove(e,"fxshow"),p)S.style(e,r,p[r])}))),c=ft(h?m[r]:0,r,f),r in m||(m[r]=c.start,h&&(c.end=c.start,c.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),S.speed=function(e,t,n){var r=e&&"object"==typeof e?S.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return S.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in S.fx.speeds?r.duration=S.fx.speeds[r.duration]:r.duration=S.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&S.dequeue(this,r.queue)},r},S.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ce).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=S.isEmptyObject(e),i=S.speed(t,n,r),s=function(){var t=pt(this,S.extend({},e),i);(o||X.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",i=S.timers,s=X.get(this);if(o)s[o]&&s[o].stop&&r(s[o]);else for(o in s)s[o]&&s[o].stop&&ct.test(o)&&r(s[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||S.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=X.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=S.timers,s=r?r.length:0;for(n.finish=!0,S.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),S.each(["toggle","show","hide"],(function(e,t){var n=S.fn[t];S.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(dt(t,!0),e,r,o)}})),S.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){S.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),S.timers=[],S.fx.tick=function(){var e,t=0,n=S.timers;for(it=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||S.fx.stop(),it=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){st||(st=!0,ut())},S.fx.stop=function(){st=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(e,t){return e=S.fx&&S.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}}))},function(){var e=C.createElement("input"),t=C.createElement("select").appendChild(C.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=C.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var gt,ht=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return G(this,S.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){S.removeAttr(this,e)}))}}),S.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?S.prop(e,t,n):(1===i&&S.isXMLDoc(e)||(o=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void S.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=S.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(x);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?S.removeAttr(e,n):e.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||S.find.attr;ht[t]=function(e,t,r){var o,i,s=t.toLowerCase();return r||(i=ht[s],ht[s]=o,o=null!=n(e,t,r)?s:null,ht[s]=i),o}}));var mt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;function yt(e){return(e.match(x)||[]).join(" ")}function Ct(e){return e.getAttribute&&e.getAttribute("class")||""}function Rt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(x)||[]}S.fn.extend({prop:function(e,t){return G(this,S.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[S.propFix[e]||e]}))}}),S.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&S.isXMLDoc(e)||(t=S.propFix[t]||t,o=S.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):mt.test(e.nodeName)||vt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){S.propFix[this.toLowerCase()]=this})),S.fn.extend({addClass:function(e){var t,n,r,o,i,s,a,c=0;if(v(e))return this.each((function(t){S(this).addClass(e.call(this,t,Ct(this)))}));if((t=Rt(e)).length)for(;n=this[c++];)if(o=Ct(n),r=1===n.nodeType&&" "+yt(o)+" "){for(s=0;i=t[s++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(a=yt(r))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,o,i,s,a,c=0;if(v(e))return this.each((function(t){S(this).removeClass(e.call(this,t,Ct(this)))}));if(!arguments.length)return this.attr("class","");if((t=Rt(e)).length)for(;n=this[c++];)if(o=Ct(n),r=1===n.nodeType&&" "+yt(o)+" "){for(s=0;i=t[s++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(a=yt(r))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){S(this).toggleClass(e.call(this,n,Ct(this),t),t)})):this.each((function(){var t,o,i,s;if(r)for(o=0,i=S(this),s=Rt(e);t=s[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=Ct(this))&&X.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":X.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+yt(Ct(n))+" ").indexOf(t)>-1)return!0;return!1}});var Tt=/\r/g;S.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=v(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,S(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=S.map(o,(function(e){return null==e?"":e+""}))),(t=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=S.valHooks[o.type]||S.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(Tt,""):null==n?"":n:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:yt(S.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,s="select-one"===e.type,a=s?null:[],c=s?i+1:o.length;for(r=i<0?c:s?i:0;r<c;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=S(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,r,o=e.options,i=S.makeArray(t),s=o.length;s--;)((r=o[s]).selected=S.inArray(S.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),S.each(["radio","checkbox"],(function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=S.inArray(S(e).val(),t)>-1}},m.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),m.focusin="onfocusin"in n;var It=/^(?:focusinfocus|focusoutblur)$/,St=function(e){e.stopPropagation()};S.extend(S.event,{trigger:function(e,t,r,o){var i,s,a,c,u,l,d,f,g=[r||C],h=p.call(e,"type")?e.type:e,m=p.call(e,"namespace")?e.namespace.split("."):[];if(s=f=a=r=r||C,3!==r.nodeType&&8!==r.nodeType&&!It.test(h+S.event.triggered)&&(h.indexOf(".")>-1&&(m=h.split("."),h=m.shift(),m.sort()),u=h.indexOf(":")<0&&"on"+h,(e=e[S.expando]?e:new S.Event(h,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:S.makeArray(t,[e]),d=S.event.special[h]||{},o||!d.trigger||!1!==d.trigger.apply(r,t))){if(!o&&!d.noBubble&&!y(r)){for(c=d.delegateType||h,It.test(c+h)||(s=s.parentNode);s;s=s.parentNode)g.push(s),a=s;a===(r.ownerDocument||C)&&g.push(a.defaultView||a.parentWindow||n)}for(i=0;(s=g[i++])&&!e.isPropagationStopped();)f=s,e.type=i>1?c:d.bindType||h,(l=(X.get(s,"events")||Object.create(null))[e.type]&&X.get(s,"handle"))&&l.apply(s,t),(l=u&&s[u])&&l.apply&&Q(s)&&(e.result=l.apply(s,t),!1===e.result&&e.preventDefault());return e.type=h,o||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(g.pop(),t)||!Q(r)||u&&v(r[h])&&!y(r)&&((a=r[u])&&(r[u]=null),S.event.triggered=h,e.isPropagationStopped()&&f.addEventListener(h,St),r[h](),e.isPropagationStopped()&&f.removeEventListener(h,St),S.event.triggered=void 0,a&&(r[u]=a)),e.result}},simulate:function(e,t,n){var r=S.extend(new S.Event,n,{type:e,isSimulated:!0});S.event.trigger(r,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each((function(){S.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return S.event.trigger(e,t,n,!0)}}),m.focusin||S.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){S.event.simulate(t,e.target,S.event.fix(e))};S.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,o=X.access(r,t);o||r.addEventListener(e,n,!0),X.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,o=X.access(r,t)-1;o?X.access(r,t,o):(r.removeEventListener(e,n,!0),X.remove(r,t))}}}));var Et=n.location,Mt={guid:Date.now()},_t=/\?/;S.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+e),t};var bt=/\[\]$/,Ot=/\r?\n/g,Nt=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;function wt(e,t,n,r){var o;if(Array.isArray(t))S.each(t,(function(t,o){n||bt.test(e)?r(e,o):wt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)}));else if(n||"object"!==I(t))r(e,t);else for(o in t)wt(e+"["+o+"]",t[o],n,r)}S.param=function(e,t){var n,r=[],o=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,(function(){o(this.name,this.value)}));else for(n in e)wt(n,e[n],t,o);return r.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&At.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!he.test(e))})).map((function(e,t){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,(function(e){return{name:t.name,value:e.replace(Ot,"\r\n")}})):{name:t.name,value:n.replace(Ot,"\r\n")}})).get()}});var Pt=/%20/g,Lt=/#.*$/,Ut=/([?&])_=[^&]*/,kt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Dt=/^(?:GET|HEAD)$/,xt=/^\/\//,Bt={},jt={},Vt="*/".concat("*"),Ht=C.createElement("a");function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(x)||[];if(v(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qt(e,t,n,r){var o={},i=e===jt;function s(a){var c;return o[a]=!0,S.each(e[a]||[],(function(e,a){var u=a(t,n,r);return"string"!=typeof u||i||o[u]?i?!(c=u):void 0:(t.dataTypes.unshift(u),s(u),!1)})),c}return s(t.dataTypes[0])||!o["*"]&&s("*")}function Gt(e,t){var n,r,o=S.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&S.extend(!0,e,r),e}Ht.href=Et.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Gt(Gt(e,S.ajaxSettings),t):Gt(S.ajaxSettings,e)},ajaxPrefilter:Ft(Bt),ajaxTransport:Ft(jt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,i,s,a,c,u,l,d,f,p=S.ajaxSetup({},t),g=p.context||p,h=p.context&&(g.nodeType||g.jquery)?S(g):S.event,m=S.Deferred(),v=S.Callbacks("once memory"),y=p.statusCode||{},R={},T={},I="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=kt.exec(i);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?i:null},setRequestHeader:function(e,t){return null==u&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,R[e]=t),this},overrideMimeType:function(e){return null==u&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)E.always(e[E.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||I;return r&&r.abort(t),M(0,t),this}};if(m.promise(E),p.url=((e||p.url||Et.href)+"").replace(xt,Et.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(x)||[""],null==p.crossDomain){c=C.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=Ht.protocol+"//"+Ht.host!=c.protocol+"//"+c.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=S.param(p.data,p.traditional)),qt(Bt,p,t,E),u)return E;for(d in(l=S.event&&p.global)&&0==S.active++&&S.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Dt.test(p.type),o=p.url.replace(Lt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Pt,"+")):(f=p.url.slice(o.length),p.data&&(p.processData||"string"==typeof p.data)&&(o+=(_t.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(Ut,"$1"),f=(_t.test(o)?"&":"?")+"_="+Mt.guid+++f),p.url=o+f),p.ifModified&&(S.lastModified[o]&&E.setRequestHeader("If-Modified-Since",S.lastModified[o]),S.etag[o]&&E.setRequestHeader("If-None-Match",S.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&E.setRequestHeader("Content-Type",p.contentType),E.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Vt+"; q=0.01":""):p.accepts["*"]),p.headers)E.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(g,E,p)||u))return E.abort();if(I="abort",v.add(p.complete),E.done(p.success),E.fail(p.error),r=qt(jt,p,t,E)){if(E.readyState=1,l&&h.trigger("ajaxSend",[E,p]),u)return E;p.async&&p.timeout>0&&(a=n.setTimeout((function(){E.abort("timeout")}),p.timeout));try{u=!1,r.send(R,M)}catch(e){if(u)throw e;M(-1,e)}}else M(-1,"No Transport");function M(e,t,s,c){var d,f,C,R,T,I=t;u||(u=!0,a&&n.clearTimeout(a),r=void 0,i=c||"",E.readyState=e>0?4:0,d=e>=200&&e<300||304===e,s&&(R=function(e,t,n){for(var r,o,i,s,a=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in a)if(a[o]&&a[o].test(r)){c.unshift(o);break}if(c[0]in n)i=c[0];else{for(o in n){if(!c[0]||e.converters[o+" "+c[0]]){i=o;break}s||(s=o)}i=i||s}if(i)return i!==c[0]&&c.unshift(i),n[i]}(p,E,s)),!d&&S.inArray("script",p.dataTypes)>-1&&(p.converters["text script"]=function(){}),R=function(e,t,n,r){var o,i,s,a,c,u={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(i=l.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!c&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=i,i=l.shift())if("*"===i)i=c;else if("*"!==c&&c!==i){if(!(s=u[c+" "+i]||u["* "+i]))for(o in u)if((a=o.split(" "))[1]===i&&(s=u[c+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[o]:!0!==u[o]&&(i=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+c+" to "+i}}}return{state:"success",data:t}}(p,R,E,d),d?(p.ifModified&&((T=E.getResponseHeader("Last-Modified"))&&(S.lastModified[o]=T),(T=E.getResponseHeader("etag"))&&(S.etag[o]=T)),204===e||"HEAD"===p.type?I="nocontent":304===e?I="notmodified":(I=R.state,f=R.data,d=!(C=R.error))):(C=I,!e&&I||(I="error",e<0&&(e=0))),E.status=e,E.statusText=(t||I)+"",d?m.resolveWith(g,[f,I,E]):m.rejectWith(g,[E,I,C]),E.statusCode(y),y=void 0,l&&h.trigger(d?"ajaxSuccess":"ajaxError",[E,p,d?f:C]),v.fireWith(g,[E,I]),l&&(h.trigger("ajaxComplete",[E,p]),--S.active||S.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return S.get(e,t,n,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],(function(e,t){S[t]=function(e,n,r,o){return v(n)&&(o=o||r,r=n,n=void 0),S.ajax(S.extend({url:e,type:t,dataType:o,data:n,success:r},S.isPlainObject(e)&&e))}})),S.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),S._evalUrl=function(e,t,n){return S.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){S.globalEval(e,t,n)}})},S.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){S(this).wrapInner(e.call(this,t))})):this.each((function(){var t=S(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){S(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){S(this).replaceWith(this.childNodes)})),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Kt={0:200,1223:204},Jt=S.ajaxSettings.xhr();m.cors=!!Jt&&"withCredentials"in Jt,m.ajax=Jt=!!Jt,S.ajaxTransport((function(e){var t,r;if(m.cors||Jt&&!e.crossDomain)return{send:function(o,i){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);t=function(e){return function(){t&&(t=r=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?i(0,"error"):i(a.status,a.statusText):i(Kt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),r=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout((function(){t&&r()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),S.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),S.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=S("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),C.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Wt,Yt=[],Qt=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||S.expando+"_"+Mt.guid++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",(function(e,t,r){var o,i,s,a=!1!==e.jsonp&&(Qt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Qt,"$1"+o):!1!==e.jsonp&&(e.url+=(_t.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||S.error(o+" was not called"),s[0]},e.dataTypes[0]="json",i=n[o],n[o]=function(){s=arguments},r.always((function(){void 0===i?S(n).removeProp(o):n[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Yt.push(o)),s&&v(i)&&i(s[0]),s=i=void 0})),"script"})),m.createHTMLDocument=((Wt=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Wt.childNodes.length),S.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,t.head.appendChild(r)):t=C),i=!n&&[],(o=A.exec(e))?[t.createElement(o[1])]:(o=Ie([e],t,i),i&&i.length&&S(i).remove(),S.merge([],o.childNodes)));var r,o,i},S.fn.load=function(e,t,n){var r,o,i,s=this,a=e.indexOf(" ");return a>-1&&(r=yt(e.slice(a)),e=e.slice(0,a)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&S.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){i=arguments,s.html(r?S("<div>").append(S.parseHTML(e)).find(r):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},S.expr.pseudos.animated=function(e){return S.grep(S.timers,(function(t){return e===t.elem})).length},S.offset={setOffset:function(e,t,n){var r,o,i,s,a,c,u=S.css(e,"position"),l=S(e),d={};"static"===u&&(e.style.position="relative"),a=l.offset(),i=S.css(e,"top"),c=S.css(e,"left"),("absolute"===u||"fixed"===u)&&(i+c).indexOf("auto")>-1?(s=(r=l.position()).top,o=r.left):(s=parseFloat(i)||0,o=parseFloat(c)||0),v(t)&&(t=t.call(e,n,S.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+o),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),l.css(d))}},S.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){S.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===S.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===S.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=S(e).offset()).top+=S.css(e,"borderTopWidth",!0),o.left+=S.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-S.css(r,"marginTop",!0),left:t.left-o.left-S.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===S.css(e,"position");)e=e.offsetParent;return e||ie}))}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;S.fn[e]=function(r){return G(this,(function(e,r,o){var i;if(y(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o}),e,r,arguments.length)}})),S.each(["top","left"],(function(e,t){S.cssHooks[t]=Je(m.pixelPosition,(function(e,n){if(n)return n=Ke(e,t),He.test(n)?S(e).position()[t]+"px":n}))})),S.each({Height:"height",Width:"width"},(function(e,t){S.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){S.fn[r]=function(o,i){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===i?"margin":"border");return G(this,(function(t,n,o){var i;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?S.css(t,n,a):S.style(t,n,o,a)}),t,s?o:void 0,s)}}))})),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){S.fn[t]=function(e){return this.on(t,e)}})),S.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){S.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var zt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;S.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=a.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(a.call(arguments)))}).guid=e.guid=e.guid||S.guid++,o},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=N,S.isFunction=v,S.isWindow=y,S.camelCase=Y,S.type=I,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?"":(e+"").replace(zt,"")},void 0===(r=function(){return S}.apply(t,[]))||(e.exports=r);var Xt=n.jQuery,$t=n.$;return S.noConflict=function(e){return n.$===S&&(n.$=$t),e&&n.jQuery===S&&(n.jQuery=Xt),S},void 0===o&&(n.jQuery=n.$=S),S}))},function(e,t){var n,r=[0,26,44,70,100,134,172,196,242,292,346,404,466,532,581,655,733,815,901,991,1085,1156,1258,1364,1474,1588,1706,1828,1921,2051,2185,2323,2465,2611,2761,2876,3034,3196,3362,3532,3706];t.getSymbolSize=function(e){if(!e)throw new Error('"version" cannot be null or undefined');if(e<1||e>40)throw new Error('"version" should be in range from 1 to 40');return 4*e+17},t.getSymbolTotalCodewords=function(e){return r[e]},t.getBCHDigit=function(e){for(var t=0;0!==e;)t++,e>>>=1;return t},t.setToSJISFunction=function(e){if("function"!=typeof e)throw new Error('"toSJISFunc" is not a valid function.');n=e},t.isKanjiModeEnabled=function(){return void 0!==n},t.toSJIS=function(e){return n(e)}},function(e,t,n){var r=n(8),o=n(9);t.NUMERIC={id:"Numeric",bit:1,ccBits:[10,12,14]},t.ALPHANUMERIC={id:"Alphanumeric",bit:2,ccBits:[9,11,13]},t.BYTE={id:"Byte",bit:4,ccBits:[8,16,16]},t.KANJI={id:"Kanji",bit:8,ccBits:[8,10,12]},t.MIXED={bit:-1},t.getCharCountIndicator=function(e,t){if(!e.ccBits)throw new Error("Invalid mode: "+e);if(!r.isValid(t))throw new Error("Invalid version: "+t);return t>=1&&t<10?e.ccBits[0]:t<27?e.ccBits[1]:e.ccBits[2]},t.getBestModeForData=function(e){return o.testNumeric(e)?t.NUMERIC:o.testAlphanumeric(e)?t.ALPHANUMERIC:o.testKanji(e)?t.KANJI:t.BYTE},t.toString=function(e){if(e&&e.id)return e.id;throw new Error("Invalid mode")},t.isValid=function(e){return e&&e.bit&&e.ccBits},t.from=function(e,n){if(t.isValid(e))return e;try{return function(e){if("string"!=typeof e)throw new Error("Param is not a string");switch(e.toLowerCase()){case"numeric":return t.NUMERIC;case"alphanumeric":return t.ALPHANUMERIC;case"kanji":return t.KANJI;case"byte":return t.BYTE;default:throw new Error("Unknown mode: "+e)}}(e)}catch(e){return n}}},function(e,t,n){"use strict";var r=n(5);i.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()}catch(e){return!1}}();var o=i.TYPED_ARRAY_SUPPORT?2147483647:1073741823;function i(e,t,n){return i.TYPED_ARRAY_SUPPORT||this instanceof i?"number"==typeof e?c(this,e):function(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer)return function(e,t,n,r){if(n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");var o;o=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);i.TYPED_ARRAY_SUPPORT?o.__proto__=i.prototype:o=u(e,o);return o}(e,t,n,r);if("string"==typeof t)return function(e,t){var n=0|d(t),r=a(e,n),o=r.write(t);o!==n&&(r=r.slice(0,o));return r}(e,t);return function(e,t){if(i.isBuffer(t)){var n=0|s(t.length),r=a(e,n);return 0===r.length||t.copy(r,0,0,n),r}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(o=t.length)!=o?a(e,0):u(e,t);if("Buffer"===t.type&&Array.isArray(t.data))return u(e,t.data)}var o;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}(this,e,t,n):new i(e,t,n)}function s(e){if(e>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|e}function a(e,t){var n;return i.TYPED_ARRAY_SUPPORT?(n=new Uint8Array(t)).__proto__=i.prototype:(null===(n=e)&&(n=new i(t)),n.length=t),n}function c(e,t){var n=a(e,t<0?0:0|s(t));if(!i.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)n[r]=0;return n}function u(e,t){for(var n=t.length<0?0:0|s(t.length),r=a(e,n),o=0;o<n;o+=1)r[o]=255&t[o];return r}function l(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function d(e){return i.isBuffer(e)?e.length:"undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer)?e.byteLength:("string"!=typeof e&&(e=""+e),0===e.length?0:l(e).length)}i.TYPED_ARRAY_SUPPORT&&(i.prototype.__proto__=Uint8Array.prototype,i.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&i[Symbol.species]===i&&Object.defineProperty(i,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1})),i.prototype.write=function(e,t,n){void 0===t||void 0===n&&"string"==typeof t?(n=this.length,t=0):isFinite(t)&&(t|=0,isFinite(n)?n|=0:n=void 0);var r=this.length-t;if((void 0===n||n>r)&&(n=r),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");return function(e,t,n,r){return function(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}(l(t,e.length-n),e,n,r)}(this,e,t,n)},i.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),i.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=i.prototype;else{var o=t-e;n=new i(o,void 0);for(var s=0;s<o;++s)n[s]=this[s+e]}return n},i.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,s=r-n;if(this===e&&n<t&&t<r)for(o=s-1;o>=0;--o)e[o+t]=this[o+n];else if(s<1e3||!i.TYPED_ARRAY_SUPPORT)for(o=0;o<s;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+s),t);return s},i.prototype.fill=function(e,t,n){if("string"==typeof e){if("string"==typeof t?(t=0,n=this.length):"string"==typeof n&&(n=this.length),1===e.length){var r=e.charCodeAt(0);r<256&&(e=r)}}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{var s=i.isBuffer(e)?e:new i(e),a=s.length;for(o=0;o<n-t;++o)this[o+t]=s[o%a]}return this},i.concat=function(e,t){if(!r(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return a(null,0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var o=c(null,t),s=0;for(n=0;n<e.length;++n){var u=e[n];if(!i.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(o,s),s+=u.length}return o},i.byteLength=d,i.prototype._isBuffer=!0,i.isBuffer=function(e){return!(null==e||!e._isBuffer)},e.exports.alloc=function(e){var t=new i(e);return t.fill(0),t},e.exports.from=function(e){return new i(e)}},function(module,exports,__webpack_require__){!function(e,t){module.exports=t();var n,r=(n=module.exports).RongIMClient;if(!!e.RongIMLib){var o=RongIMLib.RongIMClient||{};for(var i in o)r[i]=o[i]}e.RongIMLib=n,e.RongIMClient=r}(window,(function(){var Polling={SetUserStatusInput:function(){var e={};this.setStatus=function(t){e.status=t},this.toArrayBuffer=function(){return e}},SetUserStatusOutput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.toArrayBuffer=function(){return e}},GetUserStatusInput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.toArrayBuffer=function(){return e}},GetUserStatusOutput:function(){var e={};this.setStatus=function(t){e.status=t},this.setSubUserId=function(t){e.subUserId=t},this.toArrayBuffer=function(){return e}},VoipDynamicInput:function(){var e={};this.setEngineType=function(t){e.engineType=t},this.setChannelName=function(t){e.channelName=t},this.setChannelExtra=function(t){e.channelExtra=t},this.toArrayBuffer=function(){return e}},VoipDynamicOutput:function(){var e={};this.setDynamicKey=function(t){e.dynamicKey=t},this.toArrayBuffer=function(){return e}},SubUserStatusInput:function(){var e={};this.setUserid=function(t){e.userid=t},this.toArrayBuffer=function(){return e}},SubUserStatusOutput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.toArrayBuffer=function(){return e}},CleanHisMsgInput:function(){var e={};this.setTargetId=function(t){e.targetId=t},this.setDataTime=function(t){e.dataTime=t},this.setConversationType=function(t){e.conversationType=t},this.toArrayBuffer=function(){return e}},DeleteMsgInput:function(){var e={};this.setType=function(t){e.type=t},this.setConversationId=function(t){e.conversationId=t},this.setMsgs=function(t){e.msgs=t},this.toArrayBuffer=function(){return e}},DeleteMsg:function(){var e={};this.setMsgId=function(t){e.msgId=t},this.setMsgDataTime=function(t){e.msgDataTime=t},this.setDirect=function(t){e.direct=t},this.toArrayBuffer=function(){return e}},DeleteMsgOutput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.toArrayBuffer=function(){return e}},SearchMpInput:function(){var e={};this.setType=function(t){e.type=t},this.setId=function(t){e.id=t},this.toArrayBuffer=function(){return e}},SearchMpOutput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.setInfo=function(t){e.info=t},this.toArrayBuffer=function(){return e}},MpInfo:function(){var e={};this.setMpid=function(t){e.mpid=t},this.setName=function(t){e.name=t},this.setType=function(t){e.type=t},this.setTime=function(t){e.time=t},this.setPortraitUri=function(t){e.portraitUrl=t},this.setExtra=function(t){e.extra=t},this.toArrayBuffer=function(){return e}},PullMpInput:function(){var e={};this.setMpid=function(t){e.mpid=t},this.setTime=function(t){e.time=t},this.toArrayBuffer=function(){return e}},PullMpOutput:function(){var e={};this.setStatus=function(t){e.status=t},this.setInfo=function(t){e.info=t},this.toArrayBuffer=function(){return e}},MPFollowInput:function(){var e={};this.setId=function(t){e.id=t},this.toArrayBuffer=function(){return e}},MPFollowOutput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.setInfo=function(t){e.info=t},this.toArrayBuffer=function(){return e}},NotifyMsg:function(){var e={};this.setType=function(t){e.type=t},this.setTime=function(t){e.time=t},this.setChrmId=function(t){e.chrmId=t},this.toArrayBuffer=function(){return e}},SyncRequestMsg:function(){var e={};this.setSyncTime=function(t){e.syncTime=t||0},this.setIspolling=function(t){e.ispolling=!!t},this.setIsweb=function(t){e.isweb=!!t},this.setIsPullSend=function(t){e.isPullSend=!!t},this.setSendBoxSyncTime=function(t){e.sendBoxSyncTime=t},this.toArrayBuffer=function(){return e}},UpStreamMessage:function(){var e={};this.setSessionId=function(t){e.sessionId=t},this.setClassname=function(t){e.classname=t},this.setContent=function(t){t&&(e.content=t)},this.setPushText=function(t){e.pushText=t},this.setUserId=function(t){e.userId=t},this.setConfigFlag=function(t){e.configFlag=t},this.setAppData=function(t){e.appData=t},this.toArrayBuffer=function(){return e}},DownStreamMessages:function(){var e={};this.setList=function(t){e.list=t},this.setSyncTime=function(t){e.syncTime=t},this.setFinished=function(t){e.finished=t},this.toArrayBuffer=function(){return e}},DownStreamMessage:function(){var e={};this.setFromUserId=function(t){e.fromUserId=t},this.setType=function(t){e.type=t},this.setGroupId=function(t){e.groupId=t},this.setClassname=function(t){e.classname=t},this.setContent=function(t){t&&(e.content=t)},this.setDataTime=function(t){e.dataTime=t},this.setStatus=function(t){e.status=t},this.setMsgId=function(t){e.msgId=t},this.toArrayBuffer=function(){return e}},CreateDiscussionInput:function(){var e={};this.setName=function(t){e.name=t},this.toArrayBuffer=function(){return e}},CreateDiscussionOutput:function(){var e={};this.setId=function(t){e.id=t},this.toArrayBuffer=function(){return e}},ChannelInvitationInput:function(){var e={};this.setUsers=function(t){e.users=t},this.toArrayBuffer=function(){return e}},LeaveChannelInput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.toArrayBuffer=function(){return e}},QueryChatroomInfoInput:function(){var e={};this.setCount=function(t){e.count=t},this.setOrder=function(t){e.order=t},this.toArrayBuffer=function(){return e}},QueryChatroomInfoOutput:function(){var e={};this.setUserTotalNums=function(t){e.userTotalNums=t},this.setUserInfos=function(t){e.userInfos=t},this.toArrayBuffer=function(){return e}},ChannelEvictionInput:function(){var e={};this.setUser=function(t){e.user=t},this.toArrayBuffer=function(){return e}},RenameChannelInput:function(){var e={};this.setName=function(t){e.name=t},this.toArrayBuffer=function(){return e}},ChannelInfoInput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.toArrayBuffer=function(){return e}},ChannelInfoOutput:function(){var e={};this.setType=function(t){e.type=t},this.setChannelId=function(t){e.channelId=t},this.setChannelName=function(t){e.channelName=t},this.setAdminUserId=function(t){e.adminUserId=t},this.setFirstTenUserIds=function(t){e.firstTenUserIds=t},this.setOpenStatus=function(t){e.openStatus=t},this.toArrayBuffer=function(){return e}},ChannelInfosInput:function(){var e={};this.setPage=function(t){e.page=t},this.setNumber=function(t){e.number=t},this.toArrayBuffer=function(){return e}},ChannelInfosOutput:function(){var e={};this.setChannels=function(t){e.channels=t},this.setTotal=function(t){e.total=t},this.toArrayBuffer=function(){return e}},MemberInfo:function(){var e={};this.setUserId=function(t){e.userId=t},this.setUserName=function(t){e.userName=t},this.setUserPortrait=function(t){e.userPortrait=t},this.setExtension=function(t){e.extension=t},this.toArrayBuffer=function(){return e}},GroupMembersInput:function(){var e={};this.setPage=function(t){e.page=t},this.setNumber=function(t){e.number=t},this.toArrayBuffer=function(){return e}},GroupMembersOutput:function(){var e={};this.setMembers=function(t){e.members=t},this.setTotal=function(t){e.total=t},this.toArrayBuffer=function(){return e}},GetUserInfoInput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.toArrayBuffer=function(){return e}},GetUserInfoOutput:function(){var e={};this.setUserId=function(t){e.userId=t},this.setUserName=function(t){e.userName=t},this.setUserPortrait=function(t){e.userPortrait=t},this.toArrayBuffer=function(){return e}},GetSessionIdInput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.toArrayBuffer=function(){return e}},GetSessionIdOutput:function(){var e={};this.setSessionId=function(t){e.sessionId=t},this.toArrayBuffer=function(){return e}},GetQNupTokenInput:function(){var e={};this.setType=function(t){e.type=t},this.toArrayBuffer=function(){return e}},GetQNupTokenOutput:function(){var e={};this.setDeadline=function(t){e.deadline=t},this.setToken=function(t){e.token=t},this.toArrayBuffer=function(){return e}},GetQNdownloadUrlInput:function(){var e={};this.setType=function(t){e.type=t},this.setKey=function(t){e.key=t},this.setFileName=function(t){e.fileName=t},this.toArrayBuffer=function(){return e}},GetQNdownloadUrlOutput:function(){var e={};this.setDownloadUrl=function(t){e.downloadUrl=t},this.toArrayBuffer=function(){return e}},Add2BlackListInput:function(){var e={};this.setUserId=function(t){e.userId=t},this.toArrayBuffer=function(){return e}},RemoveFromBlackListInput:function(){var e={};this.setUserId=function(t){e.userId=t},this.toArrayBuffer=function(){return e}},QueryBlackListInput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.toArrayBuffer=function(){return e}},QueryBlackListOutput:function(){var e={};this.setUserIds=function(t){e.userIds=t},this.toArrayBuffer=function(){return e}},BlackListStatusInput:function(){var e={};this.setUserId=function(t){e.userId=t},this.toArrayBuffer=function(){return e}},BlockPushInput:function(){var e={};this.setBlockeeId=function(t){e.blockeeId=t},this.toArrayBuffer=function(){return e}},ModifyPermissionInput:function(){var e={};this.setOpenStatus=function(t){e.openStatus=t},this.toArrayBuffer=function(){return e}},GroupInput:function(){var e={};this.setGroupInfo=function(t){for(var n=0,r=[];n<t.length;n++)r.push({id:t[n].getContent().id,name:t[n].getContent().name});e.groupInfo=r},this.toArrayBuffer=function(){return e}},GroupOutput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.toArrayBuffer=function(){return e}},GroupInfo:function(){var e={};this.setId=function(t){e.id=t},this.setName=function(t){e.name=t},this.getContent=function(){return e},this.toArrayBuffer=function(){return e}},GroupHashInput:function(){var e={};this.setUserId=function(t){e.userId=t},this.setGroupHashCode=function(t){e.groupHashCode=t},this.toArrayBuffer=function(){return e}},GroupHashOutput:function(){var e={};this.setResult=function(t){e.result=t},this.toArrayBuffer=function(){return e}},ChrmInput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.toArrayBuffer=function(){return e}},ChrmOutput:function(){var e={};this.setNothing=function(t){e.nothing=t},this.toArrayBuffer=function(){return e}},ChrmPullMsg:function(){var e={};this.setSyncTime=function(t){e.syncTime=t},this.setCount=function(t){e.count=t},this.toArrayBuffer=function(){return e}},RelationsInput:function(){var e={};this.setType=function(t){e.type=t},this.setMsg=function(t){e.msg=t},this.setCount=function(t){e.count=t},this.toArrayBuffer=function(){return e}},RelationsOutput:function(){var e={};this.setInfo=function(t){e.info=t},this.toArrayBuffer=function(){return e}},RelationInfo:function(){var e={};this.setType=function(t){e.type=t},this.setUserId=function(t){e.userId=t},this.setMsg=function(t){e.msg=t},this.toArrayBuffer=function(){return e}},HistoryMessageInput:function(){var e={};this.setTargetId=function(t){e.targetId=t},this.setDataTime=function(t){e.dataTime=t},this.setSize=function(t){e.size=t},this.toArrayBuffer=function(){return e}},HistoryMessagesOuput:function(){var e={};this.setList=function(t){e.list=t},this.setSyncTime=function(t){e.syncTime=t},this.setHasMsg=function(t){e.hasMsg=t},this.toArrayBuffer=function(){return e}},HistoryMsgInput:function(){var e={};this.setTargetId=function(t){e.targetId=t},this.setTime=function(t){e.time=t},this.setCount=function(t){e.count=t},this.setOrder=function(t){e.order=t},this.toArrayBuffer=function(){return e}},HistoryMsgOuput:function(){var e={};this.setList=function(t){e.list=t},this.setSyncTime=function(t){e.syncTime=t},this.setHasMsg=function(t){e.hasMsg=t},this.toArrayBuffer=function(){return e}},RtcQueryListInput:function(){var e={};this.toArrayBuffer=function(){return e},this.setOrder=function(t){e.order=t}},RtcKeyDeleteInput:function(){var e={};this.toArrayBuffer=function(){return e},this.setKey=function(t){e.key=t}},RtcValueInfo:function(){var e={};this.toArrayBuffer=function(){return e},this.setKey=function(t){e.key=t},this.setValue=function(t){e.value=t}},RtcUserListOutput:function(){var e={};this.toArrayBuffer=function(){return e},this.setList=function(t){e.list=t},this.setToken=function(t){e.token=t}},RtcRoomInfoOutput:function(){var e={};this.toArrayBuffer=function(){return e},this.setRoomId=function(t){e.roomId=t},this.setRoomData=function(t){e.roomData=t},this.setUserCount=function(t){e.userCount=t},this.setList=function(t){e.list=t}},RtcInput:function(){var e={};this.toArrayBuffer=function(){return e},this.setRoomType=function(t){e.roomType=t},this.setBroadcastType=function(t){e.broadcastType=t}},RtcQryOutput:function(){var e={};this.toArrayBuffer=function(){return e},this.setOutInfo=function(t){e.outInfo=t}},RtcDataInput:function(){var e={};this.toArrayBuffer=function(){return e},this.setInterior=function(t){e.interior=t},this.setTarget=function(t){e.target=t},this.setKey=function(t){e.key=t},this.setObjectName=function(t){e.objectName=t},this.setContent=function(t){e.content=t}},RtcSetDataInput:function(){var e={};this.toArrayBuffer=function(){return e},this.setInterior=function(t){e.interior=t},this.setTarget=function(t){e.target=t},this.setKey=function(t){e.key=t},this.setValue=function(t){e.value=t},this.setObjectName=function(t){e.objectName=t},this.setContent=function(t){e.content=t}},RtcOutput:function(){var e={};this.toArrayBuffer=function(){return e},this.setNothing=function(t){e.nothing=t}},RtcTokenOutput:function(){var e={};this.toArrayBuffer=function(){return e},this.setRtcToken=function(t){e.rtcToken=t}},ChrmNotifyMsg:function(){var e={};this.toArrayBuffer=function(){return e},this.setType=function(t){e.type=t},this.setTime=function(t){e.time=t},this.setChrmId=function(t){e.chrmId=t}},ChrmKVEntity:function(){var e={};this.toArrayBuffer=function(){return e},this.setKey=function(t){e.key=t},this.setValue=function(t){e.value=t},this.setStatus=function(t){e.status=t},this.setTimestamp=function(t){e.timestamp=t},this.setUid=function(t){e.uid=t}},SetChrmKV:function(){var e={};this.toArrayBuffer=function(){return e},this.setEntry=function(t){e.entry=t},this.setNotification=function(t){e.notification=t.toArrayBuffer()},this.setBNotify=function(t){e.bNotify=t},this.setType=function(t){e.type=t}},ChrmKVOutput:function(){var e={};this.toArrayBuffer=function(){return e},this.setEntries=function(e){this.entries=e},this.setBFullUpdate=function(e){this.bFullUpdate=e},this.setSyncTime=function(e){this.syncTime=e}},QueryChrmKV:function(){var e={};this.toArrayBuffer=function(){return e},this.setTimestamp=function(t){e.timestamp=t}},DeleteChrmKV:function(){var e={};this.toArrayBuffer=function(){return e},this.setEntry=function(t){e.entry=t},this.setBNotify=function(t){e.bNotify=t},this.setNotification=function(t){e.notification=t.toArrayBuffer()},this.setType=function(t){e.type=t}}};for(var f in Polling)Polling[f].decode=function(b){var back={},val=JSON.parse(b)||eval("("+b+")");for(var i in val)back[i]=val[i],back["get"+i.charAt(0).toUpperCase()+i.slice(1)]=function(){return val[i]};return back};var md5=function(){"use strict";function e(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function t(t,n,r,o,i,s){return e((a=e(e(n,t),e(o,s)))<<(c=i)|a>>>32-c,r);var a,c}function n(e,n,r,o,i,s,a){return t(n&r|~n&o,e,n,i,s,a)}function r(e,n,r,o,i,s,a){return t(n&o|r&~o,e,n,i,s,a)}function o(e,n,r,o,i,s,a){return t(n^r^o,e,n,i,s,a)}function i(e,n,r,o,i,s,a){return t(r^(n|~o),e,n,i,s,a)}function s(t,s){t[s>>5]|=128<<s%32,t[14+(s+64>>>9<<4)]=s;var a,c,u,l,d,f=1732584193,p=-271733879,g=-1732584194,h=271733878;for(a=0;a<t.length;a+=16)c=f,u=p,l=g,d=h,f=n(f,p,g,h,t[a],7,-680876936),h=n(h,f,p,g,t[a+1],12,-389564586),g=n(g,h,f,p,t[a+2],17,606105819),p=n(p,g,h,f,t[a+3],22,-1044525330),f=n(f,p,g,h,t[a+4],7,-176418897),h=n(h,f,p,g,t[a+5],12,1200080426),g=n(g,h,f,p,t[a+6],17,-1473231341),p=n(p,g,h,f,t[a+7],22,-45705983),f=n(f,p,g,h,t[a+8],7,1770035416),h=n(h,f,p,g,t[a+9],12,-1958414417),g=n(g,h,f,p,t[a+10],17,-42063),p=n(p,g,h,f,t[a+11],22,-1990404162),f=n(f,p,g,h,t[a+12],7,1804603682),h=n(h,f,p,g,t[a+13],12,-40341101),g=n(g,h,f,p,t[a+14],17,-1502002290),f=r(f,p=n(p,g,h,f,t[a+15],22,1236535329),g,h,t[a+1],5,-165796510),h=r(h,f,p,g,t[a+6],9,-1069501632),g=r(g,h,f,p,t[a+11],14,643717713),p=r(p,g,h,f,t[a],20,-373897302),f=r(f,p,g,h,t[a+5],5,-701558691),h=r(h,f,p,g,t[a+10],9,38016083),g=r(g,h,f,p,t[a+15],14,-660478335),p=r(p,g,h,f,t[a+4],20,-405537848),f=r(f,p,g,h,t[a+9],5,568446438),h=r(h,f,p,g,t[a+14],9,-1019803690),g=r(g,h,f,p,t[a+3],14,-187363961),p=r(p,g,h,f,t[a+8],20,1163531501),f=r(f,p,g,h,t[a+13],5,-1444681467),h=r(h,f,p,g,t[a+2],9,-51403784),g=r(g,h,f,p,t[a+7],14,1735328473),f=o(f,p=r(p,g,h,f,t[a+12],20,-1926607734),g,h,t[a+5],4,-378558),h=o(h,f,p,g,t[a+8],11,-2022574463),g=o(g,h,f,p,t[a+11],16,1839030562),p=o(p,g,h,f,t[a+14],23,-35309556),f=o(f,p,g,h,t[a+1],4,-1530992060),h=o(h,f,p,g,t[a+4],11,1272893353),g=o(g,h,f,p,t[a+7],16,-155497632),p=o(p,g,h,f,t[a+10],23,-1094730640),f=o(f,p,g,h,t[a+13],4,681279174),h=o(h,f,p,g,t[a],11,-358537222),g=o(g,h,f,p,t[a+3],16,-722521979),p=o(p,g,h,f,t[a+6],23,76029189),f=o(f,p,g,h,t[a+9],4,-640364487),h=o(h,f,p,g,t[a+12],11,-421815835),g=o(g,h,f,p,t[a+15],16,530742520),f=i(f,p=o(p,g,h,f,t[a+2],23,-995338651),g,h,t[a],6,-198630844),h=i(h,f,p,g,t[a+7],10,1126891415),g=i(g,h,f,p,t[a+14],15,-1416354905),p=i(p,g,h,f,t[a+5],21,-57434055),f=i(f,p,g,h,t[a+12],6,1700485571),h=i(h,f,p,g,t[a+3],10,-1894986606),g=i(g,h,f,p,t[a+10],15,-1051523),p=i(p,g,h,f,t[a+1],21,-2054922799),f=i(f,p,g,h,t[a+8],6,1873313359),h=i(h,f,p,g,t[a+15],10,-30611744),g=i(g,h,f,p,t[a+6],15,-1560198380),p=i(p,g,h,f,t[a+13],21,1309151649),f=i(f,p,g,h,t[a+4],6,-145523070),h=i(h,f,p,g,t[a+11],10,-1120210379),g=i(g,h,f,p,t[a+2],15,718787259),p=i(p,g,h,f,t[a+9],21,-343485551),f=e(f,c),p=e(p,u),g=e(g,l),h=e(h,d);return[f,p,g,h]}function a(e){var t,n="";for(t=0;t<32*e.length;t+=8)n+=String.fromCharCode(e[t>>5]>>>t%32&255);return n}function c(e){var t,n=[];for(n[(e.length>>2)-1]=void 0,t=0;t<n.length;t+=1)n[t]=0;for(t=0;t<8*e.length;t+=8)n[t>>5]|=(255&e.charCodeAt(t/8))<<t%32;return n}function u(e){var t,n,r="";for(n=0;n<e.length;n+=1)t=e.charCodeAt(n),r+="0123456789abcdef".charAt(t>>>4&15)+"0123456789abcdef".charAt(15&t);return r}function l(e){return unescape(encodeURIComponent(e))}function d(e){return function(e){return a(s(c(e),8*e.length))}(l(e))}function f(e,t){return function(e,t){var n,r,o=c(e),i=[],u=[];for(i[15]=u[15]=void 0,o.length>16&&(o=s(o,8*e.length)),n=0;n<16;n+=1)i[n]=909522486^o[n],u[n]=1549556828^o[n];return r=s(i.concat(c(t)),512+8*t.length),a(s(u.concat(r),640))}(l(e),l(t))}return function(e,t,n){return t?n?f(t,e):u(f(t,e)):n?d(e):u(d(e))}}(),RongIMLib,RongIMLib,RongIMLib;!function(e){!function(e){e[e.ALL=1]="ALL",e[e.PART=2]="PART"}(e.MentionedType||(e.MentionedType={}));e.MentionedType;!function(e){e[e.CUSTOMER_SERVICE=1]="CUSTOMER_SERVICE",e[e.RECALL=2]="RECALL"}(e.MethodType||(e.MethodType={}));e.MethodType;!function(e){e[e.IN_BLACK_LIST=0]="IN_BLACK_LIST",e[e.NOT_IN_BLACK_LIST=1]="NOT_IN_BLACK_LIST"}(e.BlacklistStatus||(e.BlacklistStatus={}));e.BlacklistStatus;!function(e){e[e.XHR_POLLING=0]="XHR_POLLING",e[e.WEBSOCKET=1]="WEBSOCKET",e[e.HTTP=0]="HTTP",e[e.HTTPS=1]="HTTPS"}(e.ConnectionChannel||(e.ConnectionChannel={}));e.ConnectionChannel;!function(e){e[e.ONLY_ROBOT=1]="ONLY_ROBOT",e[e.ONLY_HUMAN=2]="ONLY_HUMAN",e[e.ROBOT_FIRST=3]="ROBOT_FIRST",e[e.HUMAN_FIRST=4]="HUMAN_FIRST"}(e.CustomerType||(e.CustomerType={}));e.CustomerType;!function(e){e[e.NONE=0]="NONE",e[e.SQQUENCE=1]="SQQUENCE",e[e.REVERSE=2]="REVERSE"}(e.GetChatRoomType||(e.GetChatRoomType={}));e.GetChatRoomType;!function(e){e[e.CONNECTED=0]="CONNECTED",e[e.CONNECTING=1]="CONNECTING",e[e.DISCONNECTED=2]="DISCONNECTED",e[e.KICKED_OFFLINE_BY_OTHER_CLIENT=6]="KICKED_OFFLINE_BY_OTHER_CLIENT",e[e.WEBSOCKET_UNAVAILABLE=7]="WEBSOCKET_UNAVAILABLE",e[e.WEBSOCKET_ERROR=8]="WEBSOCKET_ERROR",e[e.NETWORK_UNAVAILABLE=3]="NETWORK_UNAVAILABLE",e[e.DOMAIN_INCORRECT=12]="DOMAIN_INCORRECT",e[e.APPKEY_IS_FAKE=20]="APPKEY_IS_FAKE",e[e.CONNECTION_CLOSED=4]="CONNECTION_CLOSED",e[e.ULTRALIMIT=1101]="ULTRALIMIT",e[e.REQUEST_NAVI=201]="REQUEST_NAVI",e[e.RESPONSE_NAVI=202]="RESPONSE_NAVI",e[e.RESPONSE_NAVI_ERROR=203]="RESPONSE_NAVI_ERROR",e[e.RESPONSE_NAVI_TIMEOUT=204]="RESPONSE_NAVI_TIMEOUT"}(e.ConnectionStatus||(e.ConnectionStatus={}));e.ConnectionStatus;!function(e){e[e.DO_NOT_DISTURB=1]="DO_NOT_DISTURB",e[e.NOTIFY=2]="NOTIFY"}(e.ConversationNotificationStatus||(e.ConversationNotificationStatus={}));e.ConversationNotificationStatus;!function(e){e[e.NONE=0]="NONE",e[e.PRIVATE=1]="PRIVATE",e[e.DISCUSSION=2]="DISCUSSION",e[e.GROUP=3]="GROUP",e[e.CHATROOM=4]="CHATROOM",e[e.CUSTOMER_SERVICE=5]="CUSTOMER_SERVICE",e[e.SYSTEM=6]="SYSTEM",e[e.APP_PUBLIC_SERVICE=7]="APP_PUBLIC_SERVICE",e[e.PUBLIC_SERVICE=8]="PUBLIC_SERVICE"}(e.ConversationType||(e.ConversationType={}));e.ConversationType;!function(e){e[e.OPENED=0]="OPENED",e[e.CLOSED=1]="CLOSED"}(e.DiscussionInviteStatus||(e.DiscussionInviteStatus={}));e.DiscussionInviteStatus;!function(e){e[e.TIMEOUT=-1]="TIMEOUT",e[e.UNKNOWN=-2]="UNKNOWN",e[e.PARAMETER_ERROR=-3]="PARAMETER_ERROR",e[e.RECALL_MESSAGE=25101]="RECALL_MESSAGE",e[e.SEND_FREQUENCY_TOO_FAST=20604]="SEND_FREQUENCY_TOO_FAST",e[e.RC_MSG_UNAUTHORIZED=20406]="RC_MSG_UNAUTHORIZED",e[e.RC_DISCUSSION_GROUP_ID_INVALID=20407]="RC_DISCUSSION_GROUP_ID_INVALID",e[e.FORBIDDEN_IN_GROUP=22408]="FORBIDDEN_IN_GROUP",e[e.NOT_IN_DISCUSSION=21406]="NOT_IN_DISCUSSION",e[e.NOT_IN_GROUP=22406]="NOT_IN_GROUP",e[e.NOT_IN_CHATROOM=23406]="NOT_IN_CHATROOM",e[e.FORBIDDEN_IN_CHATROOM=23408]="FORBIDDEN_IN_CHATROOM",e[e.RC_CHATROOM_USER_KICKED=23409]="RC_CHATROOM_USER_KICKED",e[e.RC_CHATROOM_NOT_EXIST=23410]="RC_CHATROOM_NOT_EXIST",e[e.RC_CHATROOM_IS_FULL=23411]="RC_CHATROOM_IS_FULL",e[e.RC_CHATROOM_PATAMETER_INVALID=23412]="RC_CHATROOM_PATAMETER_INVALID",e[e.CHATROOM_GET_HISTORYMSG_ERROR=23413]="CHATROOM_GET_HISTORYMSG_ERROR",e[e.CHATROOM_NOT_OPEN_HISTORYMSG_STORE=23414]="CHATROOM_NOT_OPEN_HISTORYMSG_STORE",e[e.CHATROOM_KV_EXCEED=23423]="CHATROOM_KV_EXCEED",e[e.CHATROOM_KV_OVERWRITE_INVALID=23424]="CHATROOM_KV_OVERWRITE_INVALID",e[e.CHATROOM_KV_STORE_NOT_OPEN=23426]="CHATROOM_KV_STORE_NOT_OPEN",e[e.CHATROOM_KEY_NOT_EXIST=23427]="CHATROOM_KEY_NOT_EXIST",e[e.SENSITIVE_SHIELD=21501]="SENSITIVE_SHIELD",e[e.SENSITIVE_REPLACE=21502]="SENSITIVE_REPLACE",e[e.JOIN_IN_DISCUSSION=21407]="JOIN_IN_DISCUSSION",e[e.CREATE_DISCUSSION=21408]="CREATE_DISCUSSION",e[e.INVITE_DICUSSION=21409]="INVITE_DICUSSION",e[e.GET_USERINFO_ERROR=23407]="GET_USERINFO_ERROR",e[e.REJECTED_BY_BLACKLIST=405]="REJECTED_BY_BLACKLIST",e[e.RC_NET_CHANNEL_INVALID=30001]="RC_NET_CHANNEL_INVALID",e[e.RC_NET_UNAVAILABLE=30002]="RC_NET_UNAVAILABLE",e[e.RC_MSG_RESP_TIMEOUT=30003]="RC_MSG_RESP_TIMEOUT",e[e.RC_HTTP_SEND_FAIL=30004]="RC_HTTP_SEND_FAIL",e[e.RC_HTTP_REQ_TIMEOUT=30005]="RC_HTTP_REQ_TIMEOUT",e[e.RC_HTTP_RECV_FAIL=30006]="RC_HTTP_RECV_FAIL",e[e.RC_NAVI_RESOURCE_ERROR=30007]="RC_NAVI_RESOURCE_ERROR",e[e.RC_NODE_NOT_FOUND=30008]="RC_NODE_NOT_FOUND",e[e.RC_DOMAIN_NOT_RESOLVE=30009]="RC_DOMAIN_NOT_RESOLVE",e[e.RC_SOCKET_NOT_CREATED=30010]="RC_SOCKET_NOT_CREATED",e[e.RC_SOCKET_DISCONNECTED=30011]="RC_SOCKET_DISCONNECTED",e[e.RC_PING_SEND_FAIL=30012]="RC_PING_SEND_FAIL",e[e.RC_PONG_RECV_FAIL=30013]="RC_PONG_RECV_FAIL",e[e.RC_MSG_SEND_FAIL=30014]="RC_MSG_SEND_FAIL",e[e.RC_MSG_CONTENT_EXCEED_LIMIT=30016]="RC_MSG_CONTENT_EXCEED_LIMIT",e[e.RC_CONN_ACK_TIMEOUT=31e3]="RC_CONN_ACK_TIMEOUT",e[e.RC_CONN_PROTO_VERSION_ERROR=31001]="RC_CONN_PROTO_VERSION_ERROR",e[e.RC_CONN_ID_REJECT=31002]="RC_CONN_ID_REJECT",e[e.RC_CONN_SERVER_UNAVAILABLE=31003]="RC_CONN_SERVER_UNAVAILABLE",e[e.RC_CONN_USER_OR_PASSWD_ERROR=31004]="RC_CONN_USER_OR_PASSWD_ERROR",e[e.RC_CONN_NOT_AUTHRORIZED=31005]="RC_CONN_NOT_AUTHRORIZED",e[e.RC_CONN_REDIRECTED=31006]="RC_CONN_REDIRECTED",e[e.RC_CONN_PACKAGE_NAME_INVALID=31007]="RC_CONN_PACKAGE_NAME_INVALID",e[e.RC_CONN_APP_BLOCKED_OR_DELETED=31008]="RC_CONN_APP_BLOCKED_OR_DELETED",e[e.RC_CONN_USER_BLOCKED=31009]="RC_CONN_USER_BLOCKED",e[e.RC_DISCONN_KICK=31010]="RC_DISCONN_KICK",e[e.RC_DISCONN_EXCEPTION=31011]="RC_DISCONN_EXCEPTION",e[e.RC_QUERY_ACK_NO_DATA=32001]="RC_QUERY_ACK_NO_DATA",e[e.RC_MSG_DATA_INCOMPLETE=32002]="RC_MSG_DATA_INCOMPLETE",e[e.BIZ_ERROR_CLIENT_NOT_INIT=33001]="BIZ_ERROR_CLIENT_NOT_INIT",e[e.BIZ_ERROR_DATABASE_ERROR=33002]="BIZ_ERROR_DATABASE_ERROR",e[e.BIZ_ERROR_INVALID_PARAMETER=33003]="BIZ_ERROR_INVALID_PARAMETER",e[e.BIZ_ERROR_NO_CHANNEL=33004]="BIZ_ERROR_NO_CHANNEL",e[e.BIZ_ERROR_RECONNECT_SUCCESS=33005]="BIZ_ERROR_RECONNECT_SUCCESS",e[e.BIZ_ERROR_CONNECTING=33006]="BIZ_ERROR_CONNECTING",e[e.MSG_ROAMING_SERVICE_UNAVAILABLE=33007]="MSG_ROAMING_SERVICE_UNAVAILABLE",e[e.MSG_INSERT_ERROR=33008]="MSG_INSERT_ERROR",e[e.MSG_DEL_ERROR=33009]="MSG_DEL_ERROR",e[e.CONVER_REMOVE_ERROR=34001]="CONVER_REMOVE_ERROR",e[e.CONVER_GETLIST_ERROR=34002]="CONVER_GETLIST_ERROR",e[e.CONVER_SETOP_ERROR=34003]="CONVER_SETOP_ERROR",e[e.CONVER_TOTAL_UNREAD_ERROR=34004]="CONVER_TOTAL_UNREAD_ERROR",e[e.CONVER_TYPE_UNREAD_ERROR=34005]="CONVER_TYPE_UNREAD_ERROR",e[e.CONVER_ID_TYPE_UNREAD_ERROR=34006]="CONVER_ID_TYPE_UNREAD_ERROR",e[e.CONVER_CLEAR_ERROR=34007]="CONVER_CLEAR_ERROR",e[e.CLEAR_HIS_ERROR=34010]="CLEAR_HIS_ERROR",e[e.CLEAR_HIS_TYPE_ERROR=34008]="CLEAR_HIS_TYPE_ERROR",e[e.CLEAR_HIS_TIME_ERROR=34011]="CLEAR_HIS_TIME_ERROR",e[e.CONVER_GET_ERROR=34009]="CONVER_GET_ERROR",e[e.GROUP_SYNC_ERROR=35001]="GROUP_SYNC_ERROR",e[e.GROUP_MATCH_ERROR=35002]="GROUP_MATCH_ERROR",e[e.CHATROOM_ID_ISNULL=36001]="CHATROOM_ID_ISNULL",e[e.CHARTOOM_JOIN_ERROR=36002]="CHARTOOM_JOIN_ERROR",e[e.CHATROOM_HISMESSAGE_ERROR=36003]="CHATROOM_HISMESSAGE_ERROR",e[e.CHATROOM_KV_NOT_FOUND=36004]="CHATROOM_KV_NOT_FOUND",e[e.BLACK_ADD_ERROR=37001]="BLACK_ADD_ERROR",e[e.BLACK_GETSTATUS_ERROR=37002]="BLACK_GETSTATUS_ERROR",e[e.BLACK_REMOVE_ERROR=37003]="BLACK_REMOVE_ERROR",e[e.DRAF_GET_ERROR=38001]="DRAF_GET_ERROR",e[e.DRAF_SAVE_ERROR=38002]="DRAF_SAVE_ERROR",e[e.DRAF_REMOVE_ERROR=38003]="DRAF_REMOVE_ERROR",e[e.SUBSCRIBE_ERROR=39001]="SUBSCRIBE_ERROR",e[e.QNTKN_FILETYPE_ERROR=41001]="QNTKN_FILETYPE_ERROR",e[e.QNTKN_GET_ERROR=41002]="QNTKN_GET_ERROR",e[e.COOKIE_ENABLE=51001]="COOKIE_ENABLE",e[e.GET_MESSAGE_BY_ID_ERROR=61001]="GET_MESSAGE_BY_ID_ERROR",e[e.HAVNODEVICEID=24001]="HAVNODEVICEID",e[e.DEVICEIDISHAVE=24002]="DEVICEIDISHAVE",e[e.SUCCESS=0]="SUCCESS",e[e.FEILD=24009]="FEILD",e[e.VOIPISNULL=24013]="VOIPISNULL",e[e.NOENGINETYPE=24010]="NOENGINETYPE",e[e.NULLCHANNELNAME=24011]="NULLCHANNELNAME",e[e.VOIPDYANMICERROR=24012]="VOIPDYANMICERROR",e[e.NOVOIP=24014]="NOVOIP",e[e.INTERNALERRROR=24015]="INTERNALERRROR",e[e.VOIPCLOSE=24016]="VOIPCLOSE",e[e.CLOSE_BEFORE_OPEN=51001]="CLOSE_BEFORE_OPEN",e[e.ALREADY_IN_USE=51002]="ALREADY_IN_USE",e[e.INVALID_CHANNEL_NAME=51003]="INVALID_CHANNEL_NAME",e[e.VIDEO_CONTAINER_IS_NULL=51004]="VIDEO_CONTAINER_IS_NULL",e[e.DELETE_MESSAGE_ID_IS_NULL=61001]="DELETE_MESSAGE_ID_IS_NULL",
/*!
        å·±æ¹åæ¶å·²ååºçéè¯è¯·æ±
        */
e[e.CANCEL=1]="CANCEL",
/*!
         å·±æ¹æç»æ¶å°çéè¯è¯·æ±
         */
e[e.REJECT=2]="REJECT",
/*!
         å·±æ¹ææ­
         */
e[e.HANGUP=3]="HANGUP",
/*!
         å·±æ¹å¿ç¢
         */
e[e.BUSYLINE=4]="BUSYLINE",
/*!
         å·±æ¹æªæ¥å¬
         */
e[e.NO_RESPONSE=5]="NO_RESPONSE",
/*!
         å·±æ¹ä¸æ¯æå½åå¼æ
         */
e[e.ENGINE_UN_SUPPORTED=6]="ENGINE_UN_SUPPORTED",
/*!
         å·±æ¹ç½ç»åºé
         */
e[e.NETWORK_ERROR=7]="NETWORK_ERROR",
/*!
         å¯¹æ¹åæ¶å·²ååºçéè¯è¯·æ±
         */
e[e.REMOTE_CANCEL=11]="REMOTE_CANCEL",
/*!
         å¯¹æ¹æç»æ¶å°çéè¯è¯·æ±
         */
e[e.REMOTE_REJECT=12]="REMOTE_REJECT",
/*!
         éè¯è¿ç¨å¯¹æ¹ææ­
         */
e[e.REMOTE_HANGUP=13]="REMOTE_HANGUP",
/*!
         å¯¹æ¹å¿ç¢
         */
e[e.REMOTE_BUSYLINE=14]="REMOTE_BUSYLINE",
/*!
         å¯¹æ¹æªæ¥å¬
         */
e[e.REMOTE_NO_RESPONSE=15]="REMOTE_NO_RESPONSE",
/*!
         å¯¹æ¹ç½ç»éè¯¯
         */
e[e.REMOTE_ENGINE_UN_SUPPORTED=16]="REMOTE_ENGINE_UN_SUPPORTED",
/*!
         å¯¹æ¹ç½ç»éè¯¯
         */
e[e.REMOTE_NETWORK_ERROR=17]="REMOTE_NETWORK_ERROR",
/*!
         VoIP ä¸å¯ç¨
         */
e[e.VOIP_NOT_AVALIABLE=18]="VOIP_NOT_AVALIABLE"}(e.ErrorCode||(e.ErrorCode={}));e.ErrorCode;!function(e){e[e.MEDIA_AUDIO=1]="MEDIA_AUDIO",e[e.MEDIA_VEDIO=2]="MEDIA_VEDIO",e[e.MEDIA_VIDEO=2]="MEDIA_VIDEO"}(e.VoIPMediaType||(e.VoIPMediaType={}));e.VoIPMediaType;!function(e){e[e.IMAGE=1]="IMAGE",e[e.AUDIO=2]="AUDIO",e[e.VIDEO=3]="VIDEO",e[e.FILE=100]="FILE"}(e.MediaType||(e.MediaType={}));e.MediaType;!function(e){e[e.SEND=1]="SEND",e[e.RECEIVE=2]="RECEIVE"}(e.MessageDirection||(e.MessageDirection={}));e.MessageDirection;!function(e){e[e.IMAGE=1]="IMAGE",e[e.AUDIO=2]="AUDIO",e[e.VIDEO=3]="VIDEO",e[e.FILE=4]="FILE"}(e.FileType||(e.FileType={}));e.FileType;!function(e){e[e.RC_REAL_TIME_LOCATION_NOT_INIT=-1]="RC_REAL_TIME_LOCATION_NOT_INIT",e[e.RC_REAL_TIME_LOCATION_SUCCESS=0]="RC_REAL_TIME_LOCATION_SUCCESS",e[e.RC_REAL_TIME_LOCATION_GPS_DISABLED=1]="RC_REAL_TIME_LOCATION_GPS_DISABLED",e[e.RC_REAL_TIME_LOCATION_CONVERSATION_NOT_SUPPORT=2]="RC_REAL_TIME_LOCATION_CONVERSATION_NOT_SUPPORT",e[e.RC_REAL_TIME_LOCATION_IS_ON_GOING=3]="RC_REAL_TIME_LOCATION_IS_ON_GOING",e[e.RC_REAL_TIME_LOCATION_EXCEED_MAX_PARTICIPANT=4]="RC_REAL_TIME_LOCATION_EXCEED_MAX_PARTICIPANT",e[e.RC_REAL_TIME_LOCATION_JOIN_FAILURE=5]="RC_REAL_TIME_LOCATION_JOIN_FAILURE",e[e.RC_REAL_TIME_LOCATION_START_FAILURE=6]="RC_REAL_TIME_LOCATION_START_FAILURE",e[e.RC_REAL_TIME_LOCATION_NETWORK_UNAVAILABLE=7]="RC_REAL_TIME_LOCATION_NETWORK_UNAVAILABLE"}(e.RealTimeLocationErrorCode||(e.RealTimeLocationErrorCode={}));e.RealTimeLocationErrorCode;!function(e){e[e.RC_REAL_TIME_LOCATION_STATUS_IDLE=0]="RC_REAL_TIME_LOCATION_STATUS_IDLE",e[e.RC_REAL_TIME_LOCATION_STATUS_INCOMING=1]="RC_REAL_TIME_LOCATION_STATUS_INCOMING",e[e.RC_REAL_TIME_LOCATION_STATUS_OUTGOING=2]="RC_REAL_TIME_LOCATION_STATUS_OUTGOING",e[e.RC_REAL_TIME_LOCATION_STATUS_CONNECTED=3]="RC_REAL_TIME_LOCATION_STATUS_CONNECTED"}(e.RealTimeLocationStatus||(e.RealTimeLocationStatus={}));e.RealTimeLocationStatus;!function(e){e[e.READ=1]="READ",e[e.LISTENED=2]="LISTENED",e[e.DOWNLOADED=4]="DOWNLOADED",e[e.RETRIEVED=8]="RETRIEVED",e[e.UNREAD=0]="UNREAD"}(e.ReceivedStatus||(e.ReceivedStatus={}));e.ReceivedStatus;!function(e){e[e.READ=1]="READ",e[e.LISTENED=2]="LISTENED",e[e.DOWNLOADED=4]="DOWNLOADED",e[e.RETRIEVED=8]="RETRIEVED",e[e.UNREAD=0]="UNREAD"}(e.ReadStatus||(e.ReadStatus={}));e.ReadStatus;!function(e){e[e.EXACT=0]="EXACT",e[e.FUZZY=1]="FUZZY"}(e.SearchType||(e.SearchType={}));e.SearchType;!function(e){e[e.SENDING=10]="SENDING",e[e.FAILED=20]="FAILED",e[e.SENT=30]="SENT",e[e.RECEIVED=40]="RECEIVED",e[e.READ=50]="READ",e[e.DESTROYED=60]="DESTROYED"}(e.SentStatus||(e.SentStatus={}));e.SentStatus;!function(e){e[e.ACCEPTED=0]="ACCEPTED",e[e.UNACCEPTABLE_PROTOCOL_VERSION=1]="UNACCEPTABLE_PROTOCOL_VERSION",e[e.IDENTIFIER_REJECTED=2]="IDENTIFIER_REJECTED",e[e.SERVER_UNAVAILABLE=3]="SERVER_UNAVAILABLE",e[e.TOKEN_INCORRECT=4]="TOKEN_INCORRECT",e[e.NOT_AUTHORIZED=5]="NOT_AUTHORIZED",e[e.REDIRECT=6]="REDIRECT",e[e.PACKAGE_ERROR=7]="PACKAGE_ERROR",e[e.APP_BLOCK_OR_DELETE=8]="APP_BLOCK_OR_DELETE",e[e.BLOCK=9]="BLOCK",e[e.TOKEN_EXPIRE=10]="TOKEN_EXPIRE",e[e.DEVICE_ERROR=11]="DEVICE_ERROR"}(e.ConnectionState||(e.ConnectionState={}));e.ConnectionState;!function(e){e[e.ROOM=1]="ROOM",e[e.PERSON=2]="PERSON"}(e.RTCAPIType||(e.RTCAPIType={}));e.RTCAPIType;!function(e){e[e.UPDATE=1]="UPDATE",e[e.DELETE=2]="DELETE"}(e.ChatroomEntityOpt||(e.ChatroomEntityOpt={}));e.ChatroomEntityOpt;!function(e){e[e.KEY=128]="KEY",e[e.VALUE=4096]="VALUE"}(e.ChatroomEntityLimit||(e.ChatroomEntityLimit={}));e.ChatroomEntityLimit}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(){}return t.getInstance=function(){if(!t._instance)throw new Error("RongIMClient is not initialized. Call .init() method first.");return t._instance},t.showError=function(e){console&&console.error&&console.error(JSON.stringify(e))},t.logger=function(e){var n=e.code,r=t.LogFactory[n]||e;r.funcName=e.funcName,r.msg=e.msg||r.msg,t._memoryStore.depend.showError&&t.showError(r)},t.logCallback=function(e,n){return{onSuccess:e.onSuccess,onError:function(r){t.logger({code:r,funcName:n}),e.onError(r)}}},t.logSendCallback=function(e,n){return{onSuccess:e.onSuccess,onError:function(r,o){t.logger({code:r,funcName:n}),e.onError(r,o)},onBefore:e.onBefore}},t.init=function(n,r,o,i){if(t.statusListeners=[],t.messageListeners=[],t.settingListeners=[],t.conversationStatusListeners=[],t._instance)return t._memoryStore.sdkInfo;t._instance=new t,o=o||{};var s="http://",a="ws://";("object"!=typeof location||"https:"==location.protocol)&&(a="wss://",s="https://");var c=!1;"function"!=typeof WebSocket&&(c=!0);var u,l;"object"==typeof WebSocket&&(u=typeof WebSocket,l="number"==typeof WebSocket.OPEN,u&&l)&&(c=!1);e.RongUtil.supportLocalStorage()?t._storageProvider=new e.LocalStorageProvider:document.documentElement.addBehavior?t._storageProvider=new e.UserDataProvider:t._storageProvider=new e.MemeoryProvider;var d=t._storageProvider.getItem("serverIndex");t.serverStore.index=d||0;var f={api:"api.cn.ronghub.com"};e.RongUtil.forEach(f,(function(t,n){f[n]=e.RongUtil.stringFormat("{0}{1}",[s,t])})),e.RongUtil.forEach(f,(function(t,n){var r=n in o,i={path:o[n],tmpl:"{0}{1}",protocol:s,sub:!0};t=r?e.RongUtil.formatProtoclPath(i):t,o[n]=t}));var p=o.navigaters||[];o.navi&&(p=[o.navi]),!o.navi&&e.RongUtil.isEqual(p.length,0)&&(p=["nav.cn.ronghub.com","nav2-cn.ronghub.com"]);var g={protobuf:"cdn.ronghub.com/protobuf-2.3.9.min.js"};e.RongUtil.forEach(g,(function(t,n){g[n]=e.RongUtil.stringFormat("{0}{1}",[s,t])})),e.RongUtil.extend(g,o);var h={isPolling:c,wsScheme:a,protocol:s,showError:!0,openMp:!0,snifferTime:2e3,naviTimeout:5e3,navigaters:p,maxNaviRetry:10,isNaviJSONP:!1,isWSPingJSONP:!1,isNotifyConversationList:!1,maxConversationCount:300,cmpUrl:""};delete o.navigaters,e.RongUtil.extend(h,o),e.RongUtil.isFunction(o.protobuf)&&(t.Protobuf=o.protobuf),t.userStatusObserver=new e.RongObserver,(new e.FeaturePatcher).patchAll();var m={token:"",callback:null,lastReadTime:new e.LimitableMap,historyMessageLimit:new e.MemoryCache,conversationList:[],isFullConversations:!1,appKey:n,publicServiceMap:new e.PublicServiceMap,providerType:1,deltaTime:0,filterMessages:[],isSyncRemoteConverList:!0,otherDevice:!1,custStore:{},converStore:{latestMessage:{}},connectAckTime:0,voipStategy:0,isFirstPingMsg:!0,depend:o,notification:{},networkUnavailable:!1,loggerSwitch:o.loggerSwitch||"on",autoReconnectTimer:null};t._memoryStore=m;var v=r&&"[object Object]"==Object.prototype.toString.call(r);t._dataAccessProvider=v?r:new e.ServerDataProvider,o.appCallback=i;var y=t._dataAccessProvider.init(n,o);t._memoryStore.sdkInfo=y,v&&t._dataAccessProvider.setServerInfo({navi:location.protocol+o.navi+"/navi.xml"}),t.MessageParams={TextMessage:{objectName:"RC:TxtMsg",msgTag:new e.MessageTag(!0,!0)},ImageMessage:{objectName:"RC:ImgMsg",msgTag:new e.MessageTag(!0,!0)},DiscussionNotificationMessage:{objectName:"RC:DizNtf",msgTag:new e.MessageTag(!1,!0)},VoiceMessage:{objectName:"RC:VcMsg",msgTag:new e.MessageTag(!0,!0)},ReferenceMessage:{objectName:"RC:ReferenceMsg",msgTag:new e.MessageTag(!0,!0)},RichContentMessage:{objectName:"RC:ImgTextMsg",msgTag:new e.MessageTag(!0,!0)},FileMessage:{objectName:"RC:FileMsg",msgTag:new e.MessageTag(!0,!0)},HQVoiceMessage:{objectName:"RC:HQVCMsg",msgTag:new e.MessageTag(!0,!0)},GIFMessage:{objectName:"RC:GIFMsg",msgTag:new e.MessageTag(!0,!0)},SightMessage:{objectName:"RC:SightMsg",msgTag:new e.MessageTag(!0,!0)},HandshakeMessage:{objectName:"",msgTag:new e.MessageTag(!0,!0)},UnknownMessage:{objectName:"",msgTag:new e.MessageTag(!0,!0)},LocationMessage:{objectName:"RC:LBSMsg",msgTag:new e.MessageTag(!0,!0)},InformationNotificationMessage:{objectName:"RC:InfoNtf",msgTag:new e.MessageTag(!1,!0)},ContactNotificationMessage:{objectName:"RC:ContactNtf",msgTag:new e.MessageTag(!1,!0)},ProfileNotificationMessage:{objectName:"RC:ProfileNtf",msgTag:new e.MessageTag(!1,!0)},CommandNotificationMessage:{objectName:"RC:CmdNtf",msgTag:new e.MessageTag(!1,!0)},PublicServiceRichContentMessage:{objectName:"RC:PSImgTxtMsg",msgTag:new e.MessageTag(!0,!0)},PublicServiceMultiRichContentMessage:{objectName:"RC:PSMultiImgTxtMsg",msgTag:new e.MessageTag(!0,!0)},JrmfRedPacketMessage:{objectName:"RCJrmf:RpMsg",msgTag:new e.MessageTag(!0,!0)},JrmfRedPacketOpenedMessage:{objectName:"RCJrmf:RpOpendMsg",msgTag:new e.MessageTag(!0,!0)},GroupNotificationMessage:{objectName:"RC:GrpNtf",msgTag:new e.MessageTag(!1,!0)},CommandMessage:{objectName:"RC:CmdMsg",msgTag:new e.MessageTag(!1,!1)},TypingStatusMessage:{objectName:"RC:TypSts",msgTag:new e.MessageTag(!1,!1)},PublicServiceCommandMessage:{objectName:"RC:PSCmd",msgTag:new e.MessageTag(!1,!1)},RecallCommandMessage:{objectName:"RC:RcCmd",msgTag:new e.MessageTag(!1,!0)},SyncReadStatusMessage:{objectName:"RC:SRSMsg",msgTag:new e.MessageTag(!1,!1)},ReadReceiptRequestMessage:{objectName:"RC:RRReqMsg",msgTag:new e.MessageTag(!1,!1)},ReadReceiptResponseMessage:{objectName:"RC:RRRspMsg",msgTag:new e.MessageTag(!1,!1)},ChangeModeResponseMessage:{objectName:"RC:CsChaR",msgTag:new e.MessageTag(!1,!1)},ChangeModeMessage:{objectName:"RC:CSCha",msgTag:new e.MessageTag(!1,!1)},EvaluateMessage:{objectName:"RC:CsEva",msgTag:new e.MessageTag(!1,!1)},CustomerContact:{objectName:"RC:CsContact",msgTag:new e.MessageTag(!1,!1)},HandShakeMessage:{objectName:"RC:CsHs",msgTag:new e.MessageTag(!1,!1)},HandShakeResponseMessage:{objectName:"RC:CsHsR",msgTag:new e.MessageTag(!1,!1)},SuspendMessage:{objectName:"RC:CsSp",msgTag:new e.MessageTag(!1,!1)},TerminateMessage:{objectName:"RC:CsEnd",msgTag:new e.MessageTag(!1,!1)},CustomerStatusUpdateMessage:{objectName:"RC:CsUpdate",msgTag:new e.MessageTag(!1,!1)},ReadReceiptMessage:{objectName:"RC:ReadNtf",msgTag:new e.MessageTag(!1,!1)},RCCombineMessage:{objectName:"RC:CombineMsg",msgTag:new e.MessageTag(!0,!0)},ChrmKVNotificationMessage:{objectName:"RC:chrmKVNotiMsg",msgTag:new e.MessageTag(!1,!1)},LogCommandMessage:{objectName:"RC:LogCmdMsg",msgTag:new e.MessageTag(!1,!1)}},t.MessageParams.AcceptMessage={objectName:"RC:VCAccept",msgTag:new e.MessageTag(!1,!1)},t.MessageParams.RingingMessage={objectName:"RC:VCRinging",msgTag:new e.MessageTag(!1,!1)},t.MessageParams.SummaryMessage={objectName:"RC:VCSummary",msgTag:new e.MessageTag(!1,!1)},t.MessageParams.HungupMessage={objectName:"RC:VCHangup",msgTag:new e.MessageTag(!1,!1)},t.MessageParams.InviteMessage={objectName:"RC:VCInvite",msgTag:new e.MessageTag(!1,!1)},t.MessageParams.MediaModifyMessage={objectName:"RC:VCModifyMedia",msgTag:new e.MessageTag(!1,!1)},t.MessageParams.MemberModifyMessage={objectName:"RC:VCModifyMem",msgTag:new e.MessageTag(!1,!1)},t.MessageType={TextMessage:"TextMessage",ImageMessage:"ImageMessage",ReferenceMessage:"ReferenceMessage",DiscussionNotificationMessage:"DiscussionNotificationMessage",VoiceMessage:"VoiceMessage",RichContentMessage:"RichContentMessage",HandshakeMessage:"HandshakeMessage",UnknownMessage:"UnknownMessage",LocationMessage:"LocationMessage",InformationNotificationMessage:"InformationNotificationMessage",ContactNotificationMessage:"ContactNotificationMessage",ProfileNotificationMessage:"ProfileNotificationMessage",CommandNotificationMessage:"CommandNotificationMessage",CommandMessage:"CommandMessage",TypingStatusMessage:"TypingStatusMessage",ChangeModeResponseMessage:"ChangeModeResponseMessage",ChangeModeMessage:"ChangeModeMessage",EvaluateMessage:"EvaluateMessage",HandShakeMessage:"HandShakeMessage",HandShakeResponseMessage:"HandShakeResponseMessage",SuspendMessage:"SuspendMessage",TerminateMessage:"TerminateMessage",CustomerContact:"CustomerContact",CustomerStatusUpdateMessage:"CustomerStatusUpdateMessage",SyncReadStatusMessage:"SyncReadStatusMessage",ReadReceiptRequestMessage:"ReadReceiptRequestMessage",ReadReceiptResponseMessage:"ReadReceiptResponseMessage",FileMessage:"FileMessage",HQVoiceMessage:"HQVoiceMessage",GIFMessage:"GIFMessage",SightMessage:"SightMessage",AcceptMessage:"AcceptMessage",RingingMessage:"RingingMessage",SummaryMessage:"SummaryMessage",HungupMessage:"HungupMessage",InviteMessage:"InviteMessage",MediaModifyMessage:"MediaModifyMessage",MemberModifyMessage:"MemberModifyMessage",JrmfRedPacketMessage:"JrmfRedPacketMessage",JrmfRedPacketOpenedMessage:"JrmfRedPacketOpenedMessage",GroupNotificationMessage:"GroupNotificationMessage",PublicServiceRichContentMessage:"PublicServiceRichContentMessage",PublicServiceMultiRichContentMessage:"PublicServiceMultiRichContentMessage",PublicServiceCommandMessage:"PublicServiceCommandMessage",RecallCommandMessage:"RecallCommandMessage",ReadReceiptMessage:"ReadReceiptMessage",RCCombineMessage:"RCCombineMessage",ChrmKVNotificationMessage:"ChrmKVNotificationMessage",LogCommandMessage:"LogCommandMessage"},t.LogFactory={"-1":{code:"-1",msg:"æå¡å¨è¶æ¶"},"-2":{code:"-2",msg:"æªç¥åå å¤±è´¥"},"-3":{code:"-3",msg:"åæ°éè¯¯"},"-4":{code:"-4",msg:"åæ°ä¸æ­£ç¡®æå°æªå®ä¾å"},25101:{code:"25101",msg:"æ¤åæ¶æ¯åæ°éè¯¯",desc:"è¯·æ£æ¥æ¤åæ¶æ¯åæ° https://rongcloud.github.io/websdk-demo/api-test.html"},25102:{code:"25101",msg:"åªè½æ¤åèªååéçæ¶æ¯"},20604:{code:"20604",msg:"åéé¢çè¿å¿«",desc:"https://developer.rongcloud.cn/ticket/info/9Q3L6vRKd1cLS7rycA==?type=1"},20406:{code:"20406",msg:"è¢«ç¦è¨"},23407:{code:"23407",msg:"è·åç¨æ·å¤±è´¥"},20407:{code:"20407",msg:"ç¾¤ç»Idæ æ"},22408:{code:"22408",msg:"ç¾¤ç»è¢«ç¦è¨"},22406:{code:"22406",msg:"ä¸å¨ç¾¤ç»"},35001:{code:"35001",msg:"ç¾¤ç»åæ­¥å¼å¸¸"},35002:{code:"35002",msg:"å¹éç¾¤ä¿¡æ¯å¼å¸¸"},21406:{code:"21406",msg:"ä¸å¨è®¨è®ºç»"},21407:{code:"21407",msg:"å å¥è®¨è®ºå¤±è´¥"},21408:{code:"21408",msg:"åå»ºè®¨è®ºç»å¤±è´¥"},21409:{code:"21409",msg:"è®¾ç½®è®¨è®ºç»éè¯·ç¶æå¤±è´¥"},23406:{code:"23406",msg:"ä¸å¨èå¤©å®¤"},23408:{code:"23408",msg:"èå¤©å®¤è¢«ç¦è¨"},23409:{code:"23409",msg:"èå¤©å®¤ä¸­æåè¢«è¸¢åº"},23410:{code:"23410",msg:"èå¤©å®¤ä¸å­å¨"},23411:{code:"23411",msg:"èå¤©å®¤æåå·²æ»¡"},23412:{code:"23412",msg:"è·åèå¤©å®¤ä¿¡æ¯åæ°æ æ"},23413:{code:"23413",msg:"èå¤©å®¤å¼å¸¸"},23414:{code:"23414",msg:"æ²¡ææå¼èå¤©å®¤æ¶æ¯å­å¨"},36001:{code:"36001",msg:"å å¥èå¤©å®¤Idä¸ºç©º"},36002:{code:"36002",msg:"å å¥èå¤©å®¤å¤±è´¥"},36003:{code:"36003",msg:"æåèå¤©å®¤åå²æ¶æ¯å¤±è´¥"},24001:{code:"24001",msg:"æ²¡ææ³¨åDeviveId ä¹å°±æ¯ç¨æ·æ²¡æç»é"},24002:{code:"24002",msg:"ç¨æ·å·²ç»å­å¨"},0:{code:"0",msg:"æå"},24009:{code:"24009",msg:"æ²¡æå¯¹åºçç¨æ·ætoken"},24013:{code:"24013",msg:"voipä¸ºç©º"},24010:{code:"24010",msg:"ä¸æ¯æçVoipå¼æ"},24011:{code:"24011",msg:"channelName æ¯ç©º"},24012:{code:"24012",msg:"çæVoipkeyå¤±è´¥"},24014:{code:"24014",msg:"æ²¡æéç½®voip"},24015:{code:"24015",msg:"æå¡å¨åé¨éè¯¯"},24016:{code:"24016",msg:"VOIP close"},30001:{code:"30001",msg:"éä¿¡è¿ç¨ä¸­ï¼å½åSocketä¸å­å¨"},30002:{code:"30002",msg:"Socketè¿æ¥ä¸å¯ç¨"},30003:{code:"30003",msg:"éä¿¡è¶æ¶"},30004:{code:"30004",msg:"å¯¼èªæä½æ¶ï¼Httpè¯·æ±å¤±è´¥"},30005:{code:"30005",msg:"HTTPè¯·æ±å¤±è´¥"},30006:{code:"30006",msg:"HTTPæ¥æ¶å¤±è´¥"},30007:{code:"30007",msg:"å¯¼èªèµæºéè¯¯"},30008:{code:"30008",msg:"æ²¡ææææ°æ®"},30009:{code:"30009",msg:"ä¸å­å¨ææ IP å°å"},30010:{code:"30010",msg:"åå»º Socket å¤±è´¥"},30011:{code:"30011",msg:" Socket è¢«æ­å¼"},30012:{code:"30012",msg:"PING æä½å¤±è´¥"},30013:{code:"30013",msg:"PING è¶æ¶"},30014:{code:"30014",msg:"æ¶æ¯åéå¤±è´¥"},30016:{code:"30016",msg:"æ¶æ¯å¤§å°è¶éï¼æå¤§ 128 KB"},31e3:{code:"31000",msg:"å connect è¿æ¥æ¶ï¼æ¶å°ç ACK è¶æ¶"},31001:{code:"31001",msg:"åæ°éè¯¯"},31002:{code:"31002",msg:"åæ°éè¯¯ï¼App Id éè¯¯"},31003:{code:"31003",msg:"æå¡å¨ä¸å¯ç¨"},31004:{code:"31004",msg:"Token éè¯¯"},31005:{code:"31005",msg:"App Id ä¸ Token ä¸å¹é"},31006:{code:"31006",msg:"éå®åï¼å°åéè¯¯"},31007:{code:"31007",msg:"NAME ä¸åå°æ³¨åä¿¡æ¯ä¸ä¸è´"},31008:{code:"31008",msg:"APP è¢«å±è½ãå é¤æä¸å­å¨"},31009:{code:"31009",msg:"ç¨æ·è¢«å±è½"},31010:{code:"31010",msg:"Disconnectï¼ç±æå¡å¨è¿åï¼æ¯å¦ç¨æ·äºè¸¢"},31011:{code:"31011",msg:"Disconnectï¼ç±æå¡å¨è¿åï¼æ¯å¦ç¨æ·äºè¸¢"},32001:{code:"32001",msg:"åè®®å±åé¨éè¯¯ãqueryï¼ä¸ä¼ ä¸è½½è¿ç¨ä¸­æ°æ®éè¯¯"},32002:{code:"32002",msg:"åè®®å±åé¨éè¯¯"},33001:{code:"33001",msg:"æªè°ç¨ init åå§åå½æ°"},33002:{code:"33002",msg:"æ°æ®åºåå§åå¤±è´¥"},33003:{code:"33003",msg:"ä¼ å¥åæ°æ æ"},33004:{code:"33004",msg:"ééæ æ"},33005:{code:"33005",msg:"éæ°è¿æ¥æå"},33006:{code:"33006",msg:"è¿æ¥ä¸­ï¼åè°ç¨ connect è¢«æç»"},33007:{code:"33007",msg:"æ¶æ¯æ¼«æ¸¸æå¡æªå¼é"},33008:{code:"33008",msg:"æ¶æ¯æ·»å å¤±è´¥"},33009:{code:"33009",msg:"æ¶æ¯å é¤å¤±è´¥"},34001:{code:"34001",msg:"å é¤ä¼è¯å¤±è´¥"},34002:{code:"34002",msg:"æååå²æ¶æ¯å¤±è´¥"},34003:{code:"34003",msg:"ä¼è¯æå®å¼å¸¸"},34004:{code:"34004",msg:"è·åä¼è¯æªè¯»æ¶æ¯æ»æ°å¤±è´¥"},34005:{code:"34005",msg:"è·åæå®ä¼è¯ç±»åæªè¯»æ¶æ¯æ°å¼å¸¸"},34006:{code:"34006",msg:"è·åæå®ç¨æ·ID&ä¼è¯ç±»åæªè¯»æ¶æ¯æ°å¼å¸¸"},34007:{code:"34007",msg:"æ¸é¤ä¼è¯æ¶æ¯å¼å¸¸"},34008:{code:"34008",msg:"è·åä¼è¯æ¶æ¯å¼å¸¸"},34009:{code:"34009",msg:"æ¸é¤åå²æ¶æ¯ä¼è¯ç±»åä¸æ­£ç¡®"},34010:{code:"34010",msg:"æ¸é¤åå²æ¶æ¯å¤±è´¥ï¼è¯·æ£æ¥ä¼ å¥åæ°"},37001:{code:"37001",msg:"å å¥é»ååå¼å¸¸"},37002:{code:"37002",msg:"è·å¾æå®äººååé»ååä¸­çç¶æå¼å¸¸"},37003:{code:"37003",msg:"ç§»é¤é»ååå¼å¸¸"},405:{code:"405",msg:"å¨é»ååä¸­"},38001:{code:"38001",msg:"è·åèç¨¿å¤±è´¥"},38002:{code:"38002",msg:"ä¿å­èç¨¿å¤±è´¥"},38003:{code:"38003",msg:"å é¤èç¨¿å¤±è´¥"},39001:{code:"39001",msg:"å³æ³¨å¬ä¼å·å¤±è´¥"},41001:{code:"41001",msg:"æä»¶ç±»åéè¯¯"},41002:{code:"41002",msg:"è·åä¸çtokenå¤±è´¥"},51001:{code:"51001",msg:"æªå®è£ææªå¯å¨æä»¶"},51002:{code:"51002",msg:"è§é¢å·²ç»å­å¨"},51003:{code:"51003",msg:"æ æçchannelName"},51004:{code:"51004",msg:"è§é¢åå®¹ä¸ºç©º"},61001:{code:"61001",msg:"å é¤æ¶æ¯æ°ç»é¿åº¦ä¸º 0"}};var C=function(n,r,o){var i=n.senderUserId,s=t.roomInfo.users[i].uris||"[]";e.RongUtil.isString(s)&&(s=JSON.parse(s));var a=JSON.parse(JSON.stringify(s));e.RongUtil.forEach(a,(function(t,n){e.RongUtil.forEach(r,(function(e){e.uri==t.uri&&o(t,e,s,n)}))})),t.roomInfo.users[i].uris=JSON.stringify(s)},R={RTCPublishResourceMessage:function(n,r){var o=n.senderUserId,i=t.roomInfo.users[o];i||(i={},t.roomInfo.users[o]={});var s=i.uris||"[]";e.RongUtil.isString(s)&&(s=JSON.parse(s)),s=s.concat(r),t.roomInfo.users[o].uris=JSON.stringify(s)},RTCUnpublishResourceMessage:function(e,t){C(e,t,(function(e,t,n,r){n.splice(r,1)}))},RTCModifyResourceMessage:function(e,t){C(e,t,(function(e,t){e.state=t.state}))},RTCUserChangeMessage:function(n){var r=n.content.users,o=0,i=1,s=2;e.RongUtil.forEach(r,(function(e){var n=e.state,r=e.userId;switch(+n){case o:t.roomInfo.users[r]={};break;case i:case s:delete t.roomInfo.users[r]}}))}};return t.RTCInnerListener=function(e){(R[e.messageType]||function(){})(e,e.content.uris)},t.Conversation=t._dataAccessProvider.Conversation,e.Logger.writeLog({tag:e.LoggerTag.IM.A_INIT_O,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{appKey:n}}),y},t.setProtocol=function(e){t._memoryStore.depend=t._memoryStore.depend||{};var n=t.HttpProtocol,r=t.WsProtocol;e===n.http?(t._memoryStore.depend.protocol=n.http,t._memoryStore.depend.wsScheme=r.ws):(t._memoryStore.depend.protocol=n.https,t._memoryStore.depend.wsScheme=r.wss)},t.getProtocol=function(){t._memoryStore.depend=t._memoryStore.depend||{};var e=t._memoryStore.depend,n=e.protocol,r=e.wsScheme;return n&&r||(n=t.HttpProtocol.https,r=t.WsProtocol.wss),{protocol:n,wsScheme:r}},t.initApp=function(e,n){t.init(e.appkey,e.dataAccessProvider,e.opts,(function(){var e=t._instance;n(null,e)}))},t.connect=function(n,r,o,i){if(e.CheckParam.getInstance().check(["string","object","string|null|object|global|undefined","object|null|global|undefined"],"connect",!0,arguments),e.IMHandler.isIncludeNavi(n)){var s=t._memoryStore.depend.protocol,a=t._memoryStore.depend.navigaters,c=e.IMHandler.getNavsByToken(n,s);n=e.IMHandler.getToken(n),t._memoryStore.depend.navigaters=e.RongUtil.concat(c,a,!0)}var u={onSuccess:r.onSuccess,onTokenIncorrect:r.onTokenIncorrect,onError:function(e){t.logger({code:e,funcName:"connect"}),r.onError(e)}};t._dataAccessProvider.connect(n,u,o,i)},t.reconnect=function(e,n){var r={onSuccess:e.onSuccess,onTokenIncorrect:e.onTokenIncorrect,onError:function(n){t.logger({code:n,funcName:"connect"}),e.onError(n)}};t._dataAccessProvider.reconnect(r,n)},t.registerMessageType=function(e,n,r,o,i){t._dataAccessProvider.registerMessageType(e,n,r,o,i),t.RegisterMessage[e].messageName=e,t.MessageType[e]=e,t.MessageParams[e]={objectName:n,msgTag:r}},t.prototype.registerMessageTypes=function(e){e=e||{},t._dataAccessProvider.registerMessageTypes(e)},t.setConnectionStatusListener=function(n){t._dataAccessProvider?t._dataAccessProvider.setConnectionStatusListener(n):e.RongUtil.isObject(n)&&e.RongUtil.isFunction(n.onChanged)&&t.statusListeners.push(n.onChanged)},t.setConversationStatusListener=function(n){n&&n.onChanged&&e.RongUtil.isFunction(n.onChanged)&&t.conversationStatusListeners.push(n.onChanged)},t.statusWatch=function(n){e.RongUtil.isFunction(n)&&t.statusListeners.push(n)},t.watch=function(n){var r=(n=n||{}).setting;e.RongUtil.isFunction(r)&&t.settingListeners.push(r)},t.setOnReceiveMessageListener=function(n){t._dataAccessProvider?t._dataAccessProvider.setOnReceiveMessageListener(n):e.RongUtil.isObject(n)&&e.RongUtil.isFunction(n.onReceived)&&t.messageListeners.push(n.onReceived)},t.prototype.logout=function(){t._dataAccessProvider.logout()},t.prototype.disconnect=function(){t._dataAccessProvider.disconnect(),e.Logger.writeLog({tag:e.LoggerTag.IM.A_DISC_O,level:e.LoggerLevel.I,type:e.LoggerType.IM})},t.prototype.startCustomService=function(n,r,o){if(n&&r){var i=new e.HandShakeMessage(o),s=this;e.RongIMClient._memoryStore.custStore.isInit=!0,t.getInstance().sendMessage(e.ConversationType.CUSTOMER_SERVICE,n,i,{onSuccess:function(e){e.isBlack?(r.onError(),s.stopCustomeService(n,{onSuccess:function(){},onError:function(){}})):r.onSuccess()},onError:function(){r.onError()},onBefore:function(){}})}},t.prototype.stopCustomeService=function(n,r){if(n&&r){var o=t._memoryStore.custStore[n];if(o){var i=new e.SuspendMessage({sid:o.sid,uid:o.uid,pid:o.pid});this.sendCustMessage(n,i,{onSuccess:function(){setTimeout((function(){r.onSuccess()}))},onError:function(){setTimeout((function(){r.onError()}))}})}}},t.prototype.switchToHumanMode=function(n,r){if(n&&r){var o=t._memoryStore.custStore[n];if(o){var i=new e.ChangeModeMessage({sid:o.sid,uid:o.uid,pid:o.pid});this.sendCustMessage(n,i,r)}}},t.prototype.evaluateRebotCustomService=function(n,r,o,i){if(n&&i){var s=t._memoryStore.custStore[n];if(s){var a=new e.EvaluateMessage({sid:s.sid,uid:s.uid,pid:s.pid,isRobotResolved:r,sugest:o,type:0});this.sendCustMessage(n,a,i)}}},t.prototype.evaluateHumanCustomService=function(n,r,o,i){if(n&&i){var s=t._memoryStore.custStore[n];if(s){var a=new e.EvaluateMessage({sid:s.sid,uid:s.uid,pid:s.pid,humanValue:r,sugest:o,type:1});this.sendCustMessage(n,a,i)}}},t.prototype.sendCustMessage=function(n,r,o){t.getInstance().sendMessage(e.ConversationType.CUSTOMER_SERVICE,n,r,{onSuccess:function(e){o.onSuccess()},onError:function(){o.onError()},onBefore:function(){}})},t.prototype.getCurrentConnectionStatus=function(){return t._dataAccessProvider.getCurrentConnectionStatus()},t.prototype.getConnectionChannel=function(){return e.Transportations._TransportType==e.Socket.XHR_POLLING?e.ConnectionChannel.XHR_POLLING:e.Transportations._TransportType==e.Socket.WEBSOCKET?e.ConnectionChannel.WEBSOCKET:void 0},t.prototype.getStorageProvider=function(){return 1==t._memoryStore.providerType?"ServerDataProvider":"OtherDataProvider"},t.prototype.setFilterMessages=function(e){"[object Array]"==Object.prototype.toString.call(e)&&(t._memoryStore.filterMessages=e)},t.prototype.getAgoraDynamicKey=function(e,n,r){t._dataAccessProvider.getAgoraDynamicKey(e,n,r)},t.prototype.getCurrentUserId=function(){return e.Bridge._client.userId},t.prototype.getDeltaTime=function(){return t._dataAccessProvider.getDelaTime()},t.prototype.getMessage=function(e,n){t._dataAccessProvider.getMessage(e,t.logCallback(n,"getMessage"))},t.prototype.deleteLocalMessages=function(e,n,r,o){t._dataAccessProvider.removeLocalMessage(e,n,r,t.logCallback(o,"deleteLocalMessages"))},t.prototype.updateMessage=function(e,n){t._dataAccessProvider.updateMessage(e,t.logCallback(n,"updateMessage"))},t.prototype.clearData=function(){return t._dataAccessProvider.clearData()},t.prototype.clearMessages=function(e,n,r){t._dataAccessProvider.clearMessages(e,n,{onSuccess:function(e){setTimeout((function(){r.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"clearMessages"}),r.onError(e)}))}})},t.prototype.clearMessagesUnreadStatus=function(e,n,r){t._dataAccessProvider.updateMessages(e,n,"readStatus",null,{onSuccess:function(e){setTimeout((function(){r.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"clearMessagesUnreadStatus"}),r.onError(e)}))}})},t.prototype.deleteMessages=function(e,n,r,o){t._dataAccessProvider.removeMessage(e,n,r,{onSuccess:function(e){setTimeout((function(){o.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"deleteMessages"}),o.onError(e)}))}})},t.prototype.sendLocalMessage=function(n,r){e.CheckParam.getInstance().check(["object","object"],"sendLocalMessage",!1,arguments),t._dataAccessProvider.updateMessage(n),this.sendMessage(n.conversationType,n.targetId,n.content,t.logSendCallback(r,"sendLocalMessage"))},t.prototype.getPullSetting=function(e,n){t._dataAccessProvider.getPullSetting(e,n)},t.prototype.setOfflineMessageDuration=function(n,r){e.CheckParam.getInstance().check(["number","object"],"setOfflineMessageDuration",!0,arguments),t._dataAccessProvider.setOfflineMessageDuration(n,r)},t.prototype.sendMessage=function(n,r,o,i,s,a,c,u,l){if(e.CheckParam.getInstance().check(["number","string","object","object","undefined|object|null|global|boolean","undefined|object|null|global|string","undefined|object|null|global|string","undefined|object|null|global|number","undefined|object|null|global|boolean"],"sendMessage",!1,arguments),!e.RongUtil.isString(r))return i.onError(e.ErrorCode.PARAMETER_ERROR);t._dataAccessProvider.sendMessage(n,r,o,t.logSendCallback(i,"sendMessage"),s,a,c,u,l)},t.prototype.setConversationStatus=function(e,n,r,o){t._dataAccessProvider.setConversationStatus(e,n,r,o)},t.prototype.sendReceiptResponse=function(e,n,r){t._dataAccessProvider.sendReceiptResponse(e,n,t.logSendCallback(r,"sendReceiptResponse"))},t.prototype.sendTypingStatusMessage=function(e,n,r,o){t._dataAccessProvider.sendTypingStatusMessage(e,n,r,t.logSendCallback(o,"sendTypingStatusMessage"))},t.prototype.sendStatusMessage=function(e,t,n){throw new Error("Not implemented yet")},t.prototype.sendTextMessage=function(e,n,r,o){t._dataAccessProvider.sendTextMessage(e,n,r,t.logSendCallback(o,"sendTextMessage"))},t.prototype.sendRecallMessage=function(n,r,o){var i=t.logSendCallback(r,"sendRecallMessage");n.senderUserId!=e.Bridge._client.userId?(i=t.logSendCallback(r,"sendRecallMessage")).onError(e.ErrorCode.RECALL_MESSAGE,n):t._dataAccessProvider.sendRecallMessage(n,i,o)},t.prototype.insertMessage=function(e,n,r,o){t._dataAccessProvider.addMessage(e,n,r,t.logCallback(o,"insertMessage"))},t.prototype.setMessageContent=function(e,n,r){t._dataAccessProvider.setMessageContent(e,n,r)},t.prototype.setMessageSearchField=function(e,n,r){t._dataAccessProvider.setMessageSearchField(e,n,r)},t.prototype.getHistoryMessages=function(n,r,o,i,s,a,c){if(e.CheckParam.getInstance().check(["number","string|number","number|null|global|object","number","object","undefined|object|null|global|string","number|null|global|object"],"getHistoryMessages",!1,arguments),i>20)throw new Error("HistroyMessage count must be less than or equal to 20!");if(n.valueOf()<0)throw new Error("ConversationType must be greater than -1");t._dataAccessProvider.getHistoryMessages(n,r,o,i,t.logCallback(s,"getHistoryMessages"),a,c)},t.prototype.getRemoteHistoryMessages=function(n,r,o,i,s,a){e.CheckParam.getInstance().check(["number","string|number","number|null|global|object","number","object","undefined|null|global|object"],"getRemoteHistoryMessages",!1,arguments);var c="getRemoteHistoryMessages",u={errorCode:e.ErrorCode.RC_CONN_PROTO_VERSION_ERROR,funcName:"getRemoteHistoryMessages"};return i>20||n.valueOf()<0?(t.logger(u),void s.onError(e.ErrorCode.RC_CONN_PROTO_VERSION_ERROR)):void t._dataAccessProvider.getRemoteHistoryMessages(n,r,o,i,t.logCallback(s,c),a)},t.prototype.clearHistoryMessages=function(e,n){t._dataAccessProvider.clearHistoryMessages(e,n)},t.prototype.clearRemoteHistoryMessages=function(e,n){t._dataAccessProvider.clearRemoteHistoryMessages(e,t.logCallback(n,"clearRemoteHistoryMessages"))},t.prototype.deleteRemoteMessages=function(e,n,r,o){t._dataAccessProvider.deleteRemoteMessages(e,n,r,t.logCallback(o,"deleteRemoteMessages"))},t.prototype.hasRemoteUnreadMessages=function(e,n){t._dataAccessProvider.hasRemoteUnreadMessages(e,t.logCallback(n,"hasRemoteUnreadMessages"))},t.prototype.getTotalUnreadCount=function(e,n){return t._dataAccessProvider.getTotalUnreadCount({onSuccess:function(t){setTimeout((function(){e.onSuccess(t)}))},onError:function(n){setTimeout((function(){t.logger({code:n,funcName:"getTotalUnreadCount"}),e.onError(n)}))}},n)},t.prototype.getConversationUnreadCount=function(e,n){t._dataAccessProvider.getConversationUnreadCount(e,{onSuccess:function(e){setTimeout((function(){n.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"getConversationUnreadCount"}),n.onError(e)}))}})},t.prototype.getUnreadCount=function(e,n,r){t._dataAccessProvider.getUnreadCount(e,n,{onSuccess:function(e){setTimeout((function(){r.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"getUnreadCount"}),r.onError(e)}))}})},t.prototype.setUnreadCount=function(n,r,o){e.CheckParam.getInstance().check(["number","string","number"],"setUnreadCount",!1,arguments),t._dataAccessProvider.setUnreadCount(n,r,o)},t.prototype.clearUnreadCountByTimestamp=function(e,n,r,o){t._dataAccessProvider.clearUnreadCountByTimestamp(e,n,r,t.logCallback(o,"clearUnreadCountByTimestamp"))},t.prototype.clearUnreadCount=function(e,n,r){t._dataAccessProvider.clearUnreadCount(e,n,{onSuccess:function(e){setTimeout((function(){r.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"clearUnreadCount"}),r.onError(e)}))}})},t.prototype.clearTotalUnreadCount=function(e){t._dataAccessProvider.clearTotalUnreadCount({onSuccess:function(t){e.onSuccess(t)},onError:function(n){setTimeout((function(){t.logger({code:n,funcName:"clearTotalUnreadCount"}),e.onError(n)}))}})},t.prototype.clearLocalStorage=function(e){t._storageProvider.clearItem(),e()},t.prototype.setMessageExtra=function(e,n,r){t._dataAccessProvider.setMessageExtra(e,n,{onSuccess:function(e){setTimeout((function(){r.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"setMessageExtra"}),r.onError(e)}))}})},t.prototype.setMessageReceivedStatus=function(e,n,r){t._dataAccessProvider.setMessageReceivedStatus(e,n,{onSuccess:function(e){setTimeout((function(){r.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"setMessageReceivedStatus"}),r.onError(e)}))}})},t.prototype.setMessageStatus=function(e,n,r,o,i){t._dataAccessProvider.setMessageStatus(e,n,r,o,t.logCallback(i,"setMessageStatus"))},t.prototype.setMessageSentStatus=function(e,n,r){t._dataAccessProvider.setMessageSentStatus(e,n,{onSuccess:function(e){setTimeout((function(){r.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"setMessageSentStatus"}),r.onError(e)}))}})},t.prototype.clearTextMessageDraft=function(n,r){e.CheckParam.getInstance().check(["number","string|number","object"],"clearTextMessageDraft",!1,arguments);var o="darf_"+n+"_"+r;return delete t._memoryStore[o],!0},t.prototype.getTextMessageDraft=function(n,r){if(e.CheckParam.getInstance().check(["number","string|number","object"],"getTextMessageDraft",!1,arguments),""==r||n<0)throw new Error("params error : "+e.ErrorCode.DRAF_GET_ERROR);var o="darf_"+n+"_"+r;return t._memoryStore[o]},t.prototype.saveTextMessageDraft=function(n,r,o){e.CheckParam.getInstance().check(["number","string|number","string","object"],"saveTextMessageDraft",!1,arguments);var i="darf_"+n+"_"+r;return t._memoryStore[i]=o,!0},t.prototype.searchConversationByContent=function(e,n,r){t._dataAccessProvider.searchConversationByContent(e,t.logCallback(n,"searchConversationByContent"),r)},t.prototype.searchMessageByContent=function(e,n,r,o,i,s,a){t._dataAccessProvider.searchMessageByContent(e,n,r,o,i,s,t.logCallback(a,"searchMessageByContent"))},t.prototype.clearCache=function(){t._dataAccessProvider.clearCache()},t.prototype.clearConversations=function(n){for(var r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];0==r.length&&(r=[e.ConversationType.CHATROOM,e.ConversationType.CUSTOMER_SERVICE,e.ConversationType.DISCUSSION,e.ConversationType.GROUP,e.ConversationType.PRIVATE,e.ConversationType.SYSTEM,e.ConversationType.PUBLIC_SERVICE,e.ConversationType.APP_PUBLIC_SERVICE]),t._dataAccessProvider.clearConversations(r,{onSuccess:function(e){setTimeout((function(){n.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"clearConversations"}),n.onError(e)}))}})},t.prototype.getConversation=function(n,r,o){e.CheckParam.getInstance().check(["number","string|number","object"],"getConversation",!1,arguments),t._dataAccessProvider.getConversation(n,r,{onSuccess:function(e){setTimeout((function(){o.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"getConversation"}),o.onError(e)}))}})},t.prototype.pottingConversation=function(n){var r=this,o=!1;t._dataAccessProvider.getConversation(n.type,n.userId,{onSuccess:function(i){i?o=!0:i=new e.Conversation,i.conversationType=n.type,i.targetId=n.userId,n.msg&&(i.latestMessage=e.MessageUtil.messageParser(n.msg),i.latestMessageId=i.latestMessage.messageId,i.objectName=i.latestMessage.objectName,i.receivedStatus=i.latestMessage.receivedStatus,i.receivedTime=i.latestMessage.receiveTime,i.sentStatus=i.latestMessage.sentStatus,i.sentTime=i.latestMessage.sentTime);var s=t._storageProvider.getItem("mentioneds_"+e.Bridge._client.userId+"_"+i.conversationType+"_"+i.targetId);if(s){var a=JSON.parse(s);i.mentionedMsg=a[n.type+"_"+n.userId]}o||(e.RongUtil.supportLocalStorage()?i.unreadMessageCount=e.UnreadCountHandler.get(n.type,n.userId):i.unreadMessageCount=0),i.conversationType==e.ConversationType.DISCUSSION&&r.getDiscussion(n.userId,{onSuccess:function(e){i.conversationTitle=e.name},onError:function(e){}});var c=t._dataAccessProvider.conversationStatusManager.get(n.type,n.userId);i.notificationStatus=c.notificationStatus,i.isTop=c.isTop,t._dataAccessProvider.addConversation(i,{onSuccess:function(e){}})},onError:function(e){}})},t.prototype.addConversation=function(e,n){t._dataAccessProvider.addConversation(e,n)},t.prototype.sortConversationList=function(e){for(var n=[],r=0,o=e.length;r<o;r++)if(e[r])if(e[r].isTop)n.push(e[r]),e.splice(r,1);else for(var i=0;i<o-r-1;i++)if(e[i].sentTime<e[i+1].sentTime){var s=e[i];e[i]=e[i+1],e[i+1]=s}return t._memoryStore.conversationList=n.concat(e)},t.prototype.getConversationList=function(n,r,o,i){e.CheckParam.getInstance().check(["object","null|undefined|array|object|global","number|undefined|null|object|global","boolean|undefined|null|object|global"],"getConversationList",!1,arguments);t._dataAccessProvider.getConversationList({onSuccess:function(e){r||t._dataAccessProvider?setTimeout((function(){n.onSuccess(e)})):setTimeout((function(){n.onSuccess(t._memoryStore.conversationList)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"getConversationList"}),n.onError(e)}))}},r,o,i)},t.prototype.getRemoteConversationList=function(n,r,o,i){e.CheckParam.getInstance().check(["object","null|array|object|global","number|undefined|null|object|global","boolean|undefined|null|object|global"],"getRemoteConversationList",!1,arguments),t._dataAccessProvider.getRemoteConversationList(t.logCallback(n,"getRemoteConversationList"),r,o,i)},t.prototype.updateConversation=function(e){return t._dataAccessProvider.updateConversation(e)},t.prototype.createConversation=function(t,n,r){e.CheckParam.getInstance().check(["number","string|number","string"],"createConversation",!1,arguments);var o=new e.Conversation;return o.targetId=n,o.conversationType=t,o.conversationTitle=r,o.latestMessage={},o.unreadMessageCount=0,o},t.prototype.removeConversation=function(n,r,o){e.CheckParam.getInstance().check(["number","string|number","object"],"removeConversation",!1,arguments),t._dataAccessProvider.removeConversation(n,r,t.logCallback(o,"removeConversation"))},t.prototype.setConversationHidden=function(n,r,o){e.CheckParam.getInstance().check(["number","string|number","boolean"],"setConversationHidden",!1,arguments),t._dataAccessProvider.setConversationHidden(n,r,o)},t.prototype.setConversationToTop=function(n,r,o,i){e.CheckParam.getInstance().check(["number","string|number","boolean","object"],"setConversationToTop",!1,arguments),t._dataAccessProvider.setConversationToTop(n,r,o,{onSuccess:function(e){setTimeout((function(){i.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.logger({code:e,funcName:"setConversationToTop"}),i.onError(e)}))}})},t.prototype.getConversationNotificationStatus=function(e,n,r){var o={conversationType:e,targetId:n};t._dataAccessProvider.getConversationNotificationStatus(o,t.logCallback(r,"getConversationNotificationStatus"))},t.prototype.setConversationNotificationStatus=function(e,n,r,o){var i={conversationType:e,targetId:n,status:status};t._dataAccessProvider.setConversationNotificationStatus(i,t.logCallback(o,"setConversationNotificationStatus"))},t.prototype.getNotificationQuietHours=function(e){throw new Error("Not implemented yet")},t.prototype.removeNotificationQuietHours=function(e){throw new Error("Not implemented yet")},t.prototype.setNotificationQuietHours=function(e,t,n){throw new Error("Not implemented yet")},t.prototype.addMemberToDiscussion=function(n,r,o){e.CheckParam.getInstance().check(["string","array","object"],"addMemberToDiscussion",!1,arguments),t._dataAccessProvider.addMemberToDiscussion(n,r,t.logCallback(o,"addMemberToDiscussion"))},t.prototype.createDiscussion=function(n,r,o){e.CheckParam.getInstance().check(["string","array","object"],"createDiscussion",!1,arguments),t._dataAccessProvider.createDiscussion(n,r,o)},t.prototype.getDiscussion=function(n,r){e.CheckParam.getInstance().check(["string","object"],"getDiscussion",!1,arguments),t._dataAccessProvider.getDiscussion(n,t.logCallback(r,"getDiscussion"))},t.prototype.quitDiscussion=function(n,r){e.CheckParam.getInstance().check(["string","object"],"quitDiscussion",!1,arguments),t._dataAccessProvider.quitDiscussion(n,t.logCallback(r,"quitDiscussion"))},t.prototype.removeMemberFromDiscussion=function(n,r,o){e.CheckParam.getInstance().check(["string","string","object"],"removeMemberFromDiscussion",!1,arguments),t._dataAccessProvider.removeMemberFromDiscussion(n,r,t.logCallback(o,"removeMemberFromDiscussion"))},t.prototype.setDiscussionInviteStatus=function(n,r,o){e.CheckParam.getInstance().check(["string","number","object"],"setDiscussionInviteStatus",!1,arguments),t._dataAccessProvider.setDiscussionInviteStatus(n,r,t.logCallback(o,"setDiscussionInviteStatus"))},t.prototype.setDiscussionName=function(n,r,o){e.CheckParam.getInstance().check(["string","string","object"],"setDiscussionName",!1,arguments),t._dataAccessProvider.setDiscussionName(n,r,t.logCallback(o,"setDiscussionName"))},t.prototype.joinChatRoom=function(n,r,o){e.CheckParam.getInstance().check(["string","number","object"],"joinChatRoom",!1,arguments),""!=n?t._dataAccessProvider.joinChatRoom(n,r,t.logCallback(o,"joinChatRoom")):setTimeout((function(){var n=e.ErrorCode.CHATROOM_ID_ISNULL;t.logger({code:n,funcName:"joinChatRoom"}),o.onError(e.ErrorCode.CHATROOM_ID_ISNULL)}))},t.prototype.setDeviceInfo=function(e){t._dataAccessProvider.setDeviceInfo(e)},t.prototype.setChatroomHisMessageTimestamp=function(n,r){e.CheckParam.getInstance().check(["string","number"],"setChatroomHisMessageTimestamp",!1,arguments),t._dataAccessProvider.setChatroomHisMessageTimestamp(n,r)},t.prototype.getChatRoomHistoryMessages=function(n,r,o,i){e.CheckParam.getInstance().check(["string","number","number","object"],"getChatRoomHistoryMessages",!1,arguments),t._dataAccessProvider.getChatRoomHistoryMessages(n,r,o,t.logCallback(i,"getChatRoomHistoryMessages"))},t.prototype.getChatRoomInfo=function(n,r,o,i){e.CheckParam.getInstance().check(["string","number","number","object"],"getChatRoomInfo",!1,arguments),t._dataAccessProvider.getChatRoomInfo(n,r,o,t.logCallback(i,"getChatRoomInfo"))},t.prototype.quitChatRoom=function(n,r){e.CheckParam.getInstance().check(["string","object"],"quitChatRoom",!1,arguments),t._dataAccessProvider.quitChatRoom(n,t.logCallback(r,"quitChatRoom"))},t.prototype.setChatroomEntry=function(n,r,o){e.CheckParam.getInstance().check(["string","object","object"],"setChatroomEntry",!1,arguments),t._dataAccessProvider.setChatroomEntry(n,r,t.logCallback(o,"setChatroomEntry"))},t.prototype.forceSetChatroomEntry=function(n,r,o){e.CheckParam.getInstance().check(["string","object","object"],"setChatroomEntry",!1,arguments),t._dataAccessProvider.forceSetChatroomEntry(n,r,t.logCallback(o,"setChatroomEntry"))},t.prototype.getChatroomEntry=function(n,r,o){e.CheckParam.getInstance().check(["string","string","object"],"getChatroomEntry",!1,arguments),t._dataAccessProvider.getChatroomEntry(n,r,t.logCallback(o,"setChatroomEntry"))},t.prototype.getAllChatroomEntries=function(n,r){e.CheckParam.getInstance().check(["string","object"],"getAllChatroomEntries",!1,arguments),t._dataAccessProvider.getAllChatroomEntries(n,t.logCallback(r,"setChatroomEntry"))},t.prototype.removeChatroomEntry=function(n,r,o){e.CheckParam.getInstance().check(["string","object","object"],"removeChatroomEntry",!1,arguments),t._dataAccessProvider.removeChatroomEntry(n,r,t.logCallback(o,"setChatroomEntry"))},t.prototype.forceRemoveChatroomEntry=function(n,r,o){e.CheckParam.getInstance().check(["string","object","object"],"removeChatroomEntry",!1,arguments),t._dataAccessProvider.forceRemoveChatroomEntry(n,r,t.logCallback(o,"setChatroomEntry"))},t.prototype.getRemotePublicServiceList=function(e,n){t._dataAccessProvider.getRemotePublicServiceList(t.logCallback(e,"getRemotePublicServiceList"),n)},t.prototype.getPublicServiceList=function(n){t._memoryStore.depend.openMp&&(e.CheckParam.getInstance().check(["object"],"getPublicServiceList",!1,arguments),this.getRemotePublicServiceList(t.logCallback(n,"getPublicServiceList")))},t.prototype.getPublicServiceProfile=function(n,r,o){t._memoryStore.depend.openMp&&(e.CheckParam.getInstance().check(["number","string|number","object"],"getPublicServiceProfile",!1,arguments),t._dataAccessProvider.getPublicServiceProfile(n,r,t.logCallback(o,"getPublicServiceProfile")))},t.prototype.pottingPublicSearchType=function(e,n){if(t._memoryStore.depend.openMp){var r=0;return 0==e?(r|=3,r|=0==n?12:48):1==e?(r|=1,r|=0==n?8:32):(r|=2,r|=0==e?4:16),r}},t.prototype.searchPublicService=function(n,r,o){if(t._memoryStore.depend.openMp){e.CheckParam.getInstance().check(["number","string","object"],"searchPublicService",!1,arguments);var i=new t.Protobuf.SearchMpInput;i.setType(this.pottingPublicSearchType(0,n)),i.setId(r),t.bridge.queryMsg(29,e.MessageUtil.ArrayForm(i.toArrayBuffer()),e.Bridge._client.userId,t.logCallback(o,"searchPublicService"),"SearchMpOutput")}},t.prototype.searchPublicServiceByType=function(n,r,o,i){if(t._memoryStore.depend.openMp){e.CheckParam.getInstance().check(["number","number","string","object"],"searchPublicServiceByType",!1,arguments);var s=n==e.ConversationType.APP_PUBLIC_SERVICE?2:1,a=new t.Protobuf.SearchMpInput;a.setType(this.pottingPublicSearchType(s,r)),a.setId(o),t.bridge.queryMsg(29,e.MessageUtil.ArrayForm(a.toArrayBuffer()),e.Bridge._client.userId,t.logCallback(i,"searchPublicServiceByType"),"SearchMpOutput")}},t.prototype.subscribePublicService=function(n,r,o){if(t._memoryStore.depend.openMp){e.CheckParam.getInstance().check(["number","string|number","object"],"subscribePublicService",!1,arguments);var i=new t.Protobuf.MPFollowInput,s=this,a=n==e.ConversationType.APP_PUBLIC_SERVICE?"mcFollow":"mpFollow";i.setId(r),t.bridge.queryMsg(a,e.MessageUtil.ArrayForm(i.toArrayBuffer()),e.Bridge._client.userId,{onSuccess:function(){s.getRemotePublicServiceList({onSuccess:function(){},onError:function(){}}),o.onSuccess()},onError:function(e){var n=e;t.logger({code:n,funcName:"subscribePublicService"}),o.onError(e)}},"MPFollowOutput")}},t.prototype.unsubscribePublicService=function(n,r,o){if(t._memoryStore.depend.openMp){e.CheckParam.getInstance().check(["number","string|number","object"],"unsubscribePublicService",!1,arguments);var i=new t.Protobuf.MPFollowInput,s=n==e.ConversationType.APP_PUBLIC_SERVICE?"mcUnFollow":"mpUnFollow";i.setId(r),t.bridge.queryMsg(s,e.MessageUtil.ArrayForm(i.toArrayBuffer()),e.Bridge._client.userId,{onSuccess:function(){t._memoryStore.publicServiceMap.remove(n,r),o.onSuccess()},onError:function(e){var n=e;t.logger({code:n,funcName:"unsubscribePublicService"}),o.onError(e)}},"MPFollowOutput")}},t.prototype.addToBlacklist=function(n,r){e.CheckParam.getInstance().check(["string|number","object"],"addToBlacklist",!1,arguments),t._dataAccessProvider.addToBlacklist(n,t.logCallback(r,"addToBlacklist"))},t.prototype.getBlacklist=function(n){e.CheckParam.getInstance().check(["object"],"getBlacklist",!1,arguments),t._dataAccessProvider.getBlacklist(n)},t.prototype.getBlacklistStatus=function(n,r){e.CheckParam.getInstance().check(["string|number","object"],"getBlacklistStatus",!1,arguments),t._dataAccessProvider.getBlacklistStatus(n,t.logCallback(r,"getBlacklistStatus"))},t.prototype.removeFromBlacklist=function(n,r){e.CheckParam.getInstance().check(["string|number","object"],"removeFromBlacklist",!1,arguments),t._dataAccessProvider.removeFromBlacklist(n,t.logCallback(r,"removeFromBlacklist"))},t.prototype.getFileToken=function(n,r,o){e.CheckParam.getInstance().check(["number","object","undefined|null|string"],"getQngetFileTokenTkn",!1,arguments),t._dataAccessProvider.getFileToken(n,t.logCallback(r,"getFileToken"),o)},t.prototype.getFileUrl=function(n,r,o,i,s){e.CheckParam.getInstance().check(["number","string","string|global|object|null","object","undefined|null|object"],"getFileUrl",!1,arguments),t._dataAccessProvider.getFileUrl(n,r,o,t.logCallback(i,"getFileUrl"),s)},t.prototype.addRealTimeLocationListener=function(e,t,n){throw new Error("Not implemented yet")},t.prototype.getRealTimeLocation=function(e,t){throw new Error("Not implemented yet")},t.prototype.getRealTimeLocationCurrentState=function(e,t){throw new Error("Not implemented yet")},t.prototype.getRealTimeLocationParticipants=function(e,t){throw new Error("Not implemented yet")},t.prototype.joinRealTimeLocation=function(e,t){throw new Error("Not implemented yet")},t.prototype.quitRealTimeLocation=function(e,t){throw new Error("Not implemented yet")},t.prototype.startRealTimeLocation=function(e,t){throw new Error("Not implemented yet")},t.prototype.updateRealTimeLocationStatus=function(e,t,n,r){throw new Error("Not implemented yet")},t.prototype.startCall=function(n,r,o,i,s,a){if(e.CheckParam.getInstance().check(["number","string|number","array","number","string","object"],"startCall",!1,arguments),t._memoryStore.voipStategy)t._voipProvider.startCall(n,r,o,i,s,t.logCallback(a,"startCall"));else{var c=e.ErrorCode.VOIP_NOT_AVALIABLE;t.logger({code:c,funcName:"startCall"}),a.onError(e.ErrorCode.VOIP_NOT_AVALIABLE)}},t.prototype.joinCall=function(n,r){if(e.CheckParam.getInstance().check(["number","object"],"joinCall",!1,arguments),t._memoryStore.voipStategy)t._voipProvider.joinCall(n,t.logCallback(r,"joinCall"));else{var o=e.ErrorCode.VOIP_NOT_AVALIABLE;t.logger({code:o,funcName:"joinCall"}),r.onError(e.ErrorCode.VOIP_NOT_AVALIABLE)}},t.prototype.hungupCall=function(n,r,o){e.CheckParam.getInstance().check(["number","string","number"],"hungupCall",!1,arguments),t._memoryStore.voipStategy&&t._voipProvider.hungupCall(n,r,o)},t.prototype.changeMediaType=function(n,r,o,i){if(e.CheckParam.getInstance().check(["number","string","number","object"],"changeMediaType",!1,arguments),t._memoryStore.voipStategy)t._voipProvider.changeMediaType(n,r,o,t.logCallback(i,"changeMediaType"));else{var s=e.ErrorCode.VOIP_NOT_AVALIABLE;t.logger({code:s,funcName:"changeMediaType"}),i.onError(e.ErrorCode.VOIP_NOT_AVALIABLE)}},t.prototype.getUnreadMentionedMessages=function(e,n){return t._dataAccessProvider.getUnreadMentionedMessages(e,n)},t.prototype.clearListeners=function(){t._dataAccessProvider.clearListeners()},t.prototype.getUserStatus=function(e,n){t._dataAccessProvider.getUserStatus(e,t.logCallback(n,"getUserStatus"))},t.prototype.setUserStatus=function(e,n){t._dataAccessProvider.setUserStatus(e,t.logCallback(n,"setUserStatus"))},t.prototype.setUserStatusListener=function(e,n){var r=e.userIds,o=e.multiple;t.userStatusObserver.watch({key:r,func:n,multiple:o}),t._dataAccessProvider.setUserStatusListener(e,n)},t.messageWatch=function(e){t.RTCListener=e},t.messageSignalWatch=function(e){t.RTCSignalLisener=e},t.prototype.getRTCUserInfoList=function(n,r){e.CheckParam.getInstance().check(["object","object"],"getRTCUserInfoList",!1,arguments),t._dataAccessProvider.getRTCUserInfoList(n,r)},t.prototype.getRTCUserList=function(n,r){e.CheckParam.getInstance().check(["object","object"],"getRTCUserList",!1,arguments),t._dataAccessProvider.getRTCUserList(n,r)},t.prototype.setRTCUserInfo=function(n,r,o){e.CheckParam.getInstance().check(["object","object","object"],"setRTCUserInfo",!1,arguments),t._dataAccessProvider.setRTCUserInfo(n,r,o)},t.prototype.removeRTCUserInfo=function(n,r,o){e.CheckParam.getInstance().check(["object","object","object"],"removeRTCUserInfo",!1,arguments),t._dataAccessProvider.removeRTCUserInfo(n,r,o)},t.prototype.getRTCRoomInfo=function(n,r){e.CheckParam.getInstance().check(["object","object"],"getRTCRoomInfo",!1,arguments),t._dataAccessProvider.getRTCRoomInfo(n,r)},t.prototype.setRTCRoomInfo=function(n,r,o){e.CheckParam.getInstance().check(["object","object","object"],"setRTCRoomInfo",!1,arguments),t._dataAccessProvider.setRTCRoomInfo(n,r,o)},t.prototype.removeRTCRoomInfo=function(n,r,o){e.CheckParam.getInstance().check(["object","object","object"],"removeRTCRoomInfo",!1,arguments),t._dataAccessProvider.removeRTCRoomInfo(n,r,o)},t.prototype.joinRTCRoom=function(n,r){if(e.CheckParam.getInstance().check(["object","object"],"joinRTCRoom",!1,arguments),t.isJoinedRTCRoom)return r.onSuccess(t.roomInfo);t._dataAccessProvider.joinRTCRoom(n,{onSuccess:function(e){t.roomInfo=e,t.isJoinedRTCRoom=!0,r.onSuccess(e)},onError:r.onError})},t.prototype.quitRTCRoom=function(n,r){e.CheckParam.getInstance().check(["object","object"],"quitRTCRoom",!1,arguments),t.isJoinedRTCRoom=!1,t._dataAccessProvider.quitRTCRoom(n,{onSuccess:function(){t.roomInfo={users:{},token:""},r.onSuccess(!0)},onError:r.onError})},t.prototype.RTCPing=function(n,r){e.CheckParam.getInstance().check(["object","object"],"RTCPing",!1,arguments),t._dataAccessProvider.RTCPing(n,r)},t.prototype.setRTCUserData=function(n,r,o,i,s,a){e.CheckParam.getInstance().check(["string","string","string","boolean","object","global|object|null|undefined"],"setRTCUserData",!1,arguments),t._dataAccessProvider.setRTCUserData(n,r,o,i,s,a)},t.prototype.setRTCUserTotalRes=function(n,r,o,i,s){e.CheckParam.getInstance().check(["string","object","string","string","object"],"setRTCUserTotalRes",!1,arguments),t._dataAccessProvider.setRTCUserTotalRes(n,r,o,i,s)},t.prototype.getRTCUserData=function(n,r,o,i){e.CheckParam.getInstance().check(["string","array","boolean","object","global|object|null"],"getRTCUserData",!1,arguments),t._dataAccessProvider.getRTCUserData(n,r,o,i)},t.prototype.removeRTCUserData=function(n,r,o,i,s){e.CheckParam.getInstance().check(["string","array","boolean","object","global|object|null|undefined"],"removeRTCUserData",!1,arguments),t._dataAccessProvider.removeRTCUserData(n,r,o,i,s)},t.prototype.setRTCRoomData=function(n,r,o,i,s,a){e.CheckParam.getInstance().check(["string","string","string","boolean","object","global|object|null|undefined"],"setRTCRoomData",!1,arguments),t._dataAccessProvider.setRTCRoomData(n,r,o,i,s,a)},t.prototype.getRTCRoomData=function(n,r,o,i){e.CheckParam.getInstance().check(["string","array","boolean","object"],"getRTCRoomData",!1,arguments),t._dataAccessProvider.getRTCRoomData(n,r,o,i)},t.prototype.removeRTCRoomData=function(n,r,o,i,s){e.CheckParam.getInstance().check(["string","array","boolean","object","global|object|null|undefined"],"removeRTCRoomData",!1,arguments),t._dataAccessProvider.removeRTCRoomData(n,r,o,i,s)},t.prototype.setRTCOutData=function(e,n,r,o,i){t._dataAccessProvider.setRTCOutData(e,n,r,o,i)},t.prototype.getRTCOutData=function(e,n,r){t._dataAccessProvider.getRTCOutData(e,n,r)},t.prototype.getNavi=function(){return t._dataAccessProvider.getNavi()},t.prototype.getRTCToken=function(n,r){return e.CheckParam.getInstance().check(["object","object"],"getRTCToken",!1,arguments),t._dataAccessProvider.getRTCToken(n,r)},t.prototype.setRTCState=function(n,r,o){return e.CheckParam.getInstance().check(["object","object","object"],"setRTCState",!1,arguments),t._dataAccessProvider.setRTCState(n,r,o)},t.prototype.getAppInfo=function(){return{appKey:t._memoryStore.appKey}},t.prototype.getSDKInfo=function(){return{version:t.sdkver}},t.HttpProtocol={http:"http://",https:"https://"},t.WsProtocol={ws:"ws://",wss:"wss://"},t.RTCListener=function(){},t.RTCInnerListener=function(){},t.RTCSignalLisener=function(){},t.MaxMessageContentBytes=131072,t.NavMarkInToken="@",t.NavSeparatorInToken=";",t.NavExpiredTime=72e5,t.currentServer="",t.LogFactory={},t.MessageType={},t.RegisterMessage={},t._memoryStore={isPullFinished:!1,syncMsgQueue:[]},t.isNotPullMsg=!1,t.userStatusObserver=null,t.sdkver="2.5.9",t.otherDeviceLoginCount=0,t.serverStore={index:0},t.isFirstConnect=!0,t.roomInfo={users:{},token:""},t.invalidWsUrls=[],t.isJoinedRTCRoom=!1,t.statusListeners=[],t.messageListeners=[],t.settingListeners=[],t.conversationStatusListeners=[],t.userStatusListener=null,t}();e.RongIMClient=t}(RongIMLib||(RongIMLib={})),function(e){!function(e){e[e.AT_MOST_ONCE=0]="AT_MOST_ONCE",e[e.AT_LEAST_ONCE=1]="AT_LEAST_ONCE",e[e.EXACTLY_ONCE=2]="EXACTLY_ONCE",e[e.DEFAULT=3]="DEFAULT"}(e.Qos||(e.Qos={}));var t=e.Qos;!function(e){e[e.CONNECT=1]="CONNECT",e[e.CONNACK=2]="CONNACK",e[e.PUBLISH=3]="PUBLISH",e[e.PUBACK=4]="PUBACK",e[e.QUERY=5]="QUERY",e[e.QUERYACK=6]="QUERYACK",e[e.QUERYCON=7]="QUERYCON",e[e.SUBSCRIBE=8]="SUBSCRIBE",e[e.SUBACK=9]="SUBACK",e[e.UNSUBSCRIBE=10]="UNSUBSCRIBE",e[e.UNSUBACK=11]="UNSUBACK",e[e.PINGREQ=12]="PINGREQ",e[e.PINGRESP=13]="PINGRESP",e[e.DISCONNECT=14]="DISCONNECT"}(e.Type||(e.Type={}));var n,r;e.Type;e.StatusTopic=(n=e.ConversationType,(r={})[n.PRIVATE]="ppMsgS",r[n.GROUP]="pgMsgS",r);var o=["invtDiz","crDiz","qnUrl","userInf","dizInf","userInf","joinGrp","quitDiz","exitGrp","evctDiz",["","ppMsgP","pdMsgP","pgMsgP","chatMsg","pcMsgP","","pmcMsgN","pmpMsgN","","","","prMsgS","prMsgP"],"pdOpen","rename","uGcmpr","qnTkn","destroyChrm","createChrm","exitChrm","queryChrm","joinChrm","pGrps","addBlack","rmBlack","getBlack","blackStat","addRelation","qryRelation","delRelation","pullMp","schMp","qnTkn","qnUrl","qryVoipK","delMsg","qryCHMsg","getUserStatus","setUserStatus","subUserStatus","cleanHisMsg"],i=function(){function t(n,r){this.connectionStatus=-1;var o=r.appId,i=encodeURIComponent(r.token),a=r.sdkVer,c=r.apiVer;this.self=r,this.socket=s.getInstance().createServer();var u=this,l=e.RongIMClient._storageProvider,d=l.getItem("servers");d=JSON.parse(d)||[];var f=e.RongIMClient._memoryStore.depend,p=f.cmpUrl;d=e.RongUtil.isValidWsUrl(p)?[p]:e.RongUtil.getValidWsUrlList(d);var g=function(t){u.url=e.RongUtil.tplEngine("{host}/websocket?appId={appId}&token={token}&sdkVer={sdkVer}&apiVer={apiVer}",{host:t,appId:o,token:i,sdkVer:a,apiVer:c}),u.socket.connect(u.url,n);var r=l.getItem("rong_current_user");e.Navigation.Endpoint={host:t,userId:r}};({get:function(){for(var t=new e.Timer({timeout:15e3}),n=[],r=[],o=!1,i=function(){for(var e=0;e<n.length;e++){var t=n[e];clearTimeout(t)}for(e=0;e<r.length;e++){r[e].abort()}n.length=0,r.length=0},s=function(s,a){var c=s.url,u=s.time;if(!o){var l=setTimeout((function(){var n=e.MessageUtil.detectCMP({url:c,success:function(){o||(i(),o=!0,t.pause(),a(c),e.Logger.writeLog({tag:e.LoggerTag.IM.L_PING_WS_R,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{url:c}}))},fail:function(t){console.log(t),e.Logger.writeLog({tag:e.LoggerTag.IM.L_PING_WS_R,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{url:c,code:t}})}});r.push(n)}),u);n.push(l)}},a=function(t){var n=t.match(/(http|https):\/\/([^\/]+)/i)[2];e.RongIMClient.currentServer=n,g(n)},c=0;c<d.length;c++){var p=d[c];p&&(s({url:p=e.RongUtil.tplEngine("{protocol}{server}/ping?r={random}",{protocol:f.protocol,server:p,random:e.RongUtil.getTimestamp()}),time:1e3*c},a),e.Logger.writeLog({tag:e.LoggerTag.IM.L_PING_WS_T,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{url:p}}))}t.resume((function(){e.Logger.writeLog({tag:e.LoggerTag.IM.L_PING_WS_R,level:e.LoggerLevel.F,type:e.LoggerType.IM,content:{desc:"all websocket addresses are unavailable",cmp:d,ConnectionStatus:e.ConnectionStatus.NETWORK_UNAVAILABLE,available:!1}}),i();for(var t=0;t<d.length;t++)e.RongIMClient.invalidWsUrls.push(d[t]);var n=l.getItem("servers");try{n=JSON.parse(n),!e.RongUtil.getValidWsUrlList(n).length&&e.Navigation.clear()}catch(e){}u.socket.fire("StatusChanged",e.ConnectionStatus.NETWORK_UNAVAILABLE)}))},element:function(){for(var t=new e.Timer({timeout:15e3}),n=[],r=[],o=!1,i=function(){for(var e=0;e<n.length;e++){var t=n[e];clearTimeout(t)}for(e=0;e<r.length;e++){var o=r[e];document.body.removeChild(o)}},s=function(e,s){var a=e.url,c=e.time;if(!o){var u=setTimeout((function(){var e=document.createElement("script");e.src=a,document.body.appendChild(e),e.onerror=function(){if(!o){i(),o=!0,t.pause();var n=e.src;s(n)}},r.push(e)}),c);n.push(u)}},a=function(e){var t=e.match(/(http|https):\/\/([^\/]+)/i)[2];g(t)},c=0;c<d.length;c++){s({url:e.RongUtil.tplEngine("//{server}/{path}",{server:d[c],path:c}),time:1e3*c},a)}t.resume((function(){for(var t=0;t<d.length;t++)e.RongIMClient.invalidWsUrls.push(d[t]);i(),u.socket.fire("StatusChanged",e.ConnectionStatus.NETWORK_UNAVAILABLE)}))}})[f.isWSPingJSONP?"element":"get"]();var h=t._ConnectionStatusListener,m="object"==typeof h,v=this;v.socket.on("StatusChanged",(function(t){if(e.Bridge&&e.Bridge._client&&e.Bridge._client.channel&&v!==e.Bridge._client.channel)v.connectionStatus=t;else{if(!m)throw new Error("setConnectStatusListener:Parameter format is incorrect");var n=t==e.ConnectionStatus.NETWORK_UNAVAILABLE,o=!e.RongIMClient._memoryStore.depend.isPolling;if(e.RongIMClient.isFirstConnect&&n&&o&&(t=e.ConnectionStatus.WEBSOCKET_UNAVAILABLE),n){var i=e.RongIMClient._storageProvider,s=i.getItem("servers");s=JSON.parse(s);var a=e.RongIMClient.currentServer;if(a){var c=e.RongUtil.indexOf(s,a);if(!e.RongUtil.isEqual(c,-1)){var u=s.splice(c,1)[0];s.push(u),i.setItem("servers",JSON.stringify(s))}}}v.connectionStatus=t,setTimeout((function(){h.onChanged(t);var n=[e.ConnectionStatus.CONNECTING,e.ConnectionStatus.REQUEST_NAVI,e.ConnectionStatus.RESPONSE_NAVI];-1===e.RongUtil.indexOf(n,t)&&e.Logger.writeLog({tag:e.LoggerTag.IM.L_NETC_S,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{ConnectionStatus:t,available:!1}})})),t==e.ConnectionStatus.DISCONNECTED&&r.clearHeartbeat(),t==e.ConnectionStatus.KICKED_OFFLINE_BY_OTHER_CLIENT&&e.RongIMClient.otherDeviceLoginCount++,t==e.ConnectionStatus.CONNECTED&&(e.RongIMClient.isFirstConnect=!1),t==e.ConnectionStatus.WEBSOCKET_UNAVAILABLE&&(e.RongUtil.getValidWsUrlList(s).length?(e.RongIMClient._storageProvider.setItem("rongSDK",e.Transportations._TransportType),e.RongIMClient.connect(r.token,e.RongIMClient._memoryStore.callback)):(v.changeConnectType(),e.RongIMClient.isFirstConnect=!1,e.RongIMClient.connect(r.token,e.RongIMClient._memoryStore.callback)))}})),this.socket.on("message",r.handler.handleMessage),this.socket.on("disconnect",(function(e){u.socket.fire("StatusChanged",e||2)}))}return t.prototype.changeConnectType=function(){e.RongIMClient._memoryStore.depend.isPolling=!e.RongIMClient._memoryStore.depend.isPolling,new e.FeatureDectector},t.prototype.writeAndFlush=function(e){this.socket.send(e)},t.prototype.reconnect=function(t){e.MessageIdHandler.clearMessageId(),this.socket=this.socket.reconnect(),t&&(this.self.reconnectObj=t)},t.prototype.disconnect=function(e){this.socket.disconnect(e)},t}();e.Channel=i;var s=function(){function t(){this.socket=null,this._events={}}return t.getInstance=function(){return new t},t.prototype.connect=function(t,n){return this.socket&&(t&&(e.RongIMClient._storageProvider.setItem("rongSDK",this.checkTransport()),this.on("connect",n||new Function)),t&&(this.currentURL=t),this.socket.createTransport(t)),this},t.prototype.createServer=function(){var e=this.getTransport(this.checkTransport());if(null===e)throw new Error("the channel was not supported");return e},t.prototype.getTransport=function(n){return n==t.XHR_POLLING?this.socket=new e.PollingTransportation(this):n==t.WEBSOCKET&&(this.socket=new e.SocketTransportation(this)),this},t.prototype.send=function(e){this.socket&&(this.checkTransport()==t.WEBSOCKET?this.socket.send(e):this.socket.send(this._encode(e)))},t.prototype.onMessage=function(e){this.fire("message",e)},t.prototype.disconnect=function(e){return this.socket.disconnect(e),this.fire("disconnect",e),this},t.prototype.reconnect=function(){if(this.currentURL&&e.RongIMClient._storageProvider.getItem("rongSDK"))return this.connect(this.currentURL,null);throw new Error("reconnect:no have URL")},t.prototype.checkTransport=function(){return e.RongIMClient._memoryStore.depend.isPolling&&(e.Transportations._TransportType=t.XHR_POLLING),e.Transportations._TransportType},t.prototype.fire=function(e,t){if(e in this._events)for(var n=0,r=this._events[e].length;n<r;n++)this._events[e][n](t);return this},t.prototype.on=function(t,n){return"function"==typeof n&&t?(t in this._events?-1==e.MessageUtil.indexOf(this._events,n)&&this._events[t].push(n):this._events[t]=[n],this):this},t.prototype.removeEvent=function(e,t){if(e in this._events)for(var n=0,r=this._events[e].length;n<r;n++)this._events[e][n]==t&&this._events[e].splice(n,1);return this},t.prototype._encode=function(t){var n="?messageid="+t.getMessageId()+"&header="+t.getHeaderFlag()+"&sessionid="+e.RongIMClient._storageProvider.getItem("sId"+e.Navigation.Endpoint.userId);return/(PubAckMessage|QueryConMessage)/.test(t._name)||(n+="&topic="+t.getTopic()+"&targetid="+(t.getTargetId()||"")),{url:n,data:"getData"in t?t.getData():""}},t.XHR_POLLING="xhr-polling",t.WEBSOCKET="websocket",t}();e.Socket=s;var a=function(){function n(t,n){this.timeoutMillis=6e3,this.timeout_=0,this.sdkVer="",this.apiVer=Math.floor(1e6*Math.random()),this.channel=null,this.handler=null,this.userId="",this.reconnectObj={},this.heartbeat=0,this.pullMsgHearbeat=0,this.chatroomId="",this.SyncTimeQueue=[],this.cacheMessageIds=[],this.token=t,this.appId=n,this.SyncTimeQueue.state="complete",this.sdkVer=e.RongIMClient.sdkver}return n.prototype.resumeTimer=function(){var t=this;this.timeout_=setTimeout((function(){t.channel.disconnect(e.ConnectionStatus.NETWORK_UNAVAILABLE)}),this.timeoutMillis)},n.prototype.pauseTimer=function(){this.timeout_&&(clearTimeout(this.timeout_),this.timeout_=0)},n.prototype.connect=function(t){this.handler=new u(this),this.handler.setConnectCallback(t);var n=this;this.channel=new i((function(){e.Transportations._TransportType==s.WEBSOCKET&&n.keepLive()}),this),this.channel.socket.fire("StatusChanged",e.ConnectionStatus.CONNECTING)},n.prototype.checkSocket=function(t){this.channel.writeAndFlush(new e.PingReqMessage);var n=0,r=setInterval((function(){e.RongIMClient._memoryStore.isFirstPingMsg?n>15&&(clearInterval(r),t.onError()):(clearInterval(r),t.onSuccess()),n++}),100)},n.prototype.keepLive=function(){this.heartbeat>0&&clearInterval(this.heartbeat);var t=this;t.heartbeat=setInterval((function(){t.resumeTimer(),t.channel.writeAndFlush(new e.PingReqMessage)}),3e4),t.pullMsgHearbeat>0&&clearInterval(t.pullMsgHearbeat),t.pullMsgHearbeat=setInterval((function(){t.syncTime(!0,void 0,void 0,!1)}),18e4)},n.prototype.clearHeartbeat=function(){clearInterval(this.heartbeat),this.heartbeat=0,this.pauseTimer(),clearInterval(this.pullMsgHearbeat),this.pullMsgHearbeat=0},n.prototype.publishMessage=function(n,r,o,i,s,a){var c=(a=a||{}).isNoAck,u=!!i,l=e.MessageIdHandler.messageIdPlus(this.channel.reconnect);if(l){var d=new e.PublishMessage(n,r,o);d.setMessageId(l),c?(d.setQos(t.AT_LEAST_ONCE),i.onSuccess(d)):u?(d.setQos(t.AT_LEAST_ONCE),this.handler.putCallback(new e.PublishCallback(i.onSuccess,i.onError),d.getMessageId(),s)):d.setQos(t.AT_MOST_ONCE),this.channel.writeAndFlush(d)}},n.prototype.queryMessage=function(t,r,o,i,s,a){if("userInf"==t&&n.userInfoMapping[o])s.onSuccess(n.userInfoMapping[o]);else{var c=e.MessageIdHandler.messageIdPlus(this.channel.reconnect);if(c){var u=new e.QueryMessage(t,r,o);u.setMessageId(c),u.setQos(i),this.handler.putCallback(new e.QueryCallback(s.onSuccess,s.onError),u.getMessageId(),a),this.channel.writeAndFlush(u)}}},n.prototype.invoke=function(n,r,o){var i,s,a,u,l=this,d=this.SyncTimeQueue.shift();if(null!=d){this.SyncTimeQueue.state="pending";var f=e.SyncTimeUtil.get(),p=f.sent,g=2===d.type;if(2!=d.type)i=f.received,(s=new e.RongIMClient.Protobuf.SyncRequestMsg).setIspolling(!1),a="pullMsg",u=this.userId,s.setSendBoxSyncTime(p);else if(u=d.chrmId||l.chatroomId,i=e.RongIMClient._memoryStore.lastReadTime.get(u+c._client.userId+"CST")||0,(s=new e.RongIMClient.Protobuf.ChrmPullMsg).setCount(0),a="chrmPull",!u){var h="syncTime:Received messages of chatroom but was not init";throw e.Logger.writeLog({tag:e.LoggerTag.IM.L_CHRM_PULL_E,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{msg:h}}),new Error(h)}if(d.pulltime<=i)return this.SyncTimeQueue.state="complete",void this.invoke(n,u,o);n&&"setIsPullSend"in s&&s.setIsPullSend(!0),s.setSyncTime(i),this.queryMessage(a,e.MessageUtil.ArrayForm(s.toArrayBuffer()),u,t.AT_LEAST_ONCE,{onSuccess:function(t){var r=e.MessageUtil.int64ToTimestamp(t.syncTime),s=u,d="chrmPull"==a;if(d)s+=c._client.userId+"CST",e.RongIMClient._memoryStore.lastReadTime.set(s,r);else{var f=e.RongIMClient._storageProvider;r>f.getItem(s)&&f.setItem(s,r)}var h=t.list,m=t.finished;d&&(m=!0),void 0===m&&(m=!0),e.RongIMClient._memoryStore.isPullFinished=m;for(var v=e.RongIMClient._memoryStore.connectAckTime,y=h.length,C=0,R=y;C<y;C++){R-=1;var T=h[C],I=e.MessageUtil.int64ToTimestamp(T.dataTime);if(I>(T.direction==e.MessageDirection.SEND?p:i)||g){var S=I<v;try{c._client.handler.onReceived(T,void 0,S,R,!1,m)}catch(e){console.log(e)}}}if(y<=200&&"pullMsg"==a){var E=e.RongIMClient._dataAccessProvider.Conversation,M=e.RongIMClient._memoryStore.conversationList;E._notify(M)}l.SyncTimeQueue.state="complete",l.invoke(n,u,o)},onError:function(t){l.SyncTimeQueue.state="complete",l.invoke(n,u,o),e.Logger.writeLog({tag:e.LoggerTag.IM.L_QUERY_MSG_E,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{action:"invoke -> queryMessage",error:t}})}},"DownStreamMessages")}},n.prototype.syncTime=function(e,t,n,r){this.SyncTimeQueue.push({type:e,pulltime:t,chrmId:n}),1==this.SyncTimeQueue.length&&"complete"==this.SyncTimeQueue.state&&this.invoke(!e,n,r)},n.prototype.__init=function(t){this.handler=new u(this),this.handler.setConnectCallback(e.RongIMClient._memoryStore.callback),this.channel=new i(t,this)},n.prototype.clearCacheMessageIds=function(){this.cacheMessageIds=[]},n.userInfoMapping={},n}();e.Client=a;var c=function(){function n(){}return n.getInstance=function(){return new n},n.prototype.connect=function(t,r,o){if(e.RongIMClient.Protobuf)return n._client=(new e.Navigation).connect(t,r,o),n._client},n.prototype.setListener=function(){i._ConnectionStatusListener={onChanged:function(t){e.RongUtil.forEach(e.RongIMClient.statusListeners,(function(n){e.RongUtil.isFunction(n)&&n(t)})),t==e.ConnectionStatus.NETWORK_UNAVAILABLE&&(e.RongIMClient._memoryStore.networkUnavailable=!0)}},i._ReceiveMessageListener={onReceived:function(t,n,r){e.RongUtil.forEach(e.RongIMClient.messageListeners,(function(o){e.RongUtil.isFunction(o)&&o(t,n,r)}))}}},n.prototype.reconnect=function(e){n._client.channel.reconnect(e)},n.prototype.disconnect=function(){n._client.channel.disconnect(2)},n.prototype.queryMsg=function(e,r,i,s,a){"string"!=typeof e&&(e=o[e]),n._client.queryMessage(e,r,i,t.AT_MOST_ONCE,s,a)},n.prototype.pubMsg=function(t,r,i,s,a,c,u){if(u=u||{},"number"==typeof c)c==e.MethodType.CUSTOMER_SERVICE?n._client.publishMessage("pcuMsgP",r,i,s,a):c==e.MethodType.RECALL&&n._client.publishMessage("recallMsg",r,i,s,a);else{var l=u.isStatus,d=e.StatusTopic[t];l&&d?n._client.publishMessage(d,r,i,s,a,{isNoAck:!0}):n._client.publishMessage(o[10][t],r,i,s,a)}},n}();e.Bridge=c;var u=function(){function t(e){if(this.map={},this.connectCallback=null,!i._ReceiveMessageListener)throw new Error("please set onReceiveMessageListener");this._onReceived=i._ReceiveMessageListener.onReceived,this._client=e,this.syncMsgMap=new Object}return t.prototype.putCallback=function(e,t,n){var r={Callback:e,Message:n};r.Callback.resumeTimer(),this.map[t]=r},t.prototype.setConnectCallback=function(t){t&&(this.connectCallback=new e.ConnectAck(t.onSuccess,t.onError,this._client))},t.prototype.handleChrmKVPullMsg=function(t){try{var n=e.CallbackMapping.getInstance().mapping(e.RongIMClient.Protobuf.NotifyMsg.decode(t.data),"NotifyMsg"),r=e.MessageUtil.int64ToTimestamp(n.time);2===n.type?e.ChrmKVHandler.pull(n.chrmId,r):3===n.type&&e.RongIMClient._dataAccessProvider.conversationStatusManager.pull({time:r})}catch(e){}},t.prototype.onReceived=function(t,n,r,o,i){if(t){var s,a,u,l=!1;if("PublishMessage"!=t._name)s=t,e.RongIMClient._storageProvider.setItem(this._client.userId,e.MessageUtil.int64ToTimestamp(s.dataTime));else{if("s_ntf"==t.getTopic())return s=e.RongIMClient.Protobuf.NotifyMsg.decode(t.getData()),void this._client.syncTime(s.type,e.MessageUtil.int64ToTimestamp(s.time),s.chrmId);if("s_msg"==t.getTopic()){l=!0,s=e.RongIMClient.Protobuf.DownStreamMessage.decode(t.getData());var d=e.MessageUtil.int64ToTimestamp(s.dataTime);e.RongIMClient._storageProvider.setItem(this._client.userId,d),e.RongIMClient._memoryStore.lastReadTime.get(this._client.userId,d)}else{if("s_stat"==t.getTopic())return s=e.RongIMClient.Protobuf.GetUserStatusOutput.decode(t.getData()),s=e.RongInnerTools.convertUserStatus(s),void e.RongIMClient.userStatusObserver.notify({key:s.userId,entity:s});if("s_cmd"===t.getTopic())return void this.handleChrmKVPullMsg(t);if(c._client.sdkVer&&"1.0.0"==c._client.sdkVer)return;try{s=e.RongIMClient.Protobuf.UpStreamMessage.decode(t.getData())}catch(t){return void e.Logger.writeLog({tag:e.LoggerTag.IM.L_DECODE_MSG_E,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{stack:t,msg:"MessageHandler -> onReceived"}})}var f=t.getTopic().substr(0,2);"pp"==f?s.type=1:"pd"==f?s.type=2:"pg"==f?s.type=3:"ch"==f?s.type=4:"pc"==f&&(s.type=5),s.groupId=t.getTargetId(),s.fromUserId=this._client.userId,s.dataTime=Date.parse((new Date).toString())}if(!s)return}var p=e.RongIMClient._memoryStore.isPullFinished;if(p||r||!l){if(12==(a=e.MessageUtil.messageParser(s,this._onReceived,r)).conversationType)return e.RongIMClient.RTCListener(a),e.RongIMClient.RTCInnerListener(a),void e.RongIMClient.RTCSignalLisener(a);if(t.getTopic&&"recallMsg"==t.getTopic()){var g=a.content;a.conversationType=g.conversationType,a.targetId=g.targetId,a.messageId=null}if(n&&(a.messageUId=n.getMessageUId(),a.sentTime=n.getTimestamp(),e.RongIMClient._storageProvider.setItem(this._client.userId,a.sentTime)),null!==a){var h;if(!(a.conversationType==e.ConversationType.CHATROOM))if((h=e.RongIMClient.MessageParams[a.messageType].msgTag.getMessageTag())>=0&&e.SyncTimeUtil.set(a),a.messageDirection==e.MessageDirection.SEND){var m=e.RongIMClient._storageProvider,v=e.Bridge._client.userId,y=m.getItem("last_sentTime_"+v)||0;if(a.sentTime<=y&&!i)return}if(3===(h=e.RongIMClient.MessageParams[a.messageType].msgTag.getMessageTag())||2===h){if((u=e.RongIMClient._dataAccessProvider.getConversation(a.conversationType,a.targetId,{onSuccess:function(){},onError:function(){}}))||(u=e.RongIMClient.getInstance().createConversation(a.conversationType,a.targetId,"")),a.messageDirection==e.MessageDirection.RECEIVE&&64==(64&s.status)){var C=e.RongIMClient._storageProvider.getItem("mentioneds_"+c._client.userId+"_"+a.conversationType+"_"+a.targetId),R=a.conversationType+"_"+a.targetId,T={};if(a.content&&a.content.mentionedInfo&&(T[R]={uid:a.messageUId,time:a.sentTime,mentionedInfo:a.content.mentionedInfo},e.RongIMClient._storageProvider.setItem("mentioneds_"+c._client.userId+"_"+a.conversationType+"_"+a.targetId,JSON.stringify(T)),C=JSON.stringify(T)),C){T=JSON.parse(C);u.mentionedMsg=T[R]}}if(a.messageDirection==e.MessageDirection.RECEIVE&&a.senderUserId!=c._client.userId&&(u.unreadMessageCount=u.unreadMessageCount+1,e.RongUtil.supportLocalStorage())){var I=e.UnreadCountHandler.add(u.conversationType,a.targetId,1,a.sentTime);u.unreadMessageCount=I}var S=(new Date).getTime();u.receivedTime=e.MessageUtil.getCheckedTime(S),u.receivedStatus=a.receivedStatus,u.senderUserId=a.sendUserId,u.notificationStatus=e.ConversationNotificationStatus.DO_NOT_DISTURB,u.isTop=!1,u.latestMessageId=a.messageId,u.latestMessage=a,u.sentTime=a.sentTime,e.RongIMClient._dataAccessProvider.addConversation(u,{onSuccess:function(t){if(!r){var n=e.RongIMClient._dataAccessProvider.Conversation,o=e.RongIMClient._memoryStore.conversationList;n._notify(o)}},onError:function(){}})}if(a.conversationType!=e.ConversationType.CUSTOMER_SERVICE||"ChangeModeResponseMessage"!=a.messageType&&"SuspendMessage"!=a.messageType&&"HandShakeResponseMessage"!=a.messageType&&"TerminateMessage"!=a.messageType&&"CustomerStatusUpdateMessage"!=a.messageType&&"TextMessage"!=a.messageType&&"InformationNotificationMessage"!=a.messageType||e.RongIMClient._memoryStore.custStore.isInit){if(a.conversationType==e.ConversationType.CUSTOMER_SERVICE&&"HandShakeResponseMessage"!=a.messageType){if(!e.RongIMClient._memoryStore.custStore[a.targetId])return;if("TerminateMessage"==a.messageType&&e.RongIMClient._memoryStore.custStore[a.targetId].sid!=a.content.sid)return}if(a.messageType===e.RongIMClient.MessageType.HandShakeResponseMessage){var E=a.content.data;e.RongIMClient._memoryStore.custStore[a.targetId]=E,E.serviceType!=e.CustomerType.ONLY_HUMAN&&E.serviceType!=e.CustomerType.HUMAN_FIRST||"1"==E.notAutoCha&&e.RongIMClient.getInstance().switchToHumanMode(a.targetId,{onSuccess:function(){},onError:function(){}})}if(e.LoggerUtil.isLogCmdMsg(a))e.Logger.reportMNLog(a.content);else{var M=new Date,_=M.getMonth()+1,b=M.getFullYear()+"/"+(1==_.toString().length?"0"+_:_)+"/"+M.getDate(),O=new Date(b).getTime()-a.sentTime<0;if(e.RongUtil.supportLocalStorage()&&a.messageType===e.RongIMClient.MessageType.ReadReceiptRequestMessage&&O&&a.messageDirection==e.MessageDirection.SEND){var N=c._client.userId+a.content.messageUId+"SENT";e.RongIMClient._storageProvider.setItem(N,JSON.stringify({count:0,dealtime:a.sentTime,userIds:{}}))}else if(e.RongUtil.supportLocalStorage()&&a.messageType===e.RongIMClient.MessageType.ReadReceiptRequestMessage&&O){var A=c._client.userId+a.conversationType+a.targetId+"RECEIVED",w=JSON.parse(e.RongIMClient._storageProvider.getItem(A));if(w)if(a.senderUserId in w){if(!w[a.senderUserId].uIds||!w[a.senderUserId].uIds||-1!=w[a.senderUserId].uIds.indexOf(a.content.messageUId))return;w[a.senderUserId].uIds.push(a.content.messageUId),w[a.senderUserId].dealtime=a.sentTime,w[a.senderUserId].isResponse=!1,e.RongIMClient._storageProvider.setItem(A,JSON.stringify(w))}else{var P={uIds:[a.content.messageUId],dealtime:a.sentTime,isResponse:!1};w[a.senderUserId]=P,e.RongIMClient._storageProvider.setItem(A,JSON.stringify(w))}else{var L={};L[a.senderUserId]={uIds:[a.content.messageUId],dealtime:a.sentTime,isResponse:!1},e.RongIMClient._storageProvider.setItem(A,JSON.stringify(L))}}if(e.RongUtil.supportLocalStorage()&&a.messageType===e.RongIMClient.MessageType.ReadReceiptResponseMessage&&O){var U=a.content;(e.RongUtil.isUndefined(U)||e.RongUtil.isNull(U))&&(U=new e.ReadReceiptResponseMessage({}));var k,D=(U.receiptMessageDic||{})[c._client.userId];N="";if(a.receiptResponse||(a.receiptResponse={}),D){for(var x=[],B=0,j=D.length;B<j;B++)N=c._client.userId+D[B]+"SENT",(k=JSON.parse(e.RongIMClient._storageProvider.getItem(N)))&&!(a.senderUserId in k.userIds)&&(x.push(D[B]),k.count+=1,k.userIds[a.senderUserId]=a.sentTime,a.receiptResponse[D[B]]=k.count,e.RongIMClient._storageProvider.setItem(N,JSON.stringify(k)));U.receiptMessageDic[c._client.userId]=x,a.content=U}}if(e.RongIMClient._voipProvider&&["AcceptMessage","RingingMessage","HungupMessage","InviteMessage","MediaModifyMessage","MemberModifyMessage"].indexOf(a.messageType)>-1)setTimeout((function(){e.RongIMClient._voipProvider.onReceived(a)}));else{var V=o||0,H=!p;try{this._onReceived(a,V,H)}catch(e){console.error(e)}}}}}}}},t.prototype.handleMessage=function(t){if(t)switch(t&&e.RongUtil.isObject(t)&&t.timestamp&&e.MessageUtil.setDeltaTime(t.timestamp),t._name){case"ConnAckMessage":c._client.handler.connectCallback.process(t.getStatus(),t.getUserId(),t.getTimestamp());break;case"PublishMessage":t.getSyncMsg()||0==t.getQos()||c._client.channel.writeAndFlush(new e.PubAckMessage(t.getMessageId())),t.getSyncMsg()&&!e.RongIMClient._memoryStore.depend.isPolling?c._client.handler.syncMsgMap[t.getMessageId()]=t:c._client.handler.onReceived(t);break;case"QueryAckMessage":0!=t.getQos()&&c._client.channel.writeAndFlush(new e.QueryConMessage(t.getMessageId()));var n=c._client.handler.map[t.getMessageId()];n&&(n.Callback.process(t.getStatus(),t.getData(),t.getDate(),n.Message),delete c._client.handler.map[t.getMessageId()]);break;case"PubAckMessage":var r=c._client.handler.map[t.getMessageId()];if(r)r.Callback.process(t.getStatus()||0,t.getMessageUId(),t.getTimestamp(),r.Message,t.getMessageId()),delete c._client.handler.map[t.getMessageId()];else{var o=e.Bridge._client.userId;e.RongIMClient._storageProvider.setItem("last_sentTime_"+o,t.timestamp),c._client.handler.onReceived(c._client.handler.syncMsgMap[t.messageId],t,null,null,!0),delete c._client.handler.syncMsgMap[t.getMessageId()]}break;case"PingRespMessage":e.RongIMClient._memoryStore.isFirstPingMsg?e.RongIMClient._memoryStore.isFirstPingMsg=!1:c._client.pauseTimer();break;case"DisconnectMessage":c._client.channel.disconnect(t.getStatus());break;default:e.Logger.writeLog({tag:e.LoggerTag.IM.L_CATCH_UNKNOWN_MSG_E,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{action:"MessageHandler -> handleMessage",msg:t}})}},t}();e.MessageHandler=u}(RongIMLib||(RongIMLib={}));var __extends=this&&this.__extends||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);function r(){this.constructor=e}e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib;!function(e){var t=function(){function t(e){this.timeout=null,this.onError=null,e&&"number"==typeof e?this.timeoutMillis=e:(this.timeoutMillis=3e4,this.onError=e)}return t.prototype.resumeTimer=function(){var e=this;this.timeoutMillis>0&&!this.timeout&&(this.timeout=setTimeout((function(){e.readTimeOut(!0)}),this.timeoutMillis))},t.prototype.pauseTimer=function(){this.timeout&&(clearTimeout(this.timeout),this.timeout=null)},t.prototype.readTimeOut=function(t){t&&this.onError?this.onError(e.ErrorCode.TIMEOUT):this.pauseTimer()},t}();e.MessageCallback=t;var n=function(){function t(){this.publicServiceList=[]}return t.getInstance=function(){return new t},t.prototype.pottingProfile=function(t){var n;this.profile=new e.PublicServiceProfile,n=JSON.parse(t.extra),this.profile.isGlobal=n.isGlobal,this.profile.introduction=n.introduction,this.profile.menu=n.menu,this.profile.hasFollowed=n.follow,this.profile.publicServiceId=t.mpid,this.profile.name=t.name,this.profile.portraitUri=t.portraitUrl,this.profile.conversationType="mc"==t.type?e.ConversationType.APP_PUBLIC_SERVICE:e.ConversationType.PUBLIC_SERVICE,this.publicServiceList.push(this.profile)},t.prototype.mapping=function(t,n){switch(n){case"GetUserInfoOutput":return new e.UserInfo(t.userId,t.userName,t.userPortrait);case"GetQNupTokenOutput":return{deadline:e.MessageUtil.int64ToTimestamp(t.deadline),token:t.token,bosToken:t.bosToken,bosDate:t.bosDate,path:t.path};case"GetQNdownloadUrlOutput":return{downloadUrl:t.downloadUrl};case"CreateDiscussionOutput":return t.id;case"ChannelInfoOutput":var r=new e.Discussion;return r.creatorId=t.adminUserId,r.id=t.channelId,r.memberIdList=t.firstTenUserIds,r.name=t.channelName,r.isOpen=t.openStatus,r;case"GroupHashOutput":return t.result;case"QueryBlackListOutput":return t.userIds;case"SearchMpOutput":case"PullMpOutput":if(t.info){var o=this;Array.forEach(t.info,(function(e){setTimeout((function(){o.pottingProfile(e)}),100)}))}return this.publicServiceList;default:return t}},t}();e.CallbackMapping=n;var r=function(n){function r(e,t){n.call(this,t),this._cb=e,this._timeout=t}return __extends(r,n),r.prototype.process=function(t,n,r,o,i){if(this.readTimeOut(),0==t){if(o&&(o.setSentStatus=t),e.RongIMClient._memoryStore.isPullFinished){var s=e.Bridge._client.userId;e.RongIMClient._storageProvider.setItem("last_sentTime_"+s,r),e.SyncTimeUtil.set({messageDirection:e.MessageDirection.SEND,sentTime:r})}this._cb({messageUId:n,timestamp:r,messageId:i})}else this._timeout(t,{messageUId:n,sentTime:r})},r.prototype.readTimeOut=function(e){t.prototype.readTimeOut.call(this,e)},r}(t);e.PublishCallback=r;var o=function(r){function o(e,t){r.call(this,t),this._cb=e,this._timeout=t}return __extends(o,r),o.prototype.process=function(t,r,o,i){if(this.readTimeOut(),i&&r&&0==t){try{r=n.getInstance().mapping(e.RongIMClient.Protobuf[i].decode(r),i)}catch(t){return this._timeout(e.ErrorCode.UNKNOWN),void e.Logger.writeLog({tag:e.LoggerTag.IM.L_DECODE_QUERY_DATA_E,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{stack:t,msg:"QueryCallback -> process"}})}"GetUserInfoOutput"==i&&(e.Client.userInfoMapping[r.userId]=r),this._cb(r)}else t>0?this._timeout(t):this._cb(t)},o.prototype.readTimeOut=function(e){t.prototype.readTimeOut.call(this,e)},o}(t);e.QueryCallback=o;var i=function(n){function r(e,t,r){n.call(this,t),this._client=r,this._cb=e,this._timeout=t}return __extends(r,n),r.prototype.process=function(t,n,r){if(this.readTimeOut(),0==t){this._client.userId=n;var o=this;if(!e.RongIMClient._memoryStore.depend.isPolling&&e.RongIMClient._memoryStore.isFirstPingMsg?e.Bridge._client.checkSocket({onSuccess:function(){e.RongIMClient.isNotPullMsg||o._client.syncTime(void 0,void 0,void 0,!0)},onError:function(){e.RongIMClient._memoryStore.isFirstPingMsg=!1,e.RongIMClient.getInstance().disconnect(),e.RongIMClient.connect(e.RongIMClient._memoryStore.token,e.RongIMClient._memoryStore.callback)}}):e.RongIMClient.isNotPullMsg||o._client.syncTime(void 0,void 0,void 0,!0),e.Bridge._client.channel.socket.fire("StatusChanged",0),this._client.reconnectObj.onSuccess)this._client.reconnectObj.onSuccess(n),delete this._client.reconnectObj.onSuccess;else{(a=this)._cb(n);var i=e.RongIMClient._memoryStore.depend,s=i.maxConversationCount;i.isNotifyConversationList&&e.RongIMClient._dataAccessProvider.getRemoteConversationList({onSuccess:function(t){e.RongIMClient._dataAccessProvider.Conversation._notify(t)},onError:function(e){console.log("åé¨è·ååè¡¨å¤±è´¥: %d",e)}},null,s)}e.RongIMClient._memoryStore.connectAckTime=r,e.MessageUtil.setDeltaTime(r)}else if(6==t){e.RongIMClient.getInstance().disconnect();var a,c=(a=this)._client,u=c.appId,l=c.token;(new e.Navigation).requestNavi(l,u,(function(){c.clearHeartbeat();var t=new e.Client(l,u);e.Bridge._client=t,t.__init((function(){"websocket"==e.Transportations._TransportType&&t.keepLive()}))}),a._timeout,!1)}else e.Bridge._client.channel.socket.socket._status=t,this._client.reconnectObj.onError?(this._client.reconnectObj.onError(t),delete this._client.reconnectObj.onError):this._timeout(t)},r.prototype.readTimeOut=function(e){t.prototype.readTimeOut.call(this,e)},r}(t);e.ConnectAck=i}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(){}return t.clear=function(){var t=e.RongIMClient._storageProvider;t.removeItem("rc_uid"),t.removeItem("serverIndex"),t.removeItem("rongSDK")},t.prototype.getNaviSuccess=function(n,r){var o=e.RongIMClient._storageProvider;o.setItem("fullnavi",JSON.stringify(n));var i=e.RongUtil.getUrlProtocol(r);e.RongIMClient.setProtocol(i),o.setItem(t.StoreProtocolKey,i);var s=n.server;s&&(s+=",");var a=n.backupServer||"",c=e.RongUtil.tplEngine("{server}{backupServer}",{server:s,backupServer:a});c=c.split(","),o.setItem("servers",JSON.stringify(c));var u=e.RongIMClient._memoryStore.token,l=e.InnerUtil.getUId(u);o.setItem("rc_uid",l);var d=n.userId;if(o.setItem("current_user",d),o.setItem("navi_time",e.RongUtil.getTimestamp()),n.voipCallInfo){var f=JSON.parse(n.voipCallInfo);e.RongIMClient._memoryStore.voipStategy=f.strategy,o.setItem("voipStrategy",f.strategy)}var p={qiniu:n.uploadServer||"",bos:n.bosAddr||""};o.setItem("upload_domains",JSON.stringify(p));var g=n.openMp;o.setItem("openMp"+l,g),e.RongIMClient._memoryStore.depend.openMp=g},t.prototype.connect=function(t,n,r){var o=e.RongIMClient._storageProvider.getItem("appId");o&&o!=t&&(e.RongIMClient._storageProvider.clearItem(),e.RongIMClient._storageProvider.setItem("appId",t)),o||e.RongIMClient._storageProvider.setItem("appId",t);var i=new e.Client(n,t);return this.requestNavi(n,t,(function(){i.connect(r)}),r.onError,!0),i},t.prototype.requestNavi=function(n,r,o,i,s){if(s){var a=md5(n).slice(8,16),c=e.RongIMClient._storageProvider,u=c.getItem("rongSDK"),l=e.Transportations._TransportType==u,d=c.getItem("rc_uid")==a,f=c.getItem("servers"),p="string"==typeof f,g=e.RongUtil.getTimestamp()-(Number(c.getItem("navi_time"))||0)<e.RongIMClient.NavExpiredTime;if(d&&l&&p&&e.RongUtil.hasValidWsUrl(f)&&g){e.RongIMClient._memoryStore.voipStategy=c.getItem("voipStrategy");var h=c.getItem("openMp"+a);e.RongIMClient._memoryStore.depend.openMp=h;var m=c.getItem(t.StoreProtocolKey);return m&&e.RongIMClient.setProtocol(m),void o()}}t.clear(),e.RongIMClient.invalidWsUrls=[];var v=this,y=e.Channel._ConnectionStatusListener,C=e.RongIMClient._memoryStore.depend,R=C.navigaters,T=C.naviTimeout,I=C.maxNaviRetry,S=C.isNaviJSONP,E=C.isWSPingJSONP,M=!e.RongUtil.isSupportRequestHeaders()||S?v.requestJSONP:v.request,_=new e.Timer({timeout:T}),b=1,O=new e.IndexTools({items:R,onwheel:function(){b+=1}}),N=function(){if(b>=I){if(S&&E)return i(e.ConnectionStatus.RESPONSE_NAVI_ERROR);var t=e.FixedNaviRespHandler.getResp(),s=R[0];return v.getNaviSuccess(t,e.RongUtil.getValidNavi(s)),void o()}var a=O.get(),c=R[a];c=e.RongUtil.getValidNavi(c),O.add(),e.LoggerUtil.recordFatalLogOfNavi(b,R);y.onChanged(e.ConnectionStatus.REQUEST_NAVI);var u=M.call(v,c,r,n,(function(t){_.pause(),y.onChanged(e.ConnectionStatus.RESPONSE_NAVI);var n=t.code;e.RongUtil.isEqual(n,200)&&(v.getNaviSuccess(t,c),o()),e.RongUtil.isEqual(n,401)&&i(e.ConnectionState.TOKEN_INCORRECT),e.RongUtil.isEqual(n,403)&&y.onChanged(e.ConnectionStatus.APPKEY_IS_FAKE)}),(function(t){e.RongUtil.isEqual(t,0)||(_.pause(),y.onChanged(e.ConnectionStatus.RESPONSE_NAVI_ERROR),N())}));_.resume((function(){y.onChanged(e.ConnectionStatus.RESPONSE_NAVI_TIMEOUT),u.abort(),N()}))};N(),e.Logger.loggerCache.isNewNavi=!0},t.prototype.getPath=function(t,n,r,o){var i=e.RongIMClient._memoryStore.depend.isPolling?"cometnavi":"navi";r=encodeURIComponent(r);var s=e.RongIMClient.sdkver,a=e.RongUtil.getTimestamp();return e.RongUtil.tplEngine("{navi}/{path}.js?appId={appId}&token={token}&callBack={callback}&v={sdkver}&r={random}",{navi:t,path:i,appId:n,token:r,sdkver:s,random:a,callback:o})},t.prototype.request=function(t,n,r,o,i){var s=this.getPath(t,n,r,"getServerEndpoint");return e.Logger.writeLog({tag:e.LoggerTag.IM.L_GETN_T,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{url:s,requestType:"HTTP"}}),e.RongUtil.request({url:s,success:function(t){var n=(t=t.replace("getServerEndpoint(","").replace(");","")).lastIndexOf(")");n==t.length-1&&(t=t.substr(0,n)),t=JSON.parse(t),e.Logger.writeLog({tag:e.LoggerTag.IM.L_GETN_R,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{code:0,result:t,url:s,requestType:"HTTP"}}),o(t)},error:function(t,n){401==t||403==t?o(JSON.parse(n)):i(t),e.Logger.writeLog({tag:e.LoggerTag.IM.L_GETN_R,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{code:t,result:n,url:s,requestType:"HTTP"}})}})},t.prototype.requestJSONP=function(t,n,r,o,i){e.Logger.writeLog({tag:e.LoggerTag.IM.L_GETN_T,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{url:a,requestType:"JSONP"}});var s=function(t,n){e.Logger.writeLog({tag:e.LoggerTag.IM.L_GETN_R,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{code:t,result:n,url:a,requestType:"JSONP"}})};window.getServerEndpoint=function(t){var n=t.code;if(s(n,t),200!==n)return i(e.ConnectionState.TOKEN_INCORRECT);o(t)};var a=this.getPath(t,n,r,"getServerEndpoint"),c=document.createElement("script");c.src=a,document.body.appendChild(c),c.onerror=function(){i(e.ConnectionState.TOKEN_INCORRECT),s(e.ConnectionState.TOKEN_INCORRECT,{})}},t.StoreProtocolKey="navprotocol",t.Endpoint=new Object,t}();e.Navigation=t}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(t){this._name="BaseMessage",this.lengthSize=0,t instanceof e.Header?this._header=t:this._header=new e.Header(t,!1,e.Qos.AT_MOST_ONCE,!1)}return t.prototype.read=function(e,t){this.readMessage(e,t)},t.prototype.write=function(t){var n=(new e.BinaryHelper).convertStream(t);return this._headerCode=this.getHeaderFlag(),n.write(this._headerCode),this.writeMessage(n),n},t.prototype.getHeaderFlag=function(){return this._header.encode()},t.prototype.getLengthSize=function(){return this.lengthSize},t.prototype.toBytes=function(){return this.write([]).getBytesArray()},t.prototype.isRetained=function(){return this._header.retain},t.prototype.setRetained=function(e){this._header.retain=e},t.prototype.setQos=function(t){this._header.qos="[object Object]"==Object.prototype.toString.call(t)?t:e.Qos[t]},t.prototype.setDup=function(e){this._header.dup=e},t.prototype.isDup=function(){return this._header.dup},t.prototype.getType=function(){return this._header.type},t.prototype.getQos=function(){return this._header.qos},t.prototype.messageLength=function(){return 0},t.prototype.writeMessage=function(e){},t.prototype.readMessage=function(e,t){},t.prototype.init=function(e){var t,n;for(n in e)e.hasOwnProperty(n)&&(t=n.replace(/^\w/,(function(e){var t=e.charCodeAt(0);return"set"+(t>=97?String.fromCharCode(-33&t):e)})))in this&&("status"==n?this[t](disconnectStatus[e[n]]?disconnectStatus[e[n]]:e[n]):this[t](e[n]))},t}();e.BaseMessage=t;var n=function(t){function n(n){switch(t.call(this,0==arguments.length||3==arguments.length?e.Type.CONNECT:arguments[0]),this._name="ConnectMessage",this.CONNECT_HEADER_SIZE=12,this.protocolId="RCloud",this.binaryHelper=new e.BinaryHelper,this.protocolVersion=3,arguments.length){case 0:case 1:case 3:if(!arguments[0]||arguments[0].length>64)throw new Error("ConnectMessage:Client Id cannot be null and must be at most 64 characters long: "+arguments[0]);this.clientId=arguments[0],this.cleanSession=arguments[1],this.keepAlive=arguments[2]}}return __extends(n,t),n.prototype.messageLength=function(){var e=this.binaryHelper.toMQttString(this.clientId).length;return e+=this.binaryHelper.toMQttString(this.willTopic).length,e+=this.binaryHelper.toMQttString(this.will).length,e+=this.binaryHelper.toMQttString(this.appId).length,(e+=this.binaryHelper.toMQttString(this.token).length)+this.CONNECT_HEADER_SIZE},n.prototype.readMessage=function(e){this.protocolId=e.readUTF(),this.protocolVersion=e.readByte();var t=e.readByte();if(this.hasAppId=(128&t)>0,this.hasToken=(64&t)>0,this.retainWill=(32&t)>0,this.willQos=t>>3&3,this.hasWill=(4&t)>0,this.cleanSession=(32&t)>0,this.keepAlive=256*e.read()+e.read(),this.clientId=e.readUTF(),this.hasWill&&(this.willTopic=e.readUTF(),this.will=e.readUTF()),this.hasAppId)try{this.appId=e.readUTF()}catch(e){throw new Error(e)}if(this.hasToken)try{this.token=e.readUTF()}catch(e){throw new Error(e)}return e},n.prototype.writeMessage=function(e){var t=this.binaryHelper.convertStream(e);t.writeUTF(this.protocolId),t.write(this.protocolVersion);var n=this.cleanSession?2:0;return n|=this.hasWill?4:0,n|=this.willQos?this.willQos>>3:0,n|=this.retainWill?32:0,n|=this.hasToken?64:0,n|=this.hasAppId?128:0,t.write(n),t.writeChar(this.keepAlive),t.writeUTF(this.clientId),this.hasWill&&(t.writeUTF(this.willTopic),t.writeUTF(this.will)),this.hasAppId&&t.writeUTF(this.appId),this.hasToken&&t.writeUTF(this.token),t},n}(t);e.ConnectMessage=n;var r=function(t){function n(n){t.call(this,0==arguments.length?e.Type.CONNACK:1==arguments.length?arguments[0]instanceof e.Header?arguments[0]:e.Type.CONNACK:null),this._name="ConnAckMessage",this.MESSAGE_LENGTH=2,this.binaryHelper=new e.BinaryHelper;var r=this;switch(arguments.length){case 0:case 1:if(!(arguments[0]instanceof e.Header)&&arguments[0]in e.ConnectionState){if(null==arguments[0])throw new Error("ConnAckMessage:The status of ConnAskMessage can't be null");r.setStatus(arguments[0])}}}return __extends(n,t),n.prototype.messageLength=function(){var e=this.MESSAGE_LENGTH;return this.userId&&(e+=this.binaryHelper.toMQttString(this.userId).length),e},n.prototype.readMessage=function(e,t){e.read();var n=+e.read();if(!(n>=0&&n<=12))throw new Error("Unsupported CONNACK code:"+n);if(this.setStatus(n),t>this.MESSAGE_LENGTH){this.setUserId(e.readUTF());e.readUTF();var r=e.readLong();this.setTimestamp(r)}},n.prototype.writeMessage=function(e){var t=this.binaryHelper.convertStream(e);switch(t.write(128),+status){case 0:case 1:case 2:case 5:case 6:t.write(+status);break;case 3:case 4:t.write(3);break;default:throw new Error("Unsupported CONNACK code:"+status)}return this.userId&&t.writeUTF(this.userId),t},n.prototype.setStatus=function(e){this.status=e},n.prototype.setUserId=function(e){this.userId=e},n.prototype.getStatus=function(){return this.status},n.prototype.getUserId=function(){return this.userId},n.prototype.setTimestamp=function(e){this.timestrap=e},n.prototype.getTimestamp=function(){return this.timestrap},n}(t);e.ConnAckMessage=r;var o=function(t){function n(n){t.call(this,n instanceof e.Header?n:e.Type.DISCONNECT),this._name="DisconnectMessage",this.MESSAGE_LENGTH=2,this.binaryHelper=new e.BinaryHelper,n instanceof e.Header||n in e.ConnectionStatus&&(this.status=n)}return __extends(n,t),n.prototype.messageLength=function(){return this.MESSAGE_LENGTH},n.prototype.readMessage=function(e){e.read();var t=+e.read();if(!(t>=0&&t<=5))throw new Error("Unsupported CONNACK code:"+t);this.setStatus(disconnectStatus[t]?disconnectStatus[t]:t)},n.prototype.writeMessage=function(e){var t=this.binaryHelper.convertStream(e);if(t.write(0),!(+status>=1&&+status<=3))throw new Error("Unsupported CONNACK code:"+status);t.write(+status-1)},n.prototype.setStatus=function(e){this.status=e},n.prototype.getStatus=function(){return this.status},n}(t);e.DisconnectMessage=o;var i=function(t){function n(n){t.call(this,n&&n instanceof e.Header?n:e.Type.PINGREQ),this._name="PingReqMessage"}return __extends(n,t),n}(t);e.PingReqMessage=i;var s=function(t){function n(n){t.call(this,n&&n instanceof e.Header?n:e.Type.PINGRESP),this._name="PingRespMessage"}return __extends(n,t),n}(t);e.PingRespMessage=s;var a=function(t){function n(n){t.call(this,n),this._name="RetryableMessage",this.binaryHelper=new e.BinaryHelper}return __extends(n,t),n.prototype.messageLength=function(){return 2},n.prototype.writeMessage=function(e){var t=this.binaryHelper.convertStream(e),n=this.getMessageId(),r=255&n,o=(65280&n)>>8;return t.write(o),t.write(r),t},n.prototype.readMessage=function(e,t){var n=256*e.read()+e.read();this.setMessageId(parseInt(n,10))},n.prototype.setMessageId=function(e){this.messageId=e},n.prototype.getMessageId=function(){return this.messageId},n}(t);e.RetryableMessage=a;var c=function(t){function n(n){t.call(this,n instanceof e.Header?n:e.Type.PUBACK),this.msgLen=2,this.date=0,this.millisecond=0,this.timestamp=0,this.binaryHelper=new e.BinaryHelper,this._name="PubAckMessage",n instanceof e.Header||t.prototype.setMessageId.call(this,n)}return __extends(n,t),n.prototype.messageLength=function(){return this.msgLen},n.prototype.writeMessage=function(e){var t=this.binaryHelper.convertStream(e);a.prototype.writeMessage.call(this,t)},n.prototype.readMessage=function(e,t){a.prototype.readMessage.call(this,e),this.date=e.readInt(),this.status=256*e.read()+e.read(),this.millisecond=256*e.read()+e.read(),this.timestamp=1e3*this.date+this.millisecond,this.messageUId=e.readUTF()},n.prototype.setStatus=function(e){this.status=e},n.prototype.setTimestamp=function(e){this.timestamp=e},n.prototype.setMessageUId=function(e){this.messageUId=e},n.prototype.getStatus=function(){return this.status},n.prototype.getDate=function(){return this.date},n.prototype.getTimestamp=function(){return this.timestamp},n.prototype.getMessageUId=function(){return this.messageUId},n}(a);e.PubAckMessage=c;var u=function(t){function n(n,r,o){t.call(this,1==arguments.length&&n instanceof e.Header?n:3==arguments.length?e.Type.PUBLISH:0),this._name="PublishMessage",this.binaryHelper=new e.BinaryHelper,this.syncMsg=!1,3==arguments.length&&(this.topic=n,this.targetId=o,this.data="string"==typeof r?this.binaryHelper.toMQttString(r):r)}return __extends(n,t),n.prototype.messageLength=function(){var e=10;return e+=this.binaryHelper.toMQttString(this.topic).length,e+=this.binaryHelper.toMQttString(this.targetId).length,e+=this.data.length},n.prototype.writeMessage=function(e){var t=this.binaryHelper.convertStream(e);t.writeUTF(this.topic),t.writeUTF(this.targetId),a.prototype.writeMessage.apply(this,arguments),t.write(this.data)},n.prototype.readMessage=function(e,t){var n=6;this.date=e.readInt(),this.topic=e.readUTF(),n+=this.binaryHelper.toMQttString(this.topic).length,this.targetId=e.readUTF(),n+=this.binaryHelper.toMQttString(this.targetId).length,a.prototype.readMessage.apply(this,arguments),this.data=new Array(t-n),this.data=e.read(this.data)},n.prototype.setTopic=function(e){this.topic=e},n.prototype.setData=function(e){this.data=e},n.prototype.setTargetId=function(e){this.targetId=e},n.prototype.setDate=function(e){this.date=e},n.prototype.setSyncMsg=function(e){this.syncMsg=e},n.prototype.getSyncMsg=function(){return this.syncMsg},n.prototype.getTopic=function(){return this.topic},n.prototype.getData=function(){return this.data},n.prototype.getTargetId=function(){return this.targetId},n.prototype.getDate=function(){return this.date},n}(a);e.PublishMessage=u;var l=function(t){function n(n,r,o){t.call(this,n instanceof e.Header?n:3==arguments.length?e.Type.QUERY:null),this.binaryHelper=new e.BinaryHelper,this._name="QueryMessage",3==arguments.length&&(this.data="string"==typeof r?this.binaryHelper.toMQttString(r):r,this.topic=n,this.targetId=o)}return __extends(n,t),n.prototype.messageLength=function(){var e=0;return e+=this.binaryHelper.toMQttString(this.topic).length,e+=this.binaryHelper.toMQttString(this.targetId).length,e+=2,e+=this.data.length},n.prototype.writeMessage=function(e){var t=this.binaryHelper.convertStream(e);t.writeUTF(this.topic),t.writeUTF(this.targetId),a.prototype.writeMessage.call(this,t),t.write(this.data)},n.prototype.readMessage=function(e,t){var n=0;this.topic=e.readUTF(),this.targetId=e.readUTF(),n+=this.binaryHelper.toMQttString(this.topic).length,n+=this.binaryHelper.toMQttString(this.targetId).length,this.readMessage.apply(this,arguments),n+=2,this.data=new Array(t-n),e.read(this.data)},n.prototype.setTopic=function(e){this.topic=e},n.prototype.setData=function(e){this.data=e},n.prototype.setTargetId=function(e){this.targetId=e},n.prototype.getTopic=function(){return this.topic},n.prototype.getData=function(){return this.data},n.prototype.getTargetId=function(){return this.targetId},n}(a);e.QueryMessage=l;var d=function(t){function n(n){t.call(this,n instanceof e.Header?n:e.Type.QUERYCON),this._name="QueryConMessage",n instanceof e.Header||t.prototype.setMessageId.call(this,n)}return __extends(n,t),n}(a);e.QueryConMessage=d;var f=function(t){function n(n){t.call(this,n),this._name="QueryAckMessage",this.binaryHelper=new e.BinaryHelper}return __extends(n,t),n.prototype.readMessage=function(e,t){a.prototype.readMessage.call(this,e),this.date=e.readInt(),this.setStatus(256*e.read()+e.read()),t>0&&(this.data=new Array(t-8),this.data=e.read(this.data))},n.prototype.getData=function(){return this.data},n.prototype.getStatus=function(){return this.status},n.prototype.getDate=function(){return this.date},n.prototype.setDate=function(e){this.date=e},n.prototype.setStatus=function(e){this.status=e},n.prototype.setData=function(e){this.data=e},n}(a);e.QueryAckMessage=f}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(t){var n=new e.BinaryHelper;this.out=n.convertStream(t)}return t.prototype.writeMessage=function(t){t instanceof e.BaseMessage&&t.write(this.out)},t}();e.MessageOutputStream=t;var n=function(){function t(t,n){if(n)this.flags=t.headerCode;else{var r=(new e.BinaryHelper).convertStream(t);this.flags=r.readByte(),this._in=r}this.header=new e.Header(this.flags),this.isPolling=n,this.In=t}return t.prototype.readMessage=function(){switch(this.header.getType()){case 1:this.msg=new e.ConnectMessage(this.header);break;case 2:this.msg=new e.ConnAckMessage(this.header);break;case 3:this.msg=new e.PublishMessage(this.header),this.msg.setSyncMsg(this.header.getSyncMsg());break;case 4:this.msg=new e.PubAckMessage(this.header);break;case 5:this.msg=new e.QueryMessage(this.header);break;case 6:this.msg=new e.QueryAckMessage(this.header);break;case 7:this.msg=new e.QueryConMessage(this.header);break;case 9:case 11:case 13:this.msg=new e.PingRespMessage(this.header);break;case 8:case 10:case 12:this.msg=new e.PingReqMessage(this.header);break;case 14:this.msg=new e.DisconnectMessage(this.header);break;default:throw new Error("No support for deserializing "+this.header.getType()+" messages")}return this.isPolling?this.msg.init(this.In):this.msg.read(this._in,this.In.length-1),this.msg},t}();e.MessageInputStream=n;var r=function(){function t(t,n,r,o){this.retain=!1,this.qos=e.Qos.AT_LEAST_ONCE,this.dup=!1,this.syncMsg=!1,t&&+t==t&&1==arguments.length?(this.retain=(1&t)>0,this.qos=(6&t)>>1,this.dup=(8&t)>0,this.type=t>>4&15,this.syncMsg=8==(8&t)):(this.type=t,this.retain=n,this.qos=r,this.dup=o)}return t.prototype.getSyncMsg=function(){return this.syncMsg},t.prototype.getType=function(){return this.type},t.prototype.encode=function(){switch(this.qos){case e.Qos[0]:this.qos=e.Qos.AT_MOST_ONCE;break;case e.Qos[1]:this.qos=e.Qos.AT_LEAST_ONCE;break;case e.Qos[2]:this.qos=e.Qos.EXACTLY_ONCE;break;case e.Qos[3]:this.qos=e.Qos.DEFAULT}var t=this.type<<4;return t|=this.retain?1:0,t|=this.qos<<1,t|=this.dup?8:0},t.prototype.toString=function(){return"Header [type="+this.type+",retain="+this.retain+",qos="+this.qos+",dup="+this.dup+"]"},t}();e.Header=r;var o=function(){function e(){}return e.prototype.writeUTF=function(e,t){for(var n=[],r=0,o=0,i=e.length;o<i;o++){var s=e.charCodeAt(o);s>=0&&s<=127?(r+=1,n.push(s)):s>=128&&s<=2047?(r+=2,n.push(192|31&s>>6),n.push(128|63&s)):s>=2048&&s<=65535&&(r+=3,n.push(224|15&s>>12),n.push(128|63&s>>6),n.push(128|63&s))}for(o=0,i=n.length;o<i;o++)n[o]>255&&(n[o]&=255);return t?n:r<=255?[0,r].concat(n):[r>>8,255&r].concat(n)},e.prototype.readUTF=function(e){if("[object String]"==Object.prototype.toString.call(e))return e;for(var t="",n=e,r=0,o=n.length;r<o;r++){n[r]<0&&(n[r]+=256);var i=n[r].toString(2),s=i.match(/^1+?(?=0)/);if(s&&8==i.length){for(var a=s[0].length,c="",u=0;u<a;u++)c+=n[u+r].toString(2).slice(2);t+=String.fromCharCode(parseInt(c,2)),r+=a-1}else t+=String.fromCharCode(n[r])}return t},e.prototype.convertStream=function(e){return e instanceof i?e:new i(e)},e.prototype.toMQttString=function(e){return this.writeUTF(e)},e}();e.BinaryHelper=o;var i=function(){function e(e){this.position=0,this.writen=0,this.poolLen=0,this.binaryHelper=new o,this.pool=e,this.poolLen=e.length}return e.prototype.check=function(){return this.position>=this.pool.length},e.prototype.readInt=function(){if(this.check())return-1;for(var e="",t=0;t<4;t++){var n=this.pool[this.position++].toString(16);1==n.length&&(n="0"+n),e+=n.toString(16)}return parseInt(e,16)},e.prototype.readLong=function(){if(this.check())return-1;for(var e="",t=0;t<8;t++){var n=this.pool[this.position++].toString(16);1==n.length&&(n="0"+n),e+=n}return parseInt(e,16)},e.prototype.readTimestamp=function(){if(this.check())return-1;for(var e="",t=0;t<8;t++)e+=this.pool[this.position++].toString(16);return e=e.substring(2,8),parseInt(e,16)},e.prototype.readUTF=function(){if(this.check())return-1;var e=this.readByte()<<8|this.readByte();return this.binaryHelper.readUTF(this.pool.subarray(this.position,this.position+=e))},e.prototype.readByte=function(){if(this.check())return-1;var e=this.pool[this.position++];return e>255&&(e&=255),e},e.prototype.read=function(e){return e?this.pool.subarray(this.position,this.poolLen):this.readByte()},e.prototype.write=function(e){var t=e;if("[object array]"==Object.prototype.toString.call(t).toLowerCase())try{this.pool=this.pool.concat(t)}catch(e){[].push.apply(this.pool,t)}else+t==t&&(t>255&&(t&=255),this.pool.push(t),this.writen++);return t},e.prototype.writeChar=function(e){if(+e!=e)throw new Error("writeChar:arguments type is error");this.write(e>>8&255),this.write(255&e),this.writen+=2},e.prototype.writeUTF=function(e){var t=this.binaryHelper.writeUTF(e);[].push.apply(this.pool,t),this.writen+=t.length},e.prototype.toComplements=function(){for(var e=this.pool,t=0;t<this.poolLen;t++)e[t]>128&&(e[t]-=256);return e},e.prototype.getBytesArray=function(e){return e?this.toComplements():this.pool},e}();e.RongIMStream=i}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(e){return this.connected=!1,this.isClose=!1,this.queue=[],this.empty=new Function,this._socket=e,this}return t.prototype.createTransport=function(t,n){if(!t)throw new Error("URL can't be empty");this.url=t;var r=e.RongIMClient._memoryStore.depend.wsScheme;return t=e.RongUtil.tplEngine("{wsScheme}{url}",{wsScheme:r,url:t}),this.socket=new WebSocket(t),this.socket.binaryType="arraybuffer",this.addEvent(),this.socket},t.prototype.send=function(t){if(this.connected||this.isClose){if(!this.isClose){var n=new e.RongIMStream([]);new e.MessageOutputStream(n).writeMessage(t);var r=n.getBytesArray(!0),o=new Int8Array(r);return this.socket.send(o.buffer),this}this._socket.fire("StatusChanged",e.ConnectionStatus.CONNECTION_CLOSED)}else this.queue.push(t)},t.prototype.onData=function(t){return e.MessageUtil.isArray(t)?this._socket.onMessage(new e.MessageInputStream(t).readMessage()):this._socket.onMessage(new e.MessageInputStream(e.MessageUtil.ArrayFormInput(t)).readMessage()),""},t.prototype.onClose=function(n){var r=this;if(r.isClose=!0,r.socket=this.empty,e.Bridge._client.clearHeartbeat(),1006!=n.code||this._status)r._status=0;else{var o=(new Date).getTime();if(!r.connectedTime||o-r.connectedTime<=t.MinConnectTime){var i=e.RongUtil.getUrlHost(r.url);e.RongIMClient.invalidWsUrls.push(i)}r._socket.fire("StatusChanged",e.ConnectionStatus.NETWORK_UNAVAILABLE)}},t.prototype.onError=function(t){throw this._socket.fire("StatusChanged",e.ConnectionStatus.WEBSOCKET_ERROR),e.Logger.writeLog({tag:e.LoggerTag.IM.L_WS_ERR_E,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{error:e.ConnectionStatus.WEBSOCKET_ERROR,msg:"SocketTransportation -> onError"}}),new Error(t)},t.prototype.addEvent=function(){var e=this;e.socket.onopen=function(){e.connected=!0,e.isClose=!1,e.doQueue(),e._socket.fire("connect"),e.connectedTime=(new Date).getTime()},e.socket.onmessage=function(t){"string"==typeof t.data?e.onData(t.data.split(",")):e.onData(t.data)},e.socket.onerror=function(t){e.onError(t)},e.socket.onclose=function(t){e.onClose(t)}},t.prototype.doQueue=function(){for(var e=0,t=this.queue.length;e<t;e++)this.send(this.queue[e])},t.prototype.disconnect=function(e){this.socket.readyState&&(this.isClose=!0,e&&(this._status=e),this.socket.close())},t.prototype.reconnect=function(){this.disconnect(),this.createTransport(this.url)},t.prototype.close=function(){this.socket.close()},t.MinConnectTime=5e3,t}();e.SocketTransportation=t}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(e){return this.empty=new Function,this.connected=!1,this.pid=+new Date+Math.random()+"",this.queue=[],this.socket=e,this}return t.prototype.createTransport=function(t,n){if(!t)throw new Error("Url is empty,Please check it!");this.url=t;var r=e.RongIMClient._storageProvider.getItem("sId"+e.Navigation.Endpoint.userId),o=this;return r?(setTimeout((function(){o.onSuccess('{"status":0,"userId":"'+e.Navigation.Endpoint.userId+'","headerCode":32,"messageId":0,"sessionid":"'+r+'"}'),o.connected=!0}),500),this):(this.getRequest(t,!0),this)},t.prototype.requestFactory=function(t,n,r){var o=this.XmlHttpRequest();return r&&(o.multipart=!0),o.open(n||"GET",e.RongIMClient._memoryStore.depend.protocol+t),"POST"==n&&"setRequestHeader"in o&&o.setRequestHeader("Content-type","application/x-www-form-urlencoded; charset=utf-8"),o},t.prototype.getRequest=function(t,n){var r=this;r.xhr=this.requestFactory(t+"&pid="+encodeURIComponent(r.pid),"GET");var o=new e.Timer({timeout:45e3});"onload"in r.xhr?(r.xhr.onload=function(){o.pause(),r.xhr.onload=r.empty,"lost params"==this.responseText?r.onError():r.onSuccess(this.responseText,n)},r.xhr.onerror=function(){o.pause(),r.disconnect()}):r.xhr.onreadystatechange=function(){o.pause(),4==r.xhr.readyState&&(r.xhr.onreadystatechange=r.empty,/^(200|202)$/.test(r.xhr.status)?r.onSuccess(r.xhr.responseText,n):/^(400|403)$/.test(r.xhr.status)?r.onError():r.disconnect())},o.resume((function(){r.onError()})),r.xhr.send()},t.prototype.send=function(t){var n=this,r=n.sendxhr=this.requestFactory(e.Navigation.Endpoint.host+"/websocket"+t.url+"&pid="+encodeURIComponent(n.pid),"POST");"onload"in r?(r.onload=function(){r.onload=n.empty,n.onData(r.responseText)},r.onerror=function(){r.onerror=n.empty}):r.onreadystatechange=function(){4==r.readyState&&(this.onreadystatechange=this.empty,/^(202|200)$/.test(r.status)&&n.onData(r.responseText))},r.send(JSON.stringify(t.data))},t.prototype.onData=function(t,n){if(t&&"lost params"!=t){var r=this,o=JSON.parse(t);return o.userId&&(e.Navigation.Endpoint.userId=o.userId),n&&e.RongIMClient._storageProvider.setItem("sId"+e.Navigation.Endpoint.userId,n),e.MessageUtil.isArray(o)||(o=[o]),Array.forEach(o,(function(t){r.socket.fire("message",new e.MessageInputStream(t,!0).readMessage())})),""}},t.prototype.XmlHttpRequest=function(){var e="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest;return"undefined"!=typeof XMLHttpRequest&&e?new XMLHttpRequest:"undefined"!=typeof XDomainRequest?new XDomainRequest:new ActiveXObject("Microsoft.XMLHTTP")},t.prototype.onClose=function(){this.xhr&&(this.xhr.onload?this.xhr.onreadystatechange=this.xhr.onload=this.empty:this.xhr.onreadystatechange=this.empty,this.xhr.abort(),this.xhr=null),this.sendxhr&&(this.sendxhr.onload?this.sendxhr.onreadystatechange=this.sendxhr.onload=this.empty:this.sendxhr.onreadystatechange=this.empty,this.sendxhr.abort(),this.sendxhr=null)},t.prototype.disconnect=function(){e.RongIMClient._storageProvider.removeItem("sId"+e.Navigation.Endpoint.userId),e.RongIMClient._storageProvider.removeItem(e.Navigation.Endpoint.userId+"msgId"),this.onClose()},t.prototype.reconnect=function(){this.disconnect(),this.createTransport(this.url)},t.prototype.onSuccess=function(t,n){var r=t.match(/"sessionid":"\S+?(?=")/);if(this.onData(t,r?r[0].slice(13):0),/"headerCode":-32,/.test(t))return e.RongIMClient._storageProvider.removeItem("sId"+e.Navigation.Endpoint.userId),void e.RongIMClient._storageProvider.removeItem(e.Navigation.Endpoint.userId+"msgId");this.getRequest(e.Navigation.Endpoint.host+"/pullmsg.js?sessionid="+e.RongIMClient._storageProvider.getItem("sId"+e.Navigation.Endpoint.userId)+"&timestrap="+encodeURIComponent((new Date).getTime()+Math.random()+"")),this.connected=!0,n&&this.socket.fire("connect")},t.prototype.onError=function(){if(e.RongIMClient._storageProvider.removeItem("sId"+e.Navigation.Endpoint.userId),e.RongIMClient._storageProvider.removeItem(e.Navigation.Endpoint.userId+"msgId"),this.onClose(),this.connected){this.connected=!1;var t=e.ConnectionStatus.NETWORK_UNAVAILABLE;this.socket.fire("disconnect",t)}},t.prototype.close=function(){this.xhr.abort(),this.sendxhr=null},t}();e.PollingTransportation=t}(RongIMLib||(RongIMLib={}));var typeMapping={"RC:TxtMsg":"TextMessage","RC:ImgMsg":"ImageMessage","RC:VcMsg":"VoiceMessage","RC:ImgTextMsg":"RichContentMessage","RC:ReferenceMsg":"ReferenceMessage","RC:FileMsg":"FileMessage","RC:HQVCMsg":"HQVoiceMessage","RC:GIFMsg":"GIFMessage","RC:SightMsg":"SightMessage","RC:LBSMsg":"LocationMessage","RC:InfoNtf":"InformationNotificationMessage","RC:ContactNtf":"ContactNotificationMessage","RC:ProfileNtf":"ProfileNotificationMessage","RC:CmdNtf":"CommandNotificationMessage","RC:DizNtf":"DiscussionNotificationMessage","RC:CmdMsg":"CommandMessage","RC:TypSts":"TypingStatusMessage","RC:CsChaR":"ChangeModeResponseMessage","RC:CsHsR":"HandShakeResponseMessage","RC:CsEnd":"TerminateMessage","RC:CsSp":"SuspendMessage","RC:CsUpdate":"CustomerStatusUpdateMessage","RC:ReadNtf":"ReadReceiptMessage","RC:VCAccept":"AcceptMessage","RC:VCRinging":"RingingMessage","RC:VCSummary":"SummaryMessage","RC:VCHangup":"HungupMessage","RC:VCInvite":"InviteMessage","RC:VCModifyMedia":"MediaModifyMessage","RC:VCModifyMem":"MemberModifyMessage","RC:CsContact":"CustomerContact","RC:PSImgTxtMsg":"PublicServiceRichContentMessage","RC:PSMultiImgTxtMsg":"PublicServiceMultiRichContentMessage","RC:GrpNtf":"GroupNotificationMessage","RC:PSCmd":"PublicServiceCommandMessage","RC:RcCmd":"RecallCommandMessage","RC:SRSMsg":"SyncReadStatusMessage","RC:RRReqMsg":"ReadReceiptRequestMessage","RC:RRRspMsg":"ReadReceiptResponseMessage","RCJrmf:RpMsg":"JrmfRedPacketMessage","RCJrmf:RpOpendMsg":"JrmfRedPacketOpenedMessage","RC:CombineMsg":"RCCombineMessage","RC:chrmKVNotiMsg":"ChrmKVNotificationMessage","RC:LogCmdMsg":"LogCommandMessage"},registerMessageTypeMapping={},HistoryMsgType={4:"qryCMsg",2:"qryDMsg",3:"qryGMsg",1:"qryPMsg",6:"qrySMsg",7:"qryPMsg",8:"qryPMsg",5:"qryCMsg"},disconnectStatus={1:6},RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib,RongIMLib;return function(e){var t=function(){function t(){}return t.isIncludeNavi=function(t){return-1!==e.RongUtil.indexOf(t,e.RongIMClient.NavMarkInToken)},t.getToken=function(n){if(t.isIncludeNavi(n)){var r=e.RongUtil.indexOf(n,e.RongIMClient.NavMarkInToken);n=n.substring(0,r+1)}return n},t.getNavsByToken=function(n,r){var o=t.isIncludeNavi(n),i=[];if(o){var s=e.RongUtil.indexOf(n,e.RongIMClient.NavMarkInToken),a=n.substring(s+1,n.length).split(e.RongIMClient.NavSeparatorInToken);e.RongUtil.forEach(a,(function(t){if(!e.RongUtil.isEmpty(t)){var n=e.RongUtil.formatProtoclPath({path:t,protocol:r,sub:!0});i.push(n)}}))}return i},t.getConversationKey=function(e,t){return e+"_"+t},t}();e.IMHandler=t;var n=function(){function t(){}return t._TransportType=e.Socket.WEBSOCKET,t}();e.Transportations=n;var r=function(){function t(){}return t.$getKey=function(t){var n=e.Bridge._client.userId,r=1==t.messageDirection?"send":"receive",o=e.RongIMClient._memoryStore.appKey;return e.RongUtil.tplEngine("{appkey}_{userId}_{direction}box",{appkey:o,userId:n,direction:r})},t.set=function(n){var r=t.$getKey(n),o=n.sentTime;e.RongIMClient._storageProvider.setItem(r,o),t._syncTimeCache[r]=o},t.get=function(){var n=t.$getKey({messageDirection:e.MessageDirection.SEND}),r=t.$getKey({messageDirection:e.MessageDirection.RECEIVE}),o=t._syncTimeCache,i=e.RongIMClient._storageProvider;return e.RongUtil.isEmpty(o)&&(o[n]=i.getItem(n),o[r]=i.getItem(r)),{sent:Number(o[n]||0),received:Number(o[r]||0)}},t._syncTimeCache={},t}();e.SyncTimeUtil=r;var o=function(){function t(){}return t.checkStorageSize=function(){return JSON.stringify(localStorage).length<468e4},t.getFirstKey=function(e){var t="";for(var n in e){t=n;break}return t},t.isEmpty=function(e){var t=!0;for(var n in e){t=!1;break}return t},t.ArrayForm=function(e){if("[object ArrayBuffer]"==Object.prototype.toString.call(e)){var t=new Int8Array(e);return[].slice.call(t)}return e},t.ArrayFormInput=function(e){return"[object ArrayBuffer]"==Object.prototype.toString.call(e)?new Uint8Array(e):e},t.indexOf=function(e,t,n){for(var r=e.length,o=n<0?Math.max(0,+n):n||0;o<r;o++)if(e[o]==t)return o;return-1},t.isArray=function(e){return"[object Array]"==Object.prototype.toString.call(e)},t.forEach=function(e,t){return[].forEach?function(e,t){[].forEach.call(e,t)}:function(e,t){for(var n=0;n<e.length;n++)t.call(e,e[n],n,e)}},t.remove=function(e,t){for(var n=0,r=e.length;n<r;n++)if(t(e[n]))return e.splice(n,1)[0];return null},t.int64ToTimestamp=function(e,t){if(void 0===e.low)return e;var n=e.low;n<0&&(n+=4294967296),n=n.toString(16);var r=parseInt(e.high.toString(16)+"00000000".replace(new RegExp("0{"+n.length+"}$"),n),16);return t?new Date(r):r},t.isDisableNotification=function(e){return Boolean(512&e)},t.messageParser=function(n,r,o){var i,s,a=new e.Message,c=n.content,u=n.classname,l=!1;try{e.RongIMClient._memoryStore.depend.isPolling?(s=(new e.BinaryHelper).readUTF(c.offset?t.ArrayForm(c.buffer).slice(c.offset,c.limit):c),i=JSON.parse(s)):(s=(new e.BinaryHelper).readUTF(c.offset?t.ArrayFormInput(c.buffer).subarray(c.offset,c.limit):c),i=JSON.parse(s))}catch(t){i=s,l=!0,e.Logger.writeLog({tag:e.LoggerTag.IM.L_PARSE_MSG_E,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{stack:t,msg:"MessageUtil -> messageParser"}})}var d=e;if(u in typeMapping){var f=typeMapping[u];a.content=new d[f](i),a.messageType=typeMapping[u]}else if(u in registerMessageTypeMapping){f=registerMessageTypeMapping[u];var p=new d.RongIMClient.RegisterMessage[f](i);a.content=l?p.decode(i):p,a.messageType=registerMessageTypeMapping[u]}else a.content=new e.UnknownMessage({content:i,objectName:u}),a.messageType="UnknownMessage";var g=t.int64ToTimestamp(n.dataTime);a.sentTime=g>0?g:+new Date,a.senderUserId=n.fromUserId,a.conversationType=n.type,n.fromUserId==e.Bridge._client.userId?a.targetId=n.groupId:a.targetId=/^[234]$/.test(n.type||n.getType())?n.groupId:a.senderUserId;var h=e.Bridge._client.userId;1==n.direction||a.senderUserId===h?(a.messageDirection=e.MessageDirection.SEND,a.senderUserId=e.Bridge._client.userId):a.messageDirection=e.MessageDirection.RECEIVE,a.senderUserId===h&&a.targetId===h&&(a.messageDirection=e.MessageDirection.RECEIVE);var m=(new Date).getTime();a.messageUId=n.msgId,a.receivedTime=e.MessageUtil.getCheckedTime(m),a.messageId=a.conversationType+"_"+~~(16777215*Math.random()),a.objectName=u,a.receivedStatus=e.ReceivedStatus.READ,2==(2&n.status)&&(a.receivedStatus=e.ReceivedStatus.RETRIEVED),a.offLineMessage=!!o,o||e.RongIMClient._memoryStore.connectAckTime>a.sentTime&&(a.offLineMessage=!0);try{var v=t.int64ToTimestamp(n.status);a.disableNotification=t.isDisableNotification(v)}catch(e){a.disableNotification=!1}return a},t.detectCMP=function(t){return t.error=t.fail,e.RongUtil.request(t)},t.setDeltaTime=function(t){try{e.RongIMClient._memoryStore.deltaTime=(new Date).getTime()-t}catch(e){}},t.getDeltaTime=function(){return(e.RongIMClient._memoryStore||{}).deltaTime||0},t.getCheckedTime=function(e){return e-t.getDeltaTime()},t.sign={converNum:1,msgNum:1,isMsgStart:!0,isConvStart:!0},t}();e.MessageUtil=o;var i=function(){function t(){}return t.init=function(){this.messageId=+(e.RongIMClient._storageProvider.getItem(e.Navigation.Endpoint.userId+"msgId")||e.RongIMClient._storageProvider.setItem(e.Navigation.Endpoint.userId+"msgId",0)||0)},t.messageIdPlus=function(t){return e.RongIMClient._memoryStore.depend.isPolling&&this.init(),this.messageId>=65535&&(this.messageId=0),this.messageId++,e.RongIMClient._memoryStore.depend.isPolling&&e.RongIMClient._storageProvider.setItem(e.Navigation.Endpoint.userId+"msgId",this.messageId),this.messageId},t.clearMessageId=function(){this.messageId=0,e.RongIMClient._memoryStore.depend.isPolling&&e.RongIMClient._storageProvider.setItem(e.Navigation.Endpoint.userId+"msgId",this.messageId)},t.getMessageId=function(){return e.RongIMClient._memoryStore.depend.isPolling&&this.init(),this.messageId},t.messageId=0,t}();e.MessageIdHandler=i;var s=function(){function t(){this.time=0,this.cache={}}return t.prototype.setTime=function(e){this.time=e},t.prototype.getTime=function(){return this.time},t.prototype.setValue=function(e){var t=e.key,n=e.timestamp;this.cache[t]=this.cache[t]||{},this.cache[t]={value:e.value,userId:e.userId,isDeleted:!1,timestamp:n}},t.prototype.removeValue=function(t){var n=t.key,r=t.timestamp;this.cache[n]=this.cache[n]||{};var o=this.cache[n];this.cache[n]=e.RongUtil.extend(o,{isDeleted:!0,userId:t.userId,timestamp:r})},t.prototype.getValue=function(e){this.cache[e]=this.cache[e]||{};var t=this.cache[e];return t.isDeleted?null:t.value},t.prototype.getAllKV=function(){var t={};return e.RongUtil.forEach(this.cache,(function(e,n){e.isDeleted||(t[n]=e.value)})),t},t.prototype.getSetUserId=function(e){return this.cache[e]=this.cache[e]||{},this.cache[e].userId},t.prototype.isKeyExisted=function(t){this.cache[t]=this.cache[t]||{};var n=this.cache[t];return!e.RongUtil.isEmpty(n.value)&&!n.isDeleted},t.prototype.clear=function(){this.cache={}},t}(),a={},c={},u=function(e){var t=a[e];return t||(t=a[e]=new s),t},l=function(){function t(){}return t.pull=function(n,r){var o=function(t){var n=c[t];return n||(n=c[t]=new e.RongUtil.Prosumer),n}(n),i=e.RongIMClient._dataAccessProvider.pullChatroomEntry;o.produce({event:i,chrmId:n,time:r}),o.consume((function(e,n){var r=e.event,o=e.chrmId,i=e.time,s=u(o).getTime();s<i?r(o,s,{onSuccess:function(e){t.setEntries(o,e),n()},onError:n}):n()}))},t.setEntries=function(n,r){var i=r.entries,s=r.bFullUpdate,a=r.syncTime,c=s?t.setFullEntries:t.setIncreEntries,l=u(n);a=o.int64ToTimestamp(a),e.RongUtil.isArray(i)&&e.RongUtil.forEach(i,(function(t){var n=t.timestamp;e.RongUtil.isNumber(n)||(t.timestamp=o.int64ToTimestamp(n))})),l.setTime(a),c(n,i)},t.setEntry=function(e,t,n,r){var o=u(e),i=t.timestamp||+new Date;o[d.getChrmEntityByStatus(n).isDelete?"removeValue":"setValue"]({key:t.key,value:t.value,userId:r,timestamp:i})},t.setFullEntries=function(t,n){var r=u(t);r.clear(),e.RongUtil.forEach(n,(function(e){e.timestamp=o.int64ToTimestamp(e.timestamp),r.setValue({key:e.key,value:e.value,userId:e.uid,timestamp:e.timestamp})}))},t.setIncreEntries=function(t,n){var r=u(t),o=e.RongIMClient.getInstance().getCurrentUserId();e.RongUtil.forEach(n,(function(e){var t=d.getChrmEntityByStatus(e.status),n=t.isDelete?"removeValue":"setValue";!function(e,t,n){var i=e.key,s=e.value,a=r.getSetUserId(i)===o,c=!r.isKeyExisted(i);(t||a||c)&&r[n]({key:i,value:s,userId:e.uid,timestamp:e.timestamp})}(e,t.isOverwrite,n)}))},t.getEntityValue=function(e,t){return u(e).getValue(t)},t.getAllEntityValue=function(e){return u(e).getAllKV()},t.isKeyValid=function(e){return/^[A-Za-z0-9_=+-]+$/.test(e)},t}();e.ChrmKVHandler=l;var d=function(){function t(){}return t.convertUserStatus=function(t){t=e.RongUtil.rename(t,{subUserId:"userId"});var n=JSON.parse(t.status).us;return n?(t.status=e.RongUtil.rename(n,{o:"online",p:"platform",s:"status"}),t):t},t.getChrmEntityStatus=function(t,n){var r=0;switch(t.isAutoDelete&&(r|=1),t.isOverwrite&&(r|=2),n){case e.ChatroomEntityOpt.DELETE:r|=4}return r},t.getChrmEntityByStatus=function(t){var n=!!(4&t);return{isAutoDelete:!!(1&t),isOverwrite:!!(2&t),entityOpt:n?e.ChatroomEntityOpt.DELETE:e.ChatroomEntityOpt.UPDATE,isDelete:n}},t}();e.RongInnerTools=d;var f=function(){function t(){}return t.getKey=function(n,r){var o=e.RongIMClient.getInstance().getCurrentUserId();return e.RongUtil.tplEngine(t.KeyTemp,{selfId:o,type:n,targetId:r})},t.getDetailByKey=function(t){var n={count:0,sentTime:0},r=e.RongIMClient._storageProvider.getItem(t);if(!r)return n;var o=(r+="").split("_"),i=o.length>1;return n.count=Number(o[0]),i&&(n.sentTime=Number(o[1])),n},t.getDetail=function(e,n){var r=t.getKey(e,n);return t.getDetailByKey(r)},t.set=function(n,r,o,i){var s=t.getKey(n,r),a=i?e.RongUtil.tplEngine(t.ValueTemp,{count:o,sentTime:i}):o;return e.RongIMClient._storageProvider.setItem(s,a),o},t.add=function(e,n,r,o){var i=t.getDetail(e,n),s=i.count,a=i.sentTime;return o&&o>a&&(s+=r,t.set(e,n,s,o)),s},t.get=function(e,n){return t.getDetail(e,n).count},t.getAll=function(n){var r=0,o=(e.RongIMClient.getInstance().getCurrentUserId(),function(n){e.RongUtil.forEach(n,(function(e){var n=t.getDetailByKey(e);r+=n.count}))});if(n)e.RongUtil.forEach(n,(function(n){var r=t.getKey(n,""),i=e.RongIMClient._storageProvider.getItemKeyList(r);o(i)}));else{var i=t.getKey("",""),s=e.RongIMClient._storageProvider.getItemKeyList(i);o(s)}return r},t.remove=function(n,r){var o=t.getKey(n,r);e.RongIMClient._storageProvider.removeItem(o)},t.clear=function(){var n=t.getKey("",""),r=e.RongIMClient._storageProvider.getItemKeyList(n);e.RongUtil.forEach(r,(function(t){e.RongIMClient._storageProvider.removeItem(t)}))},t.KeyTemp="cu{selfId}{type}{targetId}",t.ValueTemp="{count}_{sentTime}",t}();e.UnreadCountHandler=f;var p=function(){function n(t){this.updatedStatus=[],this.statusShangeObserver=new e.Observer,this.pullProsumer=new e.RongUtil.Prosumer;var n=t.appkey,r=t.userId;this.option=t,this.storageKey=e.RongUtil.tplEngine("{appkey}{userId}constas",{appkey:n,userId:r})}return n.prototype._formatUpdatedStatus=function(t,n,r){var o={conversationType:n,targetId:r};return delete t.isLastInAPull,e.RongUtil.extend(o,t)},n.prototype.watchChanged=function(e){this.statusShangeObserver.add(e)},n.prototype.set=function(n,r,o){var i=this.get(n,r),s=o.updateTime,a=o.isLastInAPull;if(s>=i.updateTime){var c=e.RongUtil.Storage.get(this.storageKey)||{},u=t.getConversationKey(n,r),l=c[u]||{};e.RongUtil.forEach(o,(function(t,n){e.RongUtil.isUndefined(t)||(l[n]=t)})),c[u]=l,e.RongUtil.Storage.set(this.storageKey,c);var d=this._formatUpdatedStatus(o,n,r);this.updatedStatus.push(d),e.RongIMClient.getInstance().pottingConversation({type:n,userId:r})}a&&this.statusShangeObserver.emit(this.updatedStatus),this.updatedStatus=[]},n.prototype.get=function(n,r){var o=(e.RongUtil.Storage.get(this.storageKey)||{})[t.getConversationKey(n,r)]||{},i=o.notificationStatus,s=o.isTop,a=o.updateTime;return{notificationStatus:i||e.ConversationNotificationStatus.NOTIFY,isTop:s||!1,updateTime:a||0}},n.prototype.pull=function(t){if(!e.RongIMClient._memoryStore.depend.isPolling){t=t||{};var n=this,r=this.option.server,o=this.pullProsumer,i=this.storageKey;o.produce(t),o.consume((function(t,o){var s=(e.RongUtil.Storage.get(i)||{}).time||0,a=t.time,c=t.isForce;if(s>a&&!c)return o();r.pullConversationStatus(s,{onStatus:function(e,t,r){n.set(e,t,r)},onSuccess:function(t){var r=e.RongUtil.Storage.get(i)||{};r.time=t,e.RongUtil.Storage.set(n.storageKey,r),o()},onError:o})}))}},n}();e.ConversationStatusManager=p;var g=function(){function t(){}return t.modifyVoipCallInfoByAppKey=function(){try{var t=this.baseResp,n=e.RongIMClient._memoryStore.appKey,r=t.voipCallInfo,o=JSON.parse(r);e.RongUtil.forEach(o.callEngine,(function(e){3===e.engineType&&(e.vendorKey=n)}));var i=JSON.stringify(o);t.voipCallInfo=i}catch(e){}return t},t.modifyCmpByProtocol=function(){var t=e.RongIMClient._memoryStore.depend.protocol===e.RongIMClient.HttpProtocol.http?this.preparedCMP.WS:this.preparedCMP.WSS;this.baseResp.backupServer=t},t.genUserId=function(){var t=e.RongIMClient._memoryStore.token;return e.InnerUtil.getUId(t)},t.getResp=function(){this.modifyCmpByProtocol();var e=this.modifyVoipCallInfoByAppKey();return e.userId=this.genUserId(),e},t.baseResp={isFixedNaviResp:!0,code:200,userId:"",server:"",backupServer:"",voipCallInfo:'{"strategy":1,"callEngine":[{"engineType":4,"mediaServer":"https://rtc-info.ronghub.com","maxStreamCount":20},{"engineType":3,"vendorKey":"","signKey":"","blinkCMPServer":"rtccmp.ronghub.com:80","blinkSnifferServer":"rtccmp.ronghub.com:80"}]}',kvStorage:1,uploadServer:"upload.qiniup.com",openMp:1,openUS:1,logSwitch:1,logPolicy:'{"url": "logcollection.ronghub.com","level": 1,"itv": 6,"times": 5}',bosAddr:"gz.bcebos.com"},t.preparedCMP={WSS:"wsap-cn.ronghub.com:443",WS:"wsap-cn.ronghub.com:80"},t}();e.FixedNaviRespHandler=g}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function e(e){throw new Error("This method is abstract, you must implement this method in inherited class.")}return e.obtain=function(){throw new Error("This method is abstract, you must implement this method in inherited class.")},e}();e.MessageContent=t;var n=function(e){function t(){e.apply(this,arguments)}return __extends(t,e),t}(t);e.NotificationMessage=n;var r=function(e){function t(){e.apply(this,arguments)}return __extends(t,e),t}(t);e.StatusMessage=r;var o=function(){function t(){}return t.modelClone=function(e){var t={};for(var n in e)"messageName"!=n&&"encode"!=n&&(t[n]=e[n]);return t},t.modleCreate=function(t,n){var r=function(o){for(var i in t)this[t[i]]=o[t[i]];r.prototype.messageName=n,r.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))}};return r},t}();e.ModelUtil=o}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(e){this.messageName="CustomerStatusMessage",this.status=e.status}return t.obtain=function(){return null},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.CustomerStatusMessage=t;var n=function(){function t(e){this.messageName="ChangeModeResponseMessage",this.code=e.code,this.data=e.data,this.msg=e.msg}return t.obtain=function(){return null},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.ChangeModeResponseMessage=n;var r=function(){function t(e){this.messageName="ChangeModeMessage",this.uid=e.uid,this.sid=e.sid,this.pid=e.pid}return t.obtain=function(){return null},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.ChangeModeMessage=r;var o=function(){function t(e){this.messageName="CustomerStatusUpdateMessage",this.serviceStatus=e.serviceStatus,this.sid=e.sid}return t.obtain=function(){return null},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.CustomerStatusUpdateMessage=o;var i=function(){function t(e){this.messageName="HandShakeMessage",e&&(this.requestInfo=e.requestInfo,this.userInfo=e.userInfo)}return t.obtain=function(){return null},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.HandShakeMessage=i;var s=function(){function t(e){this.messageName="CustomerContact",this.page=e.page,this.nickName=e.nickName,this.routingInfo=e.routingInfo,this.info=e.info,this.requestInfo=e.requestInfo}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.CustomerContact=s;var a=function(){function t(e){this.messageName="EvaluateMessage",this.uid=e.uid,this.sid=e.sid,this.pid=e.pid,this.source=e.source,this.suggest=e.suggest,this.isresolve=e.isresolve,this.type=e.type}return t.obtain=function(){return null},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.EvaluateMessage=a;var c=function(){function t(e){this.messageName="HandShakeResponseMessage",this.msg=e.msg,this.status=e.status,this.data=e.data}return t.obtain=function(){return null},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.HandShakeResponseMessage=c;var u=function(){function t(e){this.messageName="SuspendMessage",this.uid=e.uid,this.sid=e.sid,this.pid=e.pid}return t.obtain=function(){return null},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.SuspendMessage=u;var l=function(){function t(e){this.messageName="TerminateMessage",this.code=e.code,this.msg=e.msg,this.sid=e.sid}return t.obtain=function(){return null},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.TerminateMessage=l}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function e(e){this.messageName="IsTypingStatusMessage"}return e.prototype.encode=function(){},e.prototype.getMessage=function(){return null},e}();e.IsTypingStatusMessage=t}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(e){if(this.messageName="InformationNotificationMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> InformationNotificationMessage.");this.message=e.message,this.extra=e.extra,e.user&&(this.user=e.user)}return t.obtain=function(e){return new t({message:e,extra:""})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.InformationNotificationMessage=t;var n=function(){function t(t){if(this.messageName="CommandMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> CommandMessage.");try{"[object String]"==Object.prototype.toString.call(t.data)?this.data=JSON.parse(t.data):this.data=t.data}catch(n){this.data=t.data,e.Logger.writeLog({tag:e.LoggerTag.IM.A_INIT_CMD_MSG_E,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{stack:n,msg:t.data}})}this.name=t.name,this.extra=t.extra}return t.obtain=function(e){return new t({data:e,extra:""})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.CommandMessage=n;var r=function(){function n(e){if(this.messageName="ContactNotificationMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> ContactNotificationMessage.");this.operation=e.operation,this.targetUserId=e.targetUserId,this.message=e.message,this.extra=e.extra,this.sourceUserId=e.sourceUserId,e.user&&(this.user=e.user)}return n.obtain=function(e,n,r,o){return new t({operation:e,sourceUserId:n,targetUserId:r,message:o})},n.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},n.CONTACT_OPERATION_ACCEPT_RESPONSE="ContactOperationAcceptResponse",n.CONTACT_OPERATION_REJECT_RESPONSE="ContactOperationRejectResponse",n.CONTACT_OPERATION_REQUEST="ContactOperationRequest",n}();e.ContactNotificationMessage=r;var o=function(){function t(t){if(this.messageName="ProfileNotificationMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> ProfileNotificationMessage.");this.operation=t.operation;try{"[object String]"==Object.prototype.toString.call(t.data)?this.data=JSON.parse(t.data):this.data=t.data}catch(n){this.data=t.data,e.Logger.writeLog({tag:e.LoggerTag.IM.A_INIT_PROFILE_MSG_E,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{stack:n,msg:t.data}})}this.extra=t.extra,t.user&&(this.user=t.user)}return t.obtain=function(e,n){return new t({operation:e,data:n})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.ProfileNotificationMessage=o;var i=function(){function t(t){if(this.messageName="CommandNotificationMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> ProfileNotificationMessage.");try{"[object String]"==Object.prototype.toString.call(t.data)?this.data=JSON.parse(t.data):this.data=t.data}catch(n){this.data=t.data,e.Logger.writeLog({tag:e.LoggerTag.IM.A_INIT_CMD_NOTI_MSG_E,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{stack:n,msg:t.data}})}this.name=t.name,this.extra=t.extra,t.user&&(this.user=t.user)}return t.obtain=function(e,n){return new t({name:e,data:n,extra:""})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.CommandNotificationMessage=i;var s=function(){function t(e){if(this.messageName="DiscussionNotificationMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> DiscussionNotificationMessage.");this.extra=e.extra,this.extension=e.extension,this.type=e.type,this.isHasReceived=e.isHasReceived,this.operation=e.operation,this.user=e.user,e.user&&(this.user=e.user)}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.DiscussionNotificationMessage=s;var a=function(){function t(e){if(this.messageName="GroupNotificationMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> GroupNotificationMessage.");e.operatorUserId&&(this.operatorUserId=e.operatorUserId),e.operation&&(this.operation=e.operation),e.data&&(this.data=e.data),e.message&&(this.message=e.message),e.extra&&(this.extra=e.extra)}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.GroupNotificationMessage=a}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(e){if(this.messageName="TextMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> TextMessage.");this.content=e.content,this.extra=e.extra,e.user&&(this.user=e.user),e.mentionedInfo&&(this.mentionedInfo=e.mentionedInfo),e.burnDuration&&(this.burnDuration=e.burnDuration)}return t.obtain=function(e){return new t({extra:"",content:e})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.TextMessage=t;var n=function(){function t(e){if(this.messageName="TypingStatusMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> TypingStatusMessage.");this.typingContentType=e.typingContentType,this.data=e.data}return t.obtain=function(e,n){return new t({typingContentType:e,data:n})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.TypingStatusMessage=n;var r=function(){function t(e){if(this.messageName="ReadReceiptMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> ReadReceiptMessage.");this.lastMessageSendTime=e.lastMessageSendTime,this.messageUId=e.messageUId,this.type=e.type}return t.obtain=function(e,n,r){return new t({messageUId:e,lastMessageSendTime:n,type:r})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.ReadReceiptMessage=r;var o=function(){function t(e){if(this.messageName="VoiceMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> VoiceMessage.");this.content=e.content,this.duration=e.duration,this.extra=e.extra,e.user&&(this.user=e.user),e.mentionedInfo&&(this.mentionedInfo=e.mentionedInfo),e.burnDuration&&(this.burnDuration=e.burnDuration)}return t.obtain=function(e,n){return new t({content:e,duration:n,extra:""})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.VoiceMessage=o;var i=function(){function t(e){this.messageName="RecallCommandMessage",this.messageUId=e.messageUId,this.conversationType=e.conversationType,this.targetId=e.targetId,this.sentTime=e.sentTime,e.extra&&(this.extra=e.extra),e.user&&(this.user=e.user)}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.RecallCommandMessage=i;var s=function(){function t(e){if(this.messageName="ImageMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> ImageMessage.");this.content=e.content,this.imageUri=e.imageUri,e.extra&&(this.extra=e.extra),e.user&&(this.user=e.user),e.mentionedInfo&&(this.mentionedInfo=e.mentionedInfo),e.burnDuration&&(this.burnDuration=e.burnDuration)}return t.obtain=function(e,n){return new t({content:e,imageUri:n,extra:""})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.ImageMessage=s;var a=function(){function t(e){if(this.messageName="LocationMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> LocationMessage.");this.latitude=e.latitude,this.longitude=e.longitude,this.poi=e.poi,this.content=e.content,this.extra=e.extra,e.user&&(this.user=e.user),e.mentionedInfo&&(this.mentionedInfo=e.mentionedInfo)}return t.obtain=function(e,n,r,o){return new t({latitude:e,longitude:n,poi:r,content:o,extra:""})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.LocationMessage=a;var c=function(){function t(e){if(this.messageName="RichContentMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> RichContentMessage.");this.title=e.title,this.content=e.content,this.imageUri=e.imageUri,this.extra=e.extra,this.url=e.url,e.user&&(this.user=e.user)}return t.obtain=function(e,n,r,o){return new t({title:e,content:n,imageUri:r,url:o,extra:""})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.RichContentMessage=c;var u=function(){function e(e){this.messageName="JrmfRedPacketMessage",e&&(this.message=e)}return e.prototype.encode=function(){return""},e}();e.JrmfRedPacketMessage=u;var l=function(){function e(e){this.messageName="JrmfRedPacketOpenedMessage",e&&(this.message=e)}return e.prototype.encode=function(){return""},e}();e.JrmfRedPacketOpenedMessage=l;var d=function(){function e(e){if(this.messageName="UnknownMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> UnknownMessage.");this.message=e}return e.prototype.encode=function(){return""},e}();e.UnknownMessage=d;var f=function(){function t(e){if(this.messageName="PublicServiceCommandMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> PublicServiceCommandMessage.");this.content=e.content,this.extra=e.extra,this.menuItem=e.menuItem,e.user&&(this.user=e.user),e.mentionedInfo&&(this.mentionedInfo=e.mentionedInfo)}return t.obtain=function(e){return new t({content:"",command:"",menuItem:e,extra:""})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.PublicServiceCommandMessage=f;var p=function(){function e(e){this.messageName="PublicServiceMultiRichContentMessage",this.richContentMessages=e}return e.prototype.encode=function(){return null},e}();e.PublicServiceMultiRichContentMessage=p;var g=function(){function t(e){this.messageName="SyncReadStatusMessage",e.lastMessageSendTime&&(this.lastMessageSendTime=e.lastMessageSendTime)}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.SyncReadStatusMessage=g;var h=function(){function t(e){this.messageName="ReadReceiptRequestMessage",e.messageUId&&(this.messageUId=e.messageUId)}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.ReadReceiptRequestMessage=h;var m=function(){function t(e){this.messageName="ReadReceiptResponseMessage",e.receiptMessageDic&&(this.receiptMessageDic=e.receiptMessageDic)}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.ReadReceiptResponseMessage=m;var v=function(){function t(e){this.messageName="PublicServiceRichContentMessage",this.richContentMessage=e}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.PublicServiceRichContentMessage=v;var y=function(){function t(e){this.messageName="FileMessage",e.name&&(this.name=e.name),e.size&&(this.size=e.size),e.type&&(this.type=e.type),e.fileUrl&&(this.fileUrl=e.fileUrl),e.extra&&(this.extra=e.extra),e.user&&(this.user=e.user)}return t.obtain=function(e){return new t({name:e.name,size:e.size,type:e.type,fileUrl:e.fileUrl})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.FileMessage=y;var C=function(){function t(e){this.messageName="HQVoiceMessage",this.type=e.type||"aac",e.localPath&&(this.localPath=e.localPath),e.remoteUrl&&(this.remoteUrl=e.remoteUrl),e.duration&&(this.duration=e.duration),e.extra&&(this.extra=e.extra),e.user&&(this.user=e.user),e.burnDuration&&(this.burnDuration=e.burnDuration)}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.HQVoiceMessage=C;var R=function(){function t(e){this.messageName="AcceptMessage",this.mediaId=e.mediaId,this.callId=e.callId,this.mediaType=e.mediaType,this.mode=e.mode,this.subInfo=e.subInfo}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.AcceptMessage=R;var T=function(){function t(e){this.messageName="RingingMessage",this.callId=e.callId}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.RingingMessage=T;var I=function(){function t(e){this.messageName="SummaryMessage",this.caller=e.caller,this.inviter=e.inviter,this.mediaType=e.mediaType,this.memberIdList=e.memberIdList,this.startTime=e.startTime,this.connectedTime=e.connectedTime,this.duration=e.duration,this.status=e.status}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.SummaryMessage=I;var S=function(){function t(e){this.messageName="HungupMessage",this.callId=e.callId,this.reason=e.reason,this.mode=e.mode,this.subInfo=e.subInfo}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.HungupMessage=S;var E=function(){function t(e){this.messageName="InviteMessage",this.mediaId=e.mediaId,this.callId=e.callId,this.engineType=e.engineType,this.channelInfo=e.channelInfo,this.mediaType=e.mediaType,this.extra=e.extra,this.inviteUserIds=e.inviteUserIds,this.observerUserIds=e.observerUserIds,this.mode=e.mode,this.subInfo=e.subInfo}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.InviteMessage=E;var M=function(){function t(e){this.messageName="MediaModifyMessage",this.callId=e.callId,this.mediaType=e.mediaType,this.mode=e.mode,this.subInfo=e.subInfo}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.MediaModifyMessage=M;var _=function(){function t(e){this.messageName="MemberModifyMessage",this.modifyMemType=e.modifyMemType,this.callId=e.callId,this.caller=e.caller,this.engineType=e.engineType,this.channelInfo=e.channelInfo,this.mediaType=e.mediaType,this.extra=e.extra,this.inviteUserIds=e.inviteUserIds,this.existedMemberStatusList=e.existedMemberStatusList,this.existedUserPofiles=e.existedUserPofiles,this.observerUserIds=e.observerUserIds,this.mode=e.mode,this.subInfo=e.subInfo}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.MemberModifyMessage=_;var b=function(){function t(e){if(this.messageName="RCCombineMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> RCCombineMessage.");this.nameList=e.nameList,this.remoteUrl=e.remoteUrl,e.user&&(this.user=e.user),this.conversationType=e.conversationType,this.summaryList=e.summaryList}return t.obtain=function(e,n,r,o){return new t({extra:"",content:e,nameList:n,summaryList:r,conversationType:o})},t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.RCCombineMessage=b;var O=function(){function t(e){this.messageName="ChrmKVNotificationMessage",e.key&&(this.key=e.key),e.value&&(this.value=e.value),e.type&&(this.type=e.type),e.extra&&(this.extra=e.extra),e.user&&(this.user=e.user)}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.ChrmKVNotificationMessage=O;var N=function(){function t(e){this.messageName="LogCommandMessage",e.uri&&(this.uri=e.uri),e.logId&&(this.logId=e.logId),e.platform&&(this.platform=e.platform),e.packageName&&(this.packageName=e.packageName),e.startTime&&(this.startTime=e.startTime),e.endTime&&(this.endTime=e.endTime),e.user&&(this.user=e.user)}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.LogCommandMessage=N;var A=function(){function t(e){if(this.messageName="ReferenceMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> ReferenceMessage.");this.content=e.content,this.referMsgUserId=e.referMsgUserId,this.referMsg=e.referMsg,this.objName=e.objName,e.user&&(this.user=e.user),e.mentionedInfo&&(this.mentionedInfo=e.mentionedInfo)}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.ReferenceMessage=A;var w=function(){function t(e){if(this.messageName="GIFMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> ReferenceMessage.");this.gifDataSize=e.gifDataSize,this.localPath=e.localPath,this.remoteUrl=e.remoteUrl,this.width=e.width,this.height=e.height,e.user&&(this.user=e.user),e.mentionedInfo&&(this.mentionedInfo=e.mentionedInfo)}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.GIFMessage=w;var P=function(){function t(e){if(this.messageName="SightMessage",0==arguments.length)throw new Error("Can not instantiate with empty parameters, use obtain method instead -> ReferenceMessage.");this.sightUrl=e.sightUrl,this.content=e.content,this.duration=e.duration,this.size=e.size,this.name=e.name,e.user&&(this.user=e.user),e.mentionedInfo&&(this.mentionedInfo=e.mentionedInfo)}return t.prototype.encode=function(){return JSON.stringify(e.ModelUtil.modelClone(this))},t}();e.SightMessage=P}(RongIMLib||(RongIMLib={})),function(e){var t=function(e,t){this.Id=e,this.Key=t};e.ChannelInfo=t;var n=function(e,t,n){this.platform=e,this.online=t,this.status=n};e.UserStatus=n;var r=function(e,t,n){};e.MentionedInfo=r;var o=function(e,t,n){this.msgId=e,this.msgDataTime=t,this.direct=n};e.DeleteMessage=o;var i=function(e,t,n){};e.CustomServiceConfig=i;var s=function(e,t,n,r,o,i,s){};e.CustomServiceSession=s;var a=function(){function t(e,t,n,r,o,i,s,a,c,u,l,d,f,p,g,h,m,v,y,C,R){this.conversationTitle=e,this.conversationType=t,this.draft=n,this.isTop=r,this.latestMessage=o,this.latestMessageId=i,this.notificationStatus=s,this.objectName=a,this.receivedStatus=c,this.receivedTime=u,this.senderUserId=l,this.senderUserName=d,this.sentStatus=f,this.sentTime=p,this.targetId=g,this.unreadMessageCount=h,this.senderPortraitUri=m,this.isHidden=v,this.mentionedMsg=y,this.hasUnreadMention=C,this._readTime=R}return t.prototype.setTop=function(){e.RongIMClient._dataAccessProvider.addConversation(this,{onSuccess:function(e){}})},t}();e.Conversation=a;var c=function(e,t,n,r,o){this.creatorId=e,this.id=t,this.memberIdList=n,this.name=r,this.isOpen=o};e.Discussion=c;var u=function(e,t,n){this.id=e,this.name=t,this.portraitUri=n};e.Group=u;var l=function(e,t,n,r,o,i,s,a,c,u,l,d,f,p,g,h,m,v){this.content=e,this.conversationType=t,this.extra=n,this.objectName=r,this.messageDirection=o,this.messageId=i,this.receivedStatus=s,this.receivedTime=a,this.senderUserId=c,this.sentStatus=u,this.sentTime=l,this.targetId=d,this.messageType=f,this.messageUId=p,this.isLocalMessage=g,this.offLineMessage=h,this.receiptResponse=m,this.disableNotification=v};e.Message=l;var d=function(){function e(e,t){this.isCounted=e,this.isPersited=t}return e.prototype.getMessageTag=function(){return this.isCounted&&this.isPersited?3:this.isCounted?2:this.isPersited?1:this.isCounted||this.isPersited?void 0:0},e.getTagByStatus=function(e){var t={3:{isCounted:!0,isPersited:!0},2:{isCounted:!0,isPersited:!1},1:{isCounted:!0,isPersited:!0},0:{isCounted:!0,isPersited:!0}};return t[e]||t[3]},e}();e.MessageTag=d;var f=function(e,t,n,r,o){this.id=e,this.name=t,this.type=n,this.sunMenuItems=r,this.url=o};e.PublicServiceMenuItem=f;var p=function(e,t,n,r,o,i,s,a){this.conversationType=e,this.introduction=t,this.menu=n,this.name=r,this.portraitUri=o,this.publicServiceId=i,this.hasFollowed=s,this.isGlobal=a};e.PublicServiceProfile=p;var g=function(e,t,n){this.id=e,this.name=t,this.portraitUri=n};e.UserInfo=g;var h=function(e,t){this.id=e,this.token=t};e.User=h;var m=function(e,t,n,r,o){this.id=e,this.user=t,this.mode=n,this.broadcastType=r,this.type=o};e.Room=m}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(){this.userStatusListener=null,this.Conversation={watcher:new e.Observer,watch:function(t){this.watcher.add(t);var n=e.RongIMClient._memoryStore.conversationList;this.watcher.emit(n)},unwatch:function(e){this.watcher.remove(e)},_notify:function(e){this.watcher.emit(e)}}}return t.prototype.init=function(t,n){new e.FeatureDectector(n.appCallback)},t.prototype.connect=function(t,n,r,o){var i=this;e.Logger.reportRTLog();var s=(o=o||{}).isReconnect,a=o.isIgnoreReportStart,c=s?e.LoggerTag.IM.L_RECO_T:e.LoggerTag.IM.A_CONN_T,u=s?e.LoggerTag.IM.L_RECO_R:e.LoggerTag.IM.A_CONN_R;!a&&e.Logger.writeLog({tag:c,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{token:t}}),e.RongIMClient.bridge=e.Bridge.getInstance(),e.RongIMClient._memoryStore.token=t,e.RongIMClient._memoryStore.callback=n,r=r||"",o=o||{};var l=!1,d=!1;(e.Bridge._client&&e.Bridge._client.channel&&(l=e.Bridge._client.channel.connectionStatus==e.ConnectionStatus.CONNECTING,d=e.Bridge._client.channel.connectionStatus==e.ConnectionStatus.CONNECTED),d||l)||(e.RongIMClient.otherDeviceLoginCount>5?n.onError(e.ConnectionStatus.ULTRALIMIT):(o.force&&e.RongIMClient._storageProvider.removeItem("servers"),e.RongIMClient.bridge.setListener(),e.RongIMClient.bridge.connect(e.RongIMClient._memoryStore.appKey,t,{onSuccess:function(t){setTimeout((function(){n.onSuccess(t),e.RongIMClient._memoryStore.networkUnavailable=!1,e.Logger.loggerCache.userId=t,e.Logger.writeLog({tag:u,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{desc:"connection succeeded"}}),i.conversationStatusManager=new e.ConversationStatusManager({appkey:e.RongIMClient._memoryStore.appKey,userId:t,server:i}),i.conversationStatusManager.watchChanged((function(t){e.RongUtil.forEach(e.RongIMClient.conversationStatusListeners,(function(e){e(t)}))})),i.conversationStatusManager.pull({isForce:!0})}));var r=e.RongIMClient._storageProvider,o=r.getItem("fullnavi")||"{}";try{o=JSON.parse(o)}catch(e){o={}}o.openUS&&i.getVoipInfo({onSuccess:function(t){try{if(t&&e.RongUtil.forEach(e.RongIMClient.settingListeners,(function(e){e({VoipInfo:t})})),t){var n=r.getItem("fullnavi")||"{}";(n=JSON.parse(n)).voipCallInfo=t,r.setItem("fullnavi",JSON.stringify(n))}}catch(e){}},onError:function(){}})},onError:function(t){t!=e.ConnectionState.TOKEN_INCORRECT&&t?setTimeout((function(){n.onError(t),e.Logger.writeLog({tag:u,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{code:t}})})):setTimeout((function(){n.onTokenIncorrect(),e.Logger.writeLog({tag:u,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{ConnectionState:e.ConnectionState.TOKEN_INCORRECT}})}))}})))},t.prototype.reconnect=function(t,n){var r=e.RongIMClient._memoryStore.token;if(!r)throw new Error("reconnect: token is empty.");if(e.Bridge._client&&e.Bridge._client.channel&&e.Bridge._client.channel.connectionStatus!=e.ConnectionStatus.CONNECTED&&e.Bridge._client.channel.connectionStatus!=e.ConnectionStatus.CONNECTING){({auto:function(){var o=e.RongIMClient._memoryStore.depend.protocol,i=n.url||"cdn.ronghub.com/RongIMLib-2.2.6.min.js",s={protocol:o,path:i};i=e.RongUtil.formatProtoclPath(s);var a=n.rate||[100,1e3,3e3,6e3,1e4,18e3];a.push("done"),function(t){var n=t.step(),r=t.url,o=function(){e.RongUtil.request({url:r,success:function(){t.done()},error:function(){i()}})},i=function(){var r=n();if("done"!=r){var i=setTimeout(o,r);e.RongIMClient._memoryStore.autoReconnectTimer=i}else{var s=e.ConnectionStatus.NETWORK_UNAVAILABLE;t.done(s)}};i()}({url:i,step:function(){var e=0;return function(){var t=a[e];return e++,t}},done:function(n){n?t.onError(n):e.RongIMClient.connect(r,t,null,{isIgnoreReportStart:!0,isReconnect:!0})}})},custom:function(){e.RongIMClient.connect(r,t,null,{isIgnoreReportStart:!0,isReconnect:!0})}})[(n=n||{}).auto?"auto":"custom"]()}else{var o=(e.Bridge._client||{}).channel||{};e.Logger.writeLog({tag:e.LoggerTag.IM.L_RECO_E,level:e.LoggerLevel.E,type:e.LoggerType.IM,content:{msg:{connectionStatus:o.connectionStatus},action:"reconnect"}})}},t.prototype.logout=function(){e.RongIMClient.bridge.disconnect(),e.RongIMClient.bridge=null},t.prototype.disconnect=function(){var t=e.RongIMClient._memoryStore.autoReconnectTimer;t&&clearTimeout(t),e.RongIMClient.bridge.disconnect()},t.prototype.sendReceiptResponse=function(t,n,r){var o=e.Bridge._client.userId+t+n+"RECEIVED",i=this;if(e.RongUtil.supportLocalStorage()){var s=JSON.parse(e.RongIMClient._storageProvider.getItem(o));if(s){var a=[];for(var c in s){var u={};u[c]=s[c].uIds,s[c].isResponse||a.push(u)}if(0==a.length)return void r.onSuccess();var l=setInterval((function(){1==a.length&&clearInterval(l);var c=a.splice(0,1)[0],u=new e.ReadReceiptResponseMessage({receiptMessageDic:c});i.sendMessage(t,n,u,{onSuccess:function(t){var n=e.MessageUtil.getFirstKey(c);s[n].isResponse=!0,e.RongIMClient._storageProvider.setItem(o,JSON.stringify(s)),r.onSuccess(t)},onError:function(e,t){r.onError(e,t)}})}),200)}else r.onSuccess()}else r.onSuccess()},t.prototype.sendTypingStatusMessage=function(t,n,r,o){r in e.RongIMClient.MessageParams&&this.sendMessage(t,n,e.TypingStatusMessage.obtain(e.RongIMClient.MessageParams[r].objectName,""),{onSuccess:function(){setTimeout((function(){o.onSuccess()}))},onError:function(e){setTimeout((function(){o.onError(e,null)}))},onBefore:function(){}})},t.prototype.sendRecallMessage=function(t,n,r){r=r||{};var o=new e.RecallCommandMessage({conversationType:t.conversationType,targetId:t.targetId,sentTime:t.sentTime,messageUId:t.messageUId,extra:t.extra,user:t.user});this.sendMessage(t.conversationType,t.senderUserId,o,n,!1,null,null,2,r)},t.prototype.sendTextMessage=function(t,n,r,o){var i=e.TextMessage.obtain(r);this.sendMessage(t,n,i,o)},t.prototype.getRemoteHistoryMessages=function(t,n,r,o,i,s){if(o<=1)throw new Error("the count must be greater than 1.");var a=(s=s||{}).order||0,c=[t,n,"_",a].join("");e.RongUtil.isNumber(r)||(r=e.RongIMClient._memoryStore.lastReadTime.get(c));var u=e.RongIMClient._memoryStore.historyMessageLimit,l=u.get(c)||{},d=l.hasMore;if(!(d||l.time!=r)&&0==a)return i.onSuccess([],d);var f=new e.RongIMClient.Protobuf.HistoryMsgInput;f.setTargetId(n),f.setTime(r),f.setCount(o),f.setOrder(a);var p=HistoryMsgType[t]||HistoryMsgType[e.ConversationType.PRIVATE];e.RongIMClient.bridge.queryMsg(p,e.MessageUtil.ArrayForm(f.toArrayBuffer()),n,{onSuccess:function(t){var r=e.MessageUtil.int64ToTimestamp(t.syncTime);e.RongIMClient._memoryStore.lastReadTime.set(c,r),u.set(c,{hasMore:!!t.hasMsg,time:r});var o,s=t.list.reverse(),a=null,l=e.SentStatus.READ;if(e.RongUtil.supportLocalStorage())for(var d=0,f=s.length;d<f;d++)a=e.MessageUtil.messageParser(s[d]),(o=JSON.parse(e.RongIMClient._storageProvider.getItem(e.Bridge._client.userId+a.messageUId+"SENT")))&&(a.receiptResponse||(a.receiptResponse={}),a.receiptResponse[a.messageUId]=o.count),a.sentStatus=l,a.targetId=n,s[d]=a;else for(d=0,f=s.length;d<f;d++){(a=e.MessageUtil.messageParser(s[d])).sentStatus=l,s[d]=a}setTimeout((function(){i.onSuccess(s,!!t.hasMsg)}))},onError:function(e){setTimeout((function(){i.onError(e)}))}},"HistoryMessagesOuput")},t.prototype.hasRemoteUnreadMessages=function(t,n){var r=null;window.RCCallback=function(e){setTimeout((function(){n.onSuccess(!!+e.status)})),r.parentNode.removeChild(r)},(r=document.createElement("script")).src=e.RongIMClient._memoryStore.depend.api+"/message/exist.js?appKey="+encodeURIComponent(e.RongIMClient._memoryStore.appKey)+"&token="+encodeURIComponent(t)+"&callBack=RCCallback&_="+e.RongUtil.getTimestamp(),document.body.appendChild(r),r.onerror=function(){setTimeout((function(){n.onError(e.ErrorCode.UNKNOWN)})),r.parentNode.removeChild(r)}},t.prototype.getRemoteConversationList=function(t,n,r){var o=new e.RongIMClient.Protobuf.RelationsInput,i=this;o.setType(1),void 0===r?o.setCount(0):o.setCount(r),e.RongIMClient.bridge.queryMsg(26,e.MessageUtil.ArrayForm(o.toArrayBuffer()),e.Bridge._client.userId,{onSuccess:function(r){if(r.info){r.info=r.info.reverse();for(var o=0,s=r.info.length;o<s;o++)e.RongIMClient.getInstance().pottingConversation(r.info[o])}var a=e.RongIMClient._memoryStore.conversationList;setTimeout((function(){if(n)return t.onSuccess(i.filterConversations(n,a));t.onSuccess(a)}))},onError:function(e){t.onError(e)}},"RelationsOutput")},t.prototype.addMemberToDiscussion=function(t,n,r){var o=new e.RongIMClient.Protobuf.ChannelInvitationInput;o.setUsers(n),e.RongIMClient.bridge.queryMsg(0,e.MessageUtil.ArrayForm(o.toArrayBuffer()),t,{onSuccess:function(){setTimeout((function(){r.onSuccess()}))},onError:function(e){setTimeout((function(){r.onError(e)}))}})},t.prototype.createDiscussion=function(t,n,r){var o=new e.RongIMClient.Protobuf.CreateDiscussionInput,i=this;o.setName(t),e.RongIMClient.bridge.queryMsg(1,e.MessageUtil.ArrayForm(o.toArrayBuffer()),e.Bridge._client.userId,{onSuccess:function(e){n.length>0&&i.addMemberToDiscussion(e,n,{onSuccess:function(){},onError:function(e){setTimeout((function(){r.onError(e)}))}}),setTimeout((function(){r.onSuccess(e)}))},onError:function(e){setTimeout((function(){r.onError(e)}))}},"CreateDiscussionOutput")},t.prototype.getDiscussion=function(t,n){var r=new e.RongIMClient.Protobuf.ChannelInfoInput;r.setNothing(1),e.RongIMClient.bridge.queryMsg(4,e.MessageUtil.ArrayForm(r.toArrayBuffer()),t,{onSuccess:function(e){setTimeout((function(){n.onSuccess(e)}))},onError:function(e){setTimeout((function(){n.onError(e)}))}},"ChannelInfoOutput")},t.prototype.quitDiscussion=function(t,n){var r=new e.RongIMClient.Protobuf.LeaveChannelInput;r.setNothing(1),e.RongIMClient.bridge.queryMsg(7,e.MessageUtil.ArrayForm(r.toArrayBuffer()),t,{onSuccess:function(){setTimeout((function(){n.onSuccess()}))},onError:function(e){setTimeout((function(){n.onError(e)}))}})},t.prototype.removeMemberFromDiscussion=function(t,n,r){var o=new e.RongIMClient.Protobuf.ChannelEvictionInput;o.setUser(n),e.RongIMClient.bridge.queryMsg(9,e.MessageUtil.ArrayForm(o.toArrayBuffer()),t,{onSuccess:function(){setTimeout((function(){r.onSuccess()}))},onError:function(e){setTimeout((function(){r.onError(e)}))}})},t.prototype.setDiscussionInviteStatus=function(t,n,r){var o=new e.RongIMClient.Protobuf.ModifyPermissionInput;o.setOpenStatus(n.valueOf()),e.RongIMClient.bridge.queryMsg(11,e.MessageUtil.ArrayForm(o.toArrayBuffer()),t,{onSuccess:function(e){setTimeout((function(){r.onSuccess()}))},onError:function(e){setTimeout((function(){r.onError(e)}))}})},t.prototype.setDiscussionName=function(t,n,r){var o=new e.RongIMClient.Protobuf.RenameChannelInput;o.setName(n),e.RongIMClient.bridge.queryMsg(12,e.MessageUtil.ArrayForm(o.toArrayBuffer()),t,{onSuccess:function(){setTimeout((function(){r.onSuccess()}))},onError:function(e){r.onError(e)}})},t.prototype.joinChatRoom=function(t,n,r){e.Logger.writeLog({tag:e.LoggerTag.IM.A_JCTR_T,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{chatroomId:t}});var o=new e.RongIMClient.Protobuf.ChrmInput;o.setNothing(1),e.Bridge._client.chatroomId=t,e.RongIMClient.bridge.queryMsg(19,e.MessageUtil.ArrayForm(o.toArrayBuffer()),t,{onSuccess:function(){e.RongIMClient.getInstance().getNavi().kvStorage?e.RongIMClient._dataAccessProvider.pullChatroomEntry(t,0,{onSuccess:function(n){e.ChrmKVHandler.setEntries(t,n),setTimeout((function(){r.onSuccess(),e.Logger.writeLog({tag:e.LoggerTag.IM.A_JCTR_R,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{chatroomId:t}})}))},onError:function(n){setTimeout((function(){r.onError(n),e.Logger.writeLog({tag:e.LoggerTag.IM.A_JCTR_R,level:e.LoggerLevel.W,type:e.LoggerType.IM,content:{chatroomId:t,error:n}})}))}}):setTimeout((function(){e.Logger.writeLog({tag:e.LoggerTag.IM.A_JCTR_R,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{chatroomId:t}}),r.onSuccess()}));var o=new e.RongIMClient.Protobuf.ChrmPullMsg;0==n&&(n=-1),o.setCount(n),o.setSyncTime(0),e.Bridge._client.queryMessage("chrmPull",e.MessageUtil.ArrayForm(o.toArrayBuffer()),t,1,{onSuccess:function(n){var r=n.list,o=e.MessageUtil.int64ToTimestamp(n.syncTime),i=r[r.length-1];i&&(o=(i=e.MessageUtil.messageParser(i)).sentTime),e.RongIMClient._memoryStore.lastReadTime.set(t+e.Bridge._client.userId+"CST",o);for(var s=e.Bridge._client,a=0,c=r.length;a<c;a++){var u="R"+r[a].msgId;if(!(u in s.cacheMessageIds)){s.cacheMessageIds[u]=!0;var l=e.RongUtil.keys(s.cacheMessageIds);if(l.length>10&&(u=l[0],delete s.cacheMessageIds[u]),e.RongIMClient._memoryStore.filterMessages.length>0)for(var d=0,f=e.RongIMClient._memoryStore.filterMessages.length;d<f;d++)e.RongIMClient.MessageParams[e.RongIMClient._memoryStore.filterMessages[d]].objectName!=r[a].classname&&s.handler.onReceived(r[a]);else s.handler.onReceived(r[a])}}},onError:function(e){setTimeout((function(){r.onError(e)}))}},"DownStreamMessages")},onError:function(n){setTimeout((function(){e.Logger.writeLog({tag:e.LoggerTag.IM.A_JCTR_R,level:e.LoggerLevel.W,type:e.LoggerType.IM,content:{chatroomId:t,error:n}}),r.onError(n)}))}},"ChrmOutput")},t.prototype.getChatRoomInfo=function(t,n,r,o){var i=new e.RongIMClient.Protobuf.QueryChatroomInfoInput;i.setCount(n),i.setOrder(r),e.RongIMClient.bridge.queryMsg("queryChrmI",e.MessageUtil.ArrayForm(i.toArrayBuffer()),t,{onSuccess:function(t){t.userInfos.forEach((function(t){t.time=e.MessageUtil.int64ToTimestamp(t.time)})),setTimeout((function(){o.onSuccess(t)}))},onError:function(e){setTimeout((function(){o.onError(e)}))}},"QueryChatroomInfoOutput")},t.prototype.quitChatRoom=function(t,n){e.Logger.writeLog({tag:e.LoggerTag.IM.A_QCTR_T,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{chatroomId:t}});var r=new e.RongIMClient.Protobuf.ChrmInput;r.setNothing(1),e.RongIMClient.bridge.queryMsg(17,e.MessageUtil.ArrayForm(r.toArrayBuffer()),t,{onSuccess:function(){e.Bridge._client&&e.Bridge._client.clearCacheMessageIds(),setTimeout((function(){e.Logger.writeLog({tag:e.LoggerTag.IM.A_QCTR_R,level:e.LoggerLevel.I,type:e.LoggerType.IM,content:{chatroomId:t}}),n.onSuccess()}))},onError:function(r){setTimeout((function(){e.Logger.writeLog({tag:e.LoggerTag.IM.A_QCTR_R,level:e.LoggerLevel.W,type:e.LoggerType.IM,content:{chatroomId:t,error:r}}),n.onError(r)}))}},"ChrmOutput")},t.prototype.setChatroomHisMessageTimestamp=function(t,n){e.RongIMClient._memoryStore.lastReadTime.set("chrhis_"+t,n)},t.prototype.getChatRoomHistoryMessages=function(t,n,r,o){var i=new e.RongIMClient.Protobuf.HistoryMsgInput;i.setTargetId(t);var s=e.RongIMClient._memoryStore.lastReadTime.get("chrhis_"+t)||0;i.setTime(s),i.setCount(n),i.setOrder(r),e.RongIMClient.bridge.queryMsg(34,e.MessageUtil.ArrayForm(i.toArrayBuffer()),e.Bridge._client.userId,{onSuccess:function(n){e.RongIMClient._memoryStore.lastReadTime.set("chrhis_"+t,e.MessageUtil.int64ToTimestamp(n.syncTime));for(var r=n.list.reverse(),i=0,s=r.length;i<s;i++)r[i]=e.MessageUtil.messageParser(r[i]);setTimeout((function(){o.onSuccess(r,!!n.hasMsg)}))},onError:function(e){setTimeout((function(){o.onError(e)}))}},"HistoryMsgOuput")},t.prototype.setChatroomEntry=function(t,n,r){var o=e.ChatroomEntityOpt.UPDATE,i=n.key,s=n.value,a=!e.RongUtil.isLengthLimit(i,e.ChatroomEntityLimit.KEY,1)||!e.ChrmKVHandler.isKeyValid(i),c=!e.RongUtil.isLengthLimit(s,e.ChatroomEntityLimit.VALUE,1);a||c?setTimeout((function(){r.onError(e.ErrorCode.BIZ_ERROR_INVALID_PARAMETER)})):this.refreshChatroomEntry(t,n,o,r)},t.prototype.forceSetChatroomEntry=function(e,t,n){t.isOverwrite=!0,this.setChatroomEntry(e,t,n)},t.prototype.removeChatroomEntry=function(t,n,r){var o=e.ChatroomEntityOpt.DELETE,i=n.key;!e.RongUtil.isLengthLimit(i,e.ChatroomEntityLimit.KEY,1)||!e.ChrmKVHandler.isKeyValid(i)?setTimeout((function(){r.onError(e.ErrorCode.BIZ_ERROR_INVALID_PARAMETER)})):this.refreshChatroomEntry(t,n,o,r)},t.prototype.forceRemoveChatroomEntry=function(e,t,n){t.isOverwrite=!0,this.removeChatroomEntry(e,t,n)},t.prototype.refreshChatroomEntry=function(t,n,r,o){var i,s,a=n.key,c=n.value||"",u=n.notificationExtra;r===e.ChatroomEntityOpt.DELETE?(i=new e.RongIMClient.Protobuf.DeleteChrmKV,s="delKV"):(i=new e.RongIMClient.Protobuf.SetChrmKV,s="setKV");var l=e.RongInnerTools.getChrmEntityStatus(n,r),d={key:a,value:c,uid:e.RongIMClient.getInstance().getCurrentUserId()};if(l&&(d.status=l),i.setEntry(d),n.isSendNotification){i.setBNotify(!0);var f=new e.RongIMClient.Protobuf.UpStreamMessage,p=new e.ChrmKVNotificationMessage({key:a,value:c,extra:u,type:r});f.setSessionId(e.RongIMClient.MessageParams[p.messageName].msgTag.getMessageTag()),f.setClassname(e.RongIMClient.MessageParams[p.messageName].objectName),f.setContent(p.encode()),i.setNotification(f),i.setType(e.ConversationType.CHATROOM)}e.RongIMClient.bridge.queryMsg(s,e.MessageUtil.ArrayForm(i.toArrayBuffer()),t,{onSuccess:function(r){var i=e.RongIMClient.getInstance().getCurrentUserId();e.ChrmKVHandler.setEntry(t,n,l,i),setTimeout((function(){o.onSuccess(!!r)}))},onError:function(e){setTimeout((function(){o.onError(e)}))}},"ChrmOutput")},t.prototype.getChatroomEntry=function(t,n,r){var o=e.ChrmKVHandler.getEntityValue(t,n);setTimeout((function(){e.RongUtil.isEmpty(o)?r.onError(e.ErrorCode.CHATROOM_KEY_NOT_EXIST):r.onSuccess(o)}))},t.prototype.getAllChatroomEntries=function(t,n){setTimeout((function(){var r=e.ChrmKVHandler.getAllEntityValue(t);n.onSuccess(r)}))},t.prototype.pullChatroomEntry=function(t,n,r){var o=new e.RongIMClient.Protobuf.QueryChrmKV;o.setTimestamp(n),e.RongIMClient.bridge.queryMsg("pullKV",e.MessageUtil.ArrayForm(o.toArrayBuffer()),t,{onSuccess:function(e){setTimeout((function(){r.onSuccess(e)}))},onError:function(e){setTimeout((function(){r.onError(e)}))}},"ChrmKVOutput")},t.prototype.setMessageStatus=function(e,t,n,r,o){setTimeout((function(){o.onSuccess(!0)}))},t.prototype.addToBlacklist=function(t,n){var r=new e.RongIMClient.Protobuf.Add2BlackListInput;r.setUserId(t),e.RongIMClient.bridge.queryMsg(21,e.MessageUtil.ArrayForm(r.toArrayBuffer()),t,{onSuccess:function(){setTimeout((function(){n.onSuccess()}))},onError:function(e){setTimeout((function(){n.onError(e)}))}})},t.prototype.getBlacklist=function(t){var n=new e.RongIMClient.Protobuf.QueryBlackListInput;n.setNothing(1),e.RongIMClient.bridge.queryMsg(23,e.MessageUtil.ArrayForm(n.toArrayBuffer()),e.Bridge._client.userId,{onSuccess:function(e){setTimeout((function(){t.onSuccess(e)}))},onError:function(e){setTimeout((function(){t.onError(e)}))}},"QueryBlackListOutput")},t.prototype.getBlacklistStatus=function(t,n){var r=new e.RongIMClient.Protobuf.BlackListStatusInput;r.setUserId(t),e.RongIMClient.bridge.queryMsg(24,e.MessageUtil.ArrayForm(r.toArrayBuffer()),t,{onSuccess:function(t){setTimeout((function(){n.onSuccess(e.BlacklistStatus[t])}))},onError:function(e){setTimeout((function(){n.onError(e)}))}})},t.prototype.removeFromBlacklist=function(t,n){var r=new e.RongIMClient.Protobuf.RemoveFromBlackListInput;r.setUserId(t),e.RongIMClient.bridge.queryMsg(22,e.MessageUtil.ArrayForm(r.toArrayBuffer()),t,{onSuccess:function(){setTimeout((function(){n.onSuccess()}))},onError:function(e){setTimeout((function(){n.onError(e)}))}})},t.prototype.getFileToken=function(t,n,r){if(/(1|2|3|4)/.test(t.toString())){r=e.RongUtil.generateUploadFileName(t,r);var o=e.RongIMClient._storageProvider.getItem("upload_domains")||"{}",i=new e.RongIMClient.Protobuf.GetQNupTokenInput;i.setType(t),i.setKey(r),e.RongIMClient.bridge.queryMsg(30,e.MessageUtil.ArrayForm(i.toArrayBuffer()),e.Bridge._client.userId,{onSuccess:function(t){setTimeout((function(){var r=e.RongUtil.extend(JSON.parse(o),t);n.onSuccess(r)}))},onError:function(e){setTimeout((function(){n.onError(e)}))}},"GetQNupTokenOutput")}else setTimeout((function(){n.onError(e.ErrorCode.QNTKN_FILETYPE_ERROR)}))},t.prototype.getFileUrl=function(t,n,r,o,i){i=i||{};if(/(1|2|3|4)/.test(t.toString()))if(i.isBosRes)o.onSuccess(i);else{var s=new e.RongIMClient.Protobuf.GetQNdownloadUrlInput;s.setType(t),s.setKey(n),r&&s.setFileName(r),e.RongIMClient.bridge.queryMsg(31,e.MessageUtil.ArrayForm(s.toArrayBuffer()),e.Bridge._client.userId,{onSuccess:function(e){setTimeout((function(){o.onSuccess(e)}))},onError:function(e){setTimeout((function(){o.onError(e)}))}},"GetQNdownloadUrlOutput")}else setTimeout((function(){o.onError(e.ErrorCode.QNTKN_FILETYPE_ERROR)}))},t.prototype.getVoipInfo=function(t){if(!e.RongIMClient._memoryStore.depend.isPolling)return this.getPullSetting({onSuccess:function(n){for(var r=(n=n||{}).items||[],o=null,i=0,s=r.length;i<s;i++){var a=r[i];if("VoipInfo"===a.key){var c=a.value;o=c=e.RongIMClient._memoryStore.depend.isPolling?(new e.BinaryHelper).readUTF(c.offset?e.MessageUtil.ArrayForm(c.buffer).slice(c.offset,c.limit):c):(new e.BinaryHelper).readUTF(c.offset?e.MessageUtil.ArrayFormInput(c.buffer).subarray(c.offset,c.limit):c)}}t.onSuccess(o)},onError:t.onError},0)},t.prototype.getPullSetting=function(t,n){var r=new e.RongIMClient.Protobuf.PullUserSettingInput;n=n||parseInt(e.RongIMClient.sdkver),r.setVersion(n),e.RongIMClient.bridge.queryMsg("pullUS",e.MessageUtil.ArrayForm(r.toArrayBuffer()),e.Bridge._client.userId,{onSuccess:function(n){(n=n||{}).version=e.MessageUtil.int64ToTimestamp(n.version),setTimeout((function(){t.onSuccess(n)}))},onError:function(e){setTimeout((function(){t.onError(e)}))}},"PullUserSettingOutput")},t.prototype.setOfflineMessageDuration=function(t,n){this.getPullSetting({onSuccess:function(r){var o=new e.RongIMClient.Protobuf.GetQNupTokenOutput,i=r.version;o.setDeadline(i),o.setToken(t+""),e.RongIMClient.bridge.queryMsg("setOfflineMsgDur",e.MessageUtil.ArrayForm(o.toArrayBuffer()),e.Bridge._client.userId,{onSuccess:function(e){setTimeout((function(){n.onSuccess(e)}))},onError:function(e){setTimeout((function(){n.onError(e)}))}})},onError:n.onError})},t.prototype.sendMessage=function(t,n,r,o,i,s,a,c,u){if(e.Bridge._client.channel){if(!e.Bridge._client.channel.socket.socket.connected)throw setTimeout((function(){o.onError(e.ErrorCode.TIMEOUT,null)})),new Error("connect is timeout! postion:sendMessage");u=u||{};var l,d=t==e.ConversationType.DISCUSSION||t==e.ConversationType.GROUP,f=new e.RongIMClient.Protobuf.UpStreamMessage;if(i&&d?(l=7,u.disableNotification&&(l|=32),f.setSessionId(l)):(l=e.RongIMClient.MessageParams[r.messageName].msgTag.getMessageTag(),u.disableNotification&&(l|=32),f.setSessionId(l)),s&&f.setPushText(s),a&&f.setAppData(a),d&&r.messageName==e.RongIMClient.MessageType.ReadReceiptResponseMessage){var p=r;if(p.receiptMessageDic){var g=[];for(var h in p.receiptMessageDic)g.push(h);f.setUserId(g)}}d&&r.messageName==e.RongIMClient.MessageType.SyncReadStatusMessage&&f.setUserId(e.Bridge._client.userId);var m=u.userIds;m&&f.setUserId(m);var v=0;(u.isPush||u.isVoipPush)&&(v|=1),u.isFilerWhiteBlacklist&&(v|=2),f.setConfigFlag(v),f.setClassname(e.RongIMClient.MessageParams[r.messageName].objectName);var y=r.encode();if(e.RongUtil.getByteLength(y)>e.RongIMClient.MaxMessageContentBytes)setTimeout((function(){o.onError(e.ErrorCode.RC_MSG_CONTENT_EXCEED_LIMIT)}));else{f.setContent(y);var C=f.toArrayBuffer();"[object ArrayBuffer]"==Object.prototype.toString.call(C)&&(C=[].slice.call(new Int8Array(C)));var R=this,T=new e.Message,I=this.getConversation(t,n);3==e.RongIMClient.MessageParams[r.messageName].msgTag.getMessageTag()&&(I||(I=e.RongIMClient.getInstance().createConversation(t,n,"")),I.sentTime=(new Date).getTime(),I.sentStatus=e.SentStatus.SENDING,I.senderUserName="",I.senderUserId=e.Bridge._client.userId,I.notificationStatus=e.ConversationNotificationStatus.DO_NOT_DISTURB,I.latestMessage=T,I.unreadMessageCount=0,e.RongIMClient._dataAccessProvider.addConversation(I,{onSuccess:function(e){}})),e.RongIMClient._memoryStore.converStore=I,T.content=r,T.conversationType=t,T.senderUserId=e.Bridge._client.userId,T.objectName=e.RongIMClient.MessageParams[r.messageName].objectName,T.targetId=n,T.sentTime=(new Date).getTime(),T.messageDirection=e.MessageDirection.SEND,T.sentStatus=e.SentStatus.SENT,T.messageType=r.messageName,T.disableNotification=u.disableNotification||!1,e.RongIMClient.bridge.pubMsg(t.valueOf(),C,n,{onSuccess:function(i){if(i&&i.timestamp&&e.RongIMClient._memoryStore.lastReadTime.set("converST_"+e.Bridge._client.userId+t+n,i.timestamp),(t==e.ConversationType.DISCUSSION||t==e.ConversationType.GROUP)&&r.messageName==e.RongIMClient.MessageType.ReadReceiptRequestMessage){var s=T.content,a=e.Bridge._client.userId+s.messageUId+"SENT";e.RongIMClient._storageProvider.setItem(a,JSON.stringify({count:0,dealtime:i.timestamp,userIds:{}}))}if(3==e.RongIMClient.MessageParams[T.messageType].msgTag.getMessageTag()){var c=e.RongIMClient._memoryStore.converStore;c.sentStatus=T.sentStatus,c.latestMessage=T,R.updateConversation(c),e.RongIMClient._dataAccessProvider.Conversation._notify(e.RongIMClient._memoryStore.conversationList),e.RongIMClient._dataAccessProvider.addMessage(t,n,T,{onSuccess:function(t){(T=t).messageUId=i.messageUId,T.sentTime=i.timestamp,T.sentStatus=e.SentStatus.SENT,T.messageId=i.messageId,e.RongIMClient._dataAccessProvider.updateMessage(T)},onError:function(){}})}setTimeout((function(){c&&R.updateConversation(c),T.sentTime=i.timestamp,T.messageUId=i.messageUId,o.onSuccess(T)}))},onError:function(r,i){T.sentStatus=e.SentStatus.FAILED,i&&(T.messageUId=i.messageUId,T.sentTime=i.sentTime),3==e.RongIMClient.MessageParams[T.messageType].msgTag.getMessageTag()&&(e.RongIMClient._memoryStore.converStore.latestMessage=T),e.RongIMClient._dataAccessProvider.addMessage(t,n,T,{onSuccess:function(t){T.messageId=t.messageId,e.RongIMClient._dataAccessProvider.updateMessage(T)},onError:function(){}}),setTimeout((function(){o.onError(r,T)}))}},null,c,u),o.onBefore&&o.onBefore(e.MessageIdHandler.messageId),T.messageId=e.MessageIdHandler.messageId+""}}else setTimeout((function(){o.onError(e.ErrorCode.RC_NET_UNAVAILABLE,null)}))},t.prototype.setConnectionStatusListener=function(t){e.RongUtil.isObject(t)&&e.RongUtil.isFunction(t.onChanged)&&e.RongIMClient.statusListeners.push(t.onChanged)},t.prototype.setOnReceiveMessageListener=function(t){e.RongUtil.isObject(t)&&e.RongUtil.isFunction(t.onReceived)&&e.RongIMClient.messageListeners.push(t.onReceived)},t.prototype.registerMessageType=function(t,n,r,o,i){if(!t)throw new Error("messageType can't be empty,postion -> registerMessageType");if(!n)throw new Error("objectName can't be empty,postion -> registerMessageType");if("[object Array]"==Object.prototype.toString.call(o)){var s=e.ModelUtil.modleCreate(o,t);e.RongIMClient.RegisterMessage[t]=s}else{if("[object Function]"!=Object.prototype.toString.call(o)&&"[object Object]"!=Object.prototype.toString.call(o))throw new Error("The index of 3 parameter was wrong type  must be object or function or array-> registerMessageType");if(!o.encode)throw new Error("encode method has not realized or messageName is undefined-> registerMessageType");if(!o.decode)throw new Error("decode method has not realized -> registerMessageType")}registerMessageTypeMapping[n]=t},t.prototype.registerMessageTypes=function(t){var n=[],r=function(e){var t=[];for(var n in e)t.push(n);return t};for(var o in t){var i=r((d=t[o]).proto),s=d.flag||3,a=e.MessageTag.getTagByStatus(s);s=new e.MessageTag(a.isCounted,a.isPersited),n.push({type:o,name:d.name,flag:s,protos:i})}for(var c=function(t){var n=t.type,r=t.name,o=t.flag,i=t.protos;e.RongIMClient.registerMessageType(n,r,o,i)},u=0,l=n.length;u<l;u++){var d;c(d=n[u])}},t.prototype.addConversation=function(t,n){for(var r=!0,o=0,i=e.RongIMClient._memoryStore.conversationList.length;o<i;o++)if(e.RongIMClient._memoryStore.conversationList[o].conversationType===t.conversationType&&e.RongIMClient._memoryStore.conversationList[o].targetId===t.targetId){e.RongIMClient._memoryStore.conversationList.unshift(e.RongIMClient._memoryStore.conversationList.splice(o,1)[0]),r=!1;break}r&&e.RongIMClient._memoryStore.conversationList.unshift(t),n&&n.onSuccess(!0)},t.prototype.updateConversation=function(t){for(var n=0,r=e.RongIMClient._memoryStore.conversationList.length;n<r;n++){var o=e.RongIMClient._memoryStore.conversationList[n];if(t.conversationType===o.conversationType&&t.targetId===o.targetId){t.conversationTitle&&(o.conversationTitle=t.conversationTitle),t.senderUserName&&(o.senderUserName=t.senderUserName),t.senderPortraitUri&&(o.senderPortraitUri=t.senderPortraitUri),t.latestMessage&&(o.latestMessage=t.latestMessage),t.sentStatus&&(o.sentStatus=t.sentStatus);break}}},t.prototype.removeConversation=function(t,n,r){var o=new e.RongIMClient.Protobuf.RelationsInput;o.setType(t),e.RongIMClient.bridge.queryMsg(27,e.MessageUtil.ArrayForm(o.toArrayBuffer()),n,{onSuccess:function(){for(var o=!1,i=e.RongIMClient._memoryStore.conversationList,s=i.length,a=0;a<s;a++)if(i[a].conversationType==t&&n==i[a].targetId){i.splice(a,1),o=!0;break}o&&e.RongIMClient._dataAccessProvider.Conversation._notify(e.RongIMClient._memoryStore.conversationList),r.onSuccess(!0)},onError:function(e){setTimeout((function(){r.onError(e)}))}})},t.prototype.getMessage=function(t,n){n.onSuccess(new e.Message)},t.prototype.addMessage=function(e,t,n,r){r&&r.onSuccess(n)},t.prototype.removeMessage=function(t,n,r,o){e.RongIMClient.getInstance().deleteRemoteMessages(t,n,r,o)},t.prototype.removeLocalMessage=function(e,t,n,r){r.onSuccess(!0)},t.prototype.updateMessage=function(e,t){t&&t.onSuccess(e)},t.prototype.deleteRemoteMessages=function(t,n,r,o){if(!e.RongIMClient.Protobuf.DeleteMsgInput)throw new Error("SDK Protobuf version is too low");var i=new e.RongIMClient.Protobuf.DeleteMsgInput,s=[];e.RongUtil.forEach(r,(function(e){s.push({msgId:e.messageUId,msgDataTime:e.sentTime,direct:e.messageDirection})})),i.setType(t),i.setConversationId(n),i.setMsgs(s),e.RongIMClient.bridge.queryMsg("delMsg",e.MessageUtil.ArrayForm(i.toArrayBuffer()),n,{onSuccess:function(e){o.onSuccess(e)},onError:function(e){setTimeout((function(){o.onError(e)}))}},"DeleteMsgOutput")},t.prototype.clearRemoteHistoryMessages=function(t,n){var r=new e.RongIMClient.Protobuf.CleanHisMsgInput,o={1:"cleanPMsg",2:"cleanDMsg",3:"cleanGMsg",5:"cleanCMsg",6:"cleanSMsg"}[t.conversationType];if(o){var i=t.timestamp;if("number"==typeof i){r.setDataTime(i);var s=t.targetId;r.setTargetId(s),e.RongIMClient.bridge.queryMsg(o,e.MessageUtil.ArrayForm(r.toArrayBuffer()),s,{onSuccess:function(e){n.onSuccess(!e)},onError:function(t){1==t&&(t=e.ErrorCode.CLEAR_HIS_ERROR),setTimeout((function(){n.onError(t)}))}})}else n.onError(e.ErrorCode.CLEAR_HIS_TIME_ERROR)}else n.onError(e.ErrorCode.CLEAR_HIS_TYPE_ERROR)},t.prototype.clearHistoryMessages=function(e,t){this.clearRemoteHistoryMessages(e,t)},t.prototype.clearMessages=function(e,t,n){},t.prototype.updateMessages=function(t,n,r,o,i){"readStatus"==r&&e.RongIMClient._memoryStore.conversationList.length>0&&this.getConversationList({onSuccess:function(e){Array.forEach(e,(function(e){e.conversationType==t&&e.targetId==n&&(e.unreadMessageCount=0)}))},onError:function(e){setTimeout((function(){i.onError(e)}))}},null),setTimeout((function(){i.onSuccess(!0)}))},t.prototype.getConversation=function(t,n,r){for(var o=null,i=0,s=e.RongIMClient._memoryStore.conversationList.length;i<s;i++)if(e.RongIMClient._memoryStore.conversationList[i].conversationType==t&&e.RongIMClient._memoryStore.conversationList[i].targetId==n&&(o=e.RongIMClient._memoryStore.conversationList[i],e.RongUtil.supportLocalStorage())){var a=e.UnreadCountHandler.get(t,n);0==o.unreadMessageCount&&(o.unreadMessageCount=Number(a))}return setTimeout((function(){r&&r.onSuccess(o)})),o},t.prototype.filterConversations=function(t,n){var r=[];return e.RongUtil.forEach(t,(function(t){e.RongUtil.forEach(n,(function(e){e.conversationType==t&&r.push(e)}))})),r},t.prototype.getConversationList=function(t,n,r,o){var i=this,s=e.RongIMClient._memoryStore.isSyncRemoteConverList,a=e.RongIMClient._memoryStore.conversationList;e.RongUtil.isNumber(r)||(r=200);var c=a.length>=r;s||!c&&!e.RongIMClient._memoryStore.isFullConversations?e.RongIMClient.getInstance().getRemoteConversationList({onSuccess:function(n){e.RongUtil.supportLocalStorage()&&Array.forEach(e.RongIMClient._memoryStore.conversationList,(function(t){var n=e.UnreadCountHandler.get(t.conversationType,t.targetId);0==t.unreadMessageCount&&(t.unreadMessageCount=Number(n))})),e.RongIMClient._memoryStore.isSyncRemoteConverList=!1;var o=r>n.length;e.RongIMClient._memoryStore.isFullConversations=o,setTimeout((function(){t.onSuccess(n)}))},onError:function(e){setTimeout((function(){t.onError(e)}))}},n,r,o):setTimeout((function(){var e=JSON.parse(JSON.stringify(a)).slice(0,r);n&&(e=i.filterConversations(n,e)),t.onSuccess(e)}))},t.prototype.clearCache=function(){var t=e.RongIMClient._memoryStore||{};t.conversationList=[],t.isSyncRemoteConverList=!0},t.prototype.clearConversations=function(t,n){Array.forEach(t,(function(t){Array.forEach(e.RongIMClient._memoryStore.conversationList,(function(n){t==n.conversationType&&e.RongIMClient.getInstance().removeConversation(n.conversationType,n.targetId,{onSuccess:function(){},onError:function(){}})}))})),setTimeout((function(){n.onSuccess(!0)}))},t.prototype.setMessageContent=function(e,t,n){},t.prototype.setMessageSearchField=function(e,t,n){},t.prototype.getHistoryMessages=function(t,n,r,o,i,s,a){var c={objectname:s,order:a};e.RongIMClient.getInstance().getRemoteHistoryMessages(t,n,r,o,i,c)},t.prototype.getTotalUnreadCount=function(t,n){var r=e.UnreadCountHandler.getAll(n);return t.onSuccess(r),r},t.prototype.getConversationUnreadCount=function(t,n){var r=0;Array.forEach(t,(function(t){Array.forEach(e.RongIMClient._memoryStore.conversationList,(function(e){e.conversationType==t&&(r+=e.unreadMessageCount)}))})),setTimeout((function(){n.onSuccess(r)}))},t.prototype.setUnreadCount=function(t,n,r,o){o=o||(new Date).getTime(),e.UnreadCountHandler.set(t,n,r,o)},t.prototype.getUnreadCount=function(t,n,r){var o=e.UnreadCountHandler.get(t,n);setTimeout((function(){r.onSuccess(o||0)}))},t.prototype.cleanMentioneds=function(t){if(t){t.mentionedMsg=null;var n=t.targetId,r=t.conversationType,o=e.RongIMClient._storageProvider.getItem("mentioneds_"+e.Bridge._client.userId+"_"+r+"_"+n);if(o){var i=JSON.parse(o);delete i[r+"_"+n],e.MessageUtil.isEmpty(i)?e.RongIMClient._storageProvider.removeItem("mentioneds_"+e.Bridge._client.userId+"_"+r+"_"+n):e.RongIMClient._storageProvider.setItem("mentioneds_"+e.Bridge._client.userId+"_"+r+"_"+n,JSON.stringify(i))}}},t.prototype.clearUnreadCountByTimestamp=function(e,t,n,r){setTimeout((function(){r.onSuccess(!0)}))},t.prototype.clearUnreadCount=function(t,n,r){var o=this;e.UnreadCountHandler.remove(t,n),this.getConversation(t,n,{onSuccess:function(t){var n=(t=t||new e.Conversation).unreadMessageCount;t&&(t.unreadMessageCount=0,o.cleanMentioneds(t)),setTimeout((function(){r.onSuccess(!0),n&&e.RongIMClient._dataAccessProvider.Conversation._notify(e.RongIMClient._memoryStore.conversationList)}))},onError:function(e){setTimeout((function(){r.onError(e)}))}})},t.prototype.clearTotalUnreadCount=function(t){var n=e.RongIMClient._memoryStore.conversationList,r=!1;if(n)for(var o=0;o<n.length;o++){var i=n[o];i&&(r=!!i.unreadMessageCount||r,i.unreadMessageCount=0,this.cleanMentioneds(i))}e.UnreadCountHandler.clear(),setTimeout((function(){t.onSuccess(!0),r&&e.RongIMClient._dataAccessProvider.Conversation._notify(e.RongIMClient._memoryStore.conversationList)}))},t.prototype.setConversationToTop=function(e,t,n,r){var o=this;this.getConversation(e,t,{onSuccess:function(e){e.isTop=n,o.addConversation(e,r),setTimeout((function(){r.onSuccess(!0)}))},onError:function(e){setTimeout((function(){r.onError(e)}))}})},t.prototype.getConversationNotificationStatus=function(t,n){var r=t.targetId,o=t.conversationType,i=e.RongIMClient._memoryStore.notification,s=o+"_"+r,a=i[s];if("number"!=typeof a){var c={1:"qryPPush",3:"qryDPush"}[o];if(c){var u=new e.RongIMClient.Protobuf.BlockPushInput;u.setBlockeeId(r);var l=e.Bridge._client.userId,d=function(e){i[s]=e,setTimeout((function(){n.onSuccess(e)}))};e.RongIMClient.bridge.queryMsg(c,e.MessageUtil.ArrayForm(u.toArrayBuffer()),l,{onSuccess:function(e){d(e)},onError:function(e){1==e?d(e):setTimeout((function(){n.onError(e)}))}})}else{n.onError(8001)}}else n.onSuccess(a)},t.prototype.setConversationStatus=function(t,n,r,o){var i=this,s=new e.RongIMClient.Protobuf.SessionStateModifyReq,a=e.Bridge._client.userId,c=+new Date,u=[];if(!e.RongUtil.isUndefined(r.notificationStatus)){var l=r.notificationStatus===e.ConversationNotificationStatus.DO_NOT_DISTURB;u.push({sessionStateType:1,value:l?"1":"0"})}e.RongUtil.isUndefined(r.isTop)||u.push({sessionStateType:2,value:r.isTop?"1":"0"});var d={type:t,channelId:n,time:c,stateItem:u};s.setVersion(c),s.setState([d]),e.RongIMClient.bridge.queryMsg("setSeAtt",e.MessageUtil.ArrayForm(s.toArrayBuffer()),a,{onSuccess:function(s){var a=e.MessageUtil.int64ToTimestamp(s.version);r.updateTime=a,r.isLastInAPull=!0,i.conversationStatusManager.set(t,n,r),setTimeout((function(){o.onSuccess(a)}))},onError:function(e){setTimeout((function(){o.onError(e)}))}},"SessionStateModifyResp")},t.prototype.pullConversationStatus=function(t,n){t=t||0;var r=new e.RongIMClient.Protobuf.SessionReq;r.setTime(t);var o=e.Bridge._client.userId;e.RongIMClient.bridge.queryMsg("pullSeAtts",e.MessageUtil.ArrayForm(r.toArrayBuffer()),o,{onSuccess:function(t){var r=t.state,o=t.version,i=r.length;e.RongUtil.forEach(r,(function(t,r){var o=t.type,s=t.channelId,a=t.time,c=t.stateItem,u=!1,l=!1;e.RongUtil.forEach(c,(function(e){var t=e.sessionStateType,n=e.value;1===t&&(u=!!Number(n)),2===t&&(l=!!Number(n))}));var d=r===i-1;n.onStatus(o,s,{notificationStatus:u?e.ConversationNotificationStatus.DO_NOT_DISTURB:e.ConversationNotificationStatus.NOTIFY,isTop:l,updateTime:e.MessageUtil.int64ToTimestamp(a),isLastInAPull:d})})),n.onSuccess(e.MessageUtil.int64ToTimestamp(o))},onError:function(e){setTimeout((function(){n.onError(e)}))}},"SessionStates")},t.prototype.setConversationNotificationStatus=function(t,n){var r=t.conversationType,o=t.targetId,i=t.status,s=r+"_"+i;e.RongIMClient._memoryStore.notification[s]=i;var a={"1_1":"blkPPush","3_1":"blkDPush","1_0":"unblkPPush","3_0":"unblkDPush"}[s];if(a){var c=new e.RongIMClient.Protobuf.BlockPushInput;c.setBlockeeId(o);var u=e.Bridge._client.userId;e.RongIMClient.bridge.queryMsg(a,e.MessageUtil.ArrayForm(c.toArrayBuffer()),u,{onSuccess:function(e){setTimeout((function(){n.onSuccess(e)}))},onError:function(e){setTimeout((function(){n.onError(e)}))}})}else{setTimeout((function(){n.onError(8001)}))}},t.prototype.getUserStatus=function(t,n){var r=new e.RongIMClient.Protobuf.GetUserStatusInput;t=e.Bridge._client.userId,e.RongIMClient.bridge.queryMsg(35,e.MessageUtil.ArrayForm(r.toArrayBuffer()),t,{onSuccess:function(t){t=e.RongInnerTools.convertUserStatus(t),setTimeout((function(){n.onSuccess(t)}))},onError:function(e){setTimeout((function(){n.onError(e)}))}},"GetUserStatusOutput")},t.prototype.setUserStatus=function(t,n){var r=new e.RongIMClient.Protobuf.SetUserStatusInput,o=e.Bridge._client.userId;t&&r.setStatus(t),e.RongIMClient.bridge.queryMsg(36,e.MessageUtil.ArrayForm(r.toArrayBuffer()),o,{onSuccess:function(e){setTimeout((function(){n.onSuccess(!0)}))},onError:function(e){setTimeout((function(){n.onError(e)}))}},"SetUserStatusOutput")},t.prototype.subscribeUserStatus=function(t,n){var r=new e.RongIMClient.Protobuf.SubUserStatusInput,o=e.Bridge._client.userId;r.setUserid(t),e.RongIMClient.bridge.queryMsg(37,e.MessageUtil.ArrayForm(r.toArrayBuffer()),o,{onSuccess:function(e){setTimeout((function(){n&&n.onSuccess(!0)}))},onError:function(e){setTimeout((function(){n&&n.onError(e)}))}},"SubUserStatusOutput")},t.prototype.setUserStatusListener=function(t,n){e.RongIMClient.userStatusListener=n;var r=t.userIds||[];r.length&&e.RongIMClient._dataAccessProvider.subscribeUserStatus(r)},t.prototype.clearListeners=function(){},t.prototype.setServerInfo=function(e){},t.prototype.getUnreadMentionedMessages=function(e,t){return null},t.prototype.setConversationHidden=function(e,t,n){},t.prototype.setMessageExtra=function(e,t,n){setTimeout((function(){n.onSuccess(!0)}))},t.prototype.setMessageReceivedStatus=function(e,t,n){setTimeout((function(){n.onSuccess(!0)}))},t.prototype.setMessageSentStatus=function(e,t,n){setTimeout((function(){n.onSuccess(!0)}))},t.prototype.getAllConversations=function(e){setTimeout((function(){e.onSuccess([])}))},t.prototype.getConversationByContent=function(e,t){setTimeout((function(){t.onSuccess([])}))},t.prototype.getMessagesFromConversation=function(e,t,n,r){setTimeout((function(){r.onSuccess([])}))},t.prototype.searchConversationByContent=function(e,t,n){setTimeout((function(){t.onSuccess([])}))},t.prototype.searchMessageByContent=function(e,t,n,r,o,i,s){setTimeout((function(){s.onSuccess([])}))},t.prototype.getDelaTime=function(){return e.RongIMClient._memoryStore.deltaTime},t.prototype.getCurrentConnectionStatus=function(){var t=(e.Bridge._client||{}).channel||{},n=e.ConnectionStatus.CONNECTION_CLOSED;return"number"==typeof t.connectionStatus&&(n=t.connectionStatus),n},t.prototype.getAgoraDynamicKey=function(t,n,r){var o=new e.RongIMClient.Protobuf.VoipDynamicInput;o.setEngineType(t),o.setChannelName(n),e.RongIMClient.bridge.queryMsg(32,e.MessageUtil.ArrayForm(o.toArrayBuffer()),e.Bridge._client.userId,{onSuccess:function(e){setTimeout((function(){r.onSuccess(e)}))},onError:function(e){setTimeout((function(){r.onError(e)}))}},"VoipDynamicOutput")},t.prototype.setDeviceInfo=function(e){},t.prototype.setEnvironment=function(e){},t.prototype.clearData=function(){return!0},t.prototype.getPublicServiceProfile=function(t,n,r){var o=e.RongIMClient._memoryStore.publicServiceMap.get(t,n);setTimeout((function(){r.onSuccess(o)}))},t.prototype.getRemotePublicServiceList=function(t,n){if(e.RongIMClient._memoryStore.depend.openMp){var r=new e.RongIMClient.Protobuf.PullMpInput;n?r.setTime(n):r.setTime(0),r.setMpid(""),e.RongIMClient.bridge.queryMsg(28,e.MessageUtil.ArrayForm(r.toArrayBuffer()),e.Bridge._client.userId,{onSuccess:function(n){e.RongIMClient._memoryStore.publicServiceMap.publicServiceList.length=0,e.RongIMClient._memoryStore.publicServiceMap.publicServiceList=n,setTimeout((function(){t&&t.onSuccess(n)}))},onError:function(e){setTimeout((function(){t&&t.onError(e)}))}},"PullMpOutput")}},t.prototype.getRTCUserInfoList=function(t,n){var r=new e.RongIMClient.Protobuf.RtcQueryListInput;r.setOrder(2),e.RongIMClient.bridge.queryMsg("rtcUData",e.MessageUtil.ArrayForm(r.toArrayBuffer()),t.id,{onSuccess:function(t){var r={},o=t.list;e.RongUtil.forEach(o,(function(t){var n=t.userId,o={};e.RongUtil.forEach(t.userData,(function(e){var t=e.key,n=e.value;o[t]=n})),r[n]=o})),n.onSuccess(r)},onError:function(e){n.onError(e)}},"RtcUserListOutput")},t.prototype.getRTCUserList=function(t,n){var r=new e.RongIMClient.Protobuf.RtcQueryListInput;r.setOrder(2),e.RongIMClient.bridge.queryMsg("rtcUList",e.MessageUtil.ArrayForm(r.toArrayBuffer()),t.id,{onSuccess:function(e){n.onSuccess({users:e.list})},onError:function(e){n.onError(e)}},"RtcUserListOutput")},t.prototype.setRTCUserInfo=function(t,n,r){var o=new e.RongIMClient.Protobuf.RtcValueInfo;o.setKey(n.key),o.setValue(n.value),e.RongIMClient.bridge.queryMsg("rtcUPut",e.MessageUtil.ArrayForm(o.toArrayBuffer()),t.id,{onSuccess:function(){r.onSuccess(!0)},onError:function(e){r.onError(e)}})},t.prototype.removeRTCUserInfo=function(t,n,r){var o=new e.RongIMClient.Protobuf.RtcKeyDeleteInput,i=n.keys||[];e.RongUtil.isArray(i)||(i=[i]),o.setKey(i),e.RongIMClient.bridge.queryMsg("rtcUDel",e.MessageUtil.ArrayForm(o.toArrayBuffer()),t.id,{onSuccess:function(){r.onSuccess(!0)},onError:function(e){r.onError(e)}})},t.prototype.getRTCRoomInfo=function(t,n){var r=new e.RongIMClient.Protobuf.RtcQueryListInput;r.setOrder(2),e.RongIMClient.bridge.queryMsg("rtcRInfo",e.MessageUtil.ArrayForm(r.toArrayBuffer()),t.id,{onSuccess:function(t){var r={id:t.roomId,total:t.userCount};e.RongUtil.forEach(t.roomData,(function(e){r[e.key]=e.value})),n.onSuccess(r)},onError:function(e){n.onError(e)}},"RtcRoomInfoOutput")},t.prototype.setRTCRoomInfo=function(t,n,r){var o=new e.RongIMClient.Protobuf.RtcValueInfo;o.setKey(n.key),o.setValue(n.value),e.RongIMClient.bridge.queryMsg("rtcRPut",e.MessageUtil.ArrayForm(o.toArrayBuffer()),t.id,{onSuccess:function(){r.onSuccess(!0)},onError:function(e){r.onError(e)}})},t.prototype.removeRTCRoomInfo=function(t,n,r){var o=new e.RongIMClient.Protobuf.RtcKeyDeleteInput,i=n.keys||[];e.RongUtil.isArray(i)||(i=[i]),o.setKey(i),e.RongIMClient.bridge.queryMsg("rtcRDel",e.MessageUtil.ArrayForm(o.toArrayBuffer()),t.id,{onSuccess:function(){r.onSuccess(!0)},onError:function(e){r.onError(e)}})},t.prototype.joinRTCRoom=function(t,n){var r=new e.RongIMClient.Protobuf.RtcInput,o=t.mode||0;r.setRoomType(o),t.broadcastType&&r.setBroadcastType(t.broadcastType),e.RongIMClient.bridge.queryMsg("rtcRJoin_data",e.MessageUtil.ArrayForm(r.toArrayBuffer()),t.id,{onSuccess:function(t){var r={},o=t.list,i=t.token,s=t.sessionId;e.RongUtil.forEach(o,(function(t){var n=t.userId,o={};e.RongUtil.forEach(t.userData,(function(e){var t=e.key,n=e.value;o[t]=n})),r[n]=o})),n.onSuccess({users:r,token:i,sessionId:s})},onError:function(e){n.onError(e)}},"RtcUserListOutput")},t.prototype.quitRTCRoom=function(t,n){var r=new e.RongIMClient.Protobuf.SetUserStatusInput;e.RongIMClient.bridge.queryMsg("rtcRExit",e.MessageUtil.ArrayForm(r.toArrayBuffer()),t.id,{onSuccess:function(){n.onSuccess(!0)},onError:function(e){n.onError(e)}})},t.prototype.RTCPing=function(t,n){var r=new e.RongIMClient.Protobuf.RtcInput,o=t.mode||0;r.setRoomType(o),t.broadcastType&&r.setBroadcastType(t.broadcastType),e.RongIMClient.bridge.queryMsg("rtcPing",e.MessageUtil.ArrayForm(r.toArrayBuffer()),t.id,n)},t.prototype.setRTCTotalRes=function(t,n,r,o,i){var s=new e.RongIMClient.Protobuf.RtcUserSetDataInput;s.setObjectName(o);var a=new e.RongIMClient.Protobuf.RtcValueInfo;a.setKey(n.name),a.setValue(n.content),s.setContent(a),(a=new e.RongIMClient.Protobuf.RtcValueInfo).setKey("uris"),a.setValue(r),s.setValueInfo(a);var c=e.MessageUtil.ArrayForm(s.toArrayBuffer());e.RongIMClient.bridge.queryMsg("userSetData",c,t,i,"RtcOutput")},t.prototype.setRTCData=function(t,n,r,o,i,s,a){var c=new e.RongIMClient.Protobuf.RtcSetDataInput;c.setInterior(o),c.setTarget(i),c.setKey(n),c.setValue(r);var u=(a=a||{}).name,l=a.content;u&&c.setObjectName(u),l&&(e.RongUtil.isString(l)||(l=JSON.stringify(l)),c.setContent(l)),e.RongIMClient.bridge.queryMsg("rtcSetData",e.MessageUtil.ArrayForm(c.toArrayBuffer()),t,s,"RtcOutput")},t.prototype.getRTCData=function(t,n,r,o,i){var s=new e.RongIMClient.Protobuf.RtcDataInput;s.setInterior(r),s.setTarget(o),s.setKey(n),e.RongIMClient.bridge.queryMsg("rtcQryData",e.MessageUtil.ArrayForm(s.toArrayBuffer()),t,{onSuccess:function(t){var n={},r=t.outInfo;e.RongUtil.forEach(r,(function(e){n[e.key]=e.value})),i.onSuccess(n)},onError:i.onError},"RtcQryOutput")},t.prototype.removeRTCData=function(t,n,r,o,i,s){var a=new e.RongIMClient.Protobuf.RtcDataInput;a.setInterior(r),a.setTarget(o),a.setKey(n);var c=(s=s||{}).name,u=s.content;c&&a.setObjectName(c),u&&(e.RongUtil.isString(u)||(u=JSON.stringify(u)),a.setContent(u)),e.RongIMClient.bridge.queryMsg("rtcDelData",e.MessageUtil.ArrayForm(a.toArrayBuffer()),t,i,"RtcOutput")},t.prototype.setRTCUserData=function(t,n,r,o,i,s){this.setRTCData(t,n,r,o,e.RTCAPIType.PERSON,i,s)},t.prototype.setRTCUserTotalRes=function(e,t,n,r,o){this.setRTCTotalRes(e,t,n,r,o)},t.prototype.getRTCUserData=function(t,n,r,o,i){this.getRTCData(t,n,r,e.RTCAPIType.PERSON,o)},t.prototype.removeRTCUserData=function(t,n,r,o,i){this.removeRTCData(t,n,r,e.RTCAPIType.PERSON,o,i)},t.prototype.setRTCRoomData=function(t,n,r,o,i,s){this.setRTCData(t,n,r,o,e.RTCAPIType.ROOM,i,s)},t.prototype.getRTCRoomData=function(t,n,r,o,i){this.getRTCData(t,n,r,e.RTCAPIType.ROOM,o)},t.prototype.removeRTCRoomData=function(t,n,r,o,i){this.removeRTCData(t,n,r,e.RTCAPIType.ROOM,o,i)},t.prototype.setRTCOutData=function(t,n,r,o,i){var s=new e.RongIMClient.Protobuf.RtcSetOutDataInput;s.setTarget(r),e.RongUtil.isArray(n)||(n=[n]);for(var a=0;a<n.length;a++){var c=n[a];c.key&&(c.key=c.key.toString()),c.value&&(c.value=c.value.toString())}s.setValueInfo(n);var u=(i=i||{}).name,l=i.content;u&&s.setObjectName(u),l&&(e.RongUtil.isString(l)||(l=JSON.stringify(l)),s.setContent(l)),e.RongIMClient.bridge.queryMsg("rtcSetOutData",e.MessageUtil.ArrayForm(s.toArrayBuffer()),t,o,"RtcOutput")},t.prototype.getRTCOutData=function(t,n,r){var o=new e.RongIMClient.Protobuf.RtcQryUserOutDataInput;o.setUserId(n),e.RongIMClient.bridge.queryMsg("rtcQryUserOutData",e.MessageUtil.ArrayForm(o.toArrayBuffer()),t,r,"RtcUserOutDataOutput")},t.prototype.getNavi=function(){var t=e.RongIMClient._storageProvider.getItem("fullnavi")||"{}";return JSON.parse(t)},t.prototype.getRTCToken=function(t,n){var r=new e.RongIMClient.Protobuf.RtcInput,o=t.mode||0;r.setRoomType(o),t.broadcastType&&r.setBroadcastType(t.broadcastType),e.RongIMClient.bridge.queryMsg("rtcToken",e.MessageUtil.ArrayForm(r.toArrayBuffer()),t.id,{onSuccess:function(e){n.onSuccess(e)},onError:function(e){n.onError(e)}},"RtcTokenOutput")},t.prototype.setRTCState=function(t,n,r){var o=new e.RongIMClient.Protobuf.MCFollowInput,i=n.report;o.setId(i),e.RongIMClient.bridge.queryMsg("rtcUserState",e.MessageUtil.ArrayForm(o.toArrayBuffer()),t.id,{onSuccess:function(e){r.onSuccess(e)},onError:function(e){r.onError(e)}},"RtcOutput")},t}();e.ServerDataProvider=t}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(t){this.Conversation={watcher:new e.Observer,watch:function(e){},unwatch:function(e){},_notify:function(e){}},this.version="2.8.27",this.userId="",this.useConsole=!1,this.appKey="",this.token="",this.connectionStatus=e.ConnectionStatus.DISCONNECTED,this.addon=t}return t.prototype.init=function(e,t){this.appKey=e,this.useConsole&&console.log("init"),(t=t||{}).version=this.version;var n=this.addon.initWithAppkey(e,t.dbPath,t);return n&&(n=JSON.parse(n)),this.addon.registerMessageType("RC:VcMsg",3),this.addon.registerMessageType("RC:ImgTextMsg",3),this.addon.registerMessageType("RC:FileMsg",3),this.addon.registerMessageType("RC:LBSMsg",3),this.addon.registerMessageType("RC:PSImgTxtMsg",3),this.addon.registerMessageType("RC:PSMultiImgTxtMsg",3),this.addon.registerMessageType("RCJrmf:RpMsg",3),this.addon.registerMessageType("RCJrmf:RpOpendMsg",1),this.addon.registerMessageType("RC:GrpNtf",1),this.addon.registerMessageType("RC:DizNtf",0),this.addon.registerMessageType("RC:InfoNtf",0),this.addon.registerMessageType("RC:ContactNtf",0),this.addon.registerMessageType("RC:ProfileNtf",0),this.addon.registerMessageType("RC:CmdNtf",0),this.addon.registerMessageType("RC:CmdMsg",0),this.addon.registerMessageType("RC:TypSts",0),this.addon.registerMessageType("RC:CsChaR",0),this.addon.registerMessageType("RC:CsHsR",0),this.addon.registerMessageType("RC:CsEnd",0),this.addon.registerMessageType("RC:CsSp",0),this.addon.registerMessageType("RC:CsUpdate",0),this.addon.registerMessageType("RC:CsContact",0),this.addon.registerMessageType("RC:ReadNtf",0),this.addon.registerMessageType("RC:VCAccept",0),this.addon.registerMessageType("RC:VCRinging",0),this.addon.registerMessageType("RC:VCSummary",0),this.addon.registerMessageType("RC:VCHangup",0),this.addon.registerMessageType("RC:VCInvite",0),this.addon.registerMessageType("RC:VCModifyMedia",0),this.addon.registerMessageType("RC:VCModifyMem",0),this.addon.registerMessageType("RC:PSCmd",0),this.addon.registerMessageType("RC:RcCmd",0),this.addon.registerMessageType("RC:SRSMsg",0),this.addon.registerMessageType("RC:RRReqMsg",0),this.addon.registerMessageType("RC:RRRspMsg",0),n},t.prototype.connect=function(t,n,r,o){this.useConsole&&console.log("connect"),this.userId=r,this.connectCallback=n,e.Bridge._client={userId:r,token:t};(o=o||{}).openMp,o.openUS;o.type&&this.addon.setEnvironment(!0);var i=this;this.addon.connectWithToken(t,r,(function(t){i.userId=t,e.Bridge._client.userId=t}))},t.prototype.setConversationStatus=function(e,t,n,r){},t.prototype.setServerInfo=function(e){"setServerInfo"in this.addon&&this.addon.setServerInfo(e.navi)},t.prototype.logout=function(){this.useConsole&&console.log("logout"),this.disconnect()},t.prototype.disconnect=function(){this.useConsole&&console.log("disconnect"),this.connectionStatus=e.ConnectionStatus.DISCONNECTED,this.addon.disconnect(!0)},t.prototype.clearListeners=function(){this.addon.setOnReceiveStatusListener(),this.addon.setConnectionStatusListener(),this.addon.setOnReceiveMessageListener()},t.prototype.clearData=function(){return this.useConsole&&console.log("clearData"),this.addon.clearData()},t.prototype.setConnectionStatusListener=function(t){var n=this;n.connectListener=t,this.useConsole&&console.log("setConnectionStatusListener"),n.addon&&n.addon.setConnectionStatusListener((function(r){var o=n.connectionStatus===e.ConnectionStatus.CONNECTED,i=r;switch(r){case 10:i=e.ConnectionStatus.CONNECTING;break;case 31004:return void setTimeout((function(){n.connectCallback.onTokenIncorrect()}));case 1:case 8:case 9:case 11:case 12:case 31011:case 3e4:case 30002:case 30010:if(!o)return;i=e.ConnectionStatus.NETWORK_UNAVAILABLE;break;case 0:case 33005:i=e.ConnectionStatus.CONNECTED,setTimeout((function(){n.connectCallback.onSuccess(n.userId)}));break;case 6:i=e.ConnectionStatus.KICKED_OFFLINE_BY_OTHER_CLIENT;break;default:i=r}n.connectionStatus=i,setTimeout((function(){t.onChanged(i)}))}))},t.prototype.setOnReceiveMessageListener=function(t){var n=this;n.messageListener=t,this.useConsole&&console.log("setOnReceiveMessageListener"),n.addon&&n.addon.setOnReceiveMessageListener((function(r,o,i,s){var a=n.buildMessage(r);a.offLineMessage=i,setTimeout((function(){["AcceptMessage","RingingMessage","HungupMessage","InviteMessage","MediaModifyMessage","MemberModifyMessage"].indexOf(a.messageType)>-1?e.RongIMClient._voipProvider&&e.RongIMClient._voipProvider.onReceived(a):12==a.conversationType?(e.RongIMClient.RTCListener(a),e.RongIMClient.RTCInnerListener(a),e.RongIMClient.RTCSignalLisener(a)):t.onReceived(a,o,s)}))}))},t.prototype.sendTypingStatusMessage=function(t,n,r,o){this.useConsole&&console.log("sendTypingStatusMessage"),r in e.RongIMClient.MessageParams&&this.sendMessage(t,n,e.TypingStatusMessage.obtain(e.RongIMClient.MessageParams[r].objectName,""),{onSuccess:function(){setTimeout((function(){o.onSuccess()}))},onError:function(e){setTimeout((function(){o.onError(e,null)}))},onBefore:function(){}})},t.prototype.setMessageStatus=function(e,t,n,r,o){this.addon.updateMessageReceiptStatus(e,t,n),o.onSuccess(!0)},t.prototype.sendTextMessage=function(t,n,r,o){var i=e.TextMessage.obtain(r);this.useConsole&&console.log("sendTextMessage"),this.sendMessage(t,n,i,o)},t.prototype.getRemoteHistoryMessages=function(t,n,r,o,i,s){try{var a=this;a.useConsole&&console.log("getRemoteHistoryMessages"),a.addon.getRemoteHistoryMessages(t,n,r||0,o,(function(t,n){var r=t?JSON.parse(t).list:[],o=[];r.reverse();for(var s=0,c=r.length;s<c;s++){var u=a.buildMessage(r[s].obj);u.sentStatus=e.SentStatus.READ,o[s]=u}i.onSuccess(o,!!n)}),(function(e){i.onError(e)}))}catch(e){i.onError(e)}},t.prototype.getRemoteConversationList=function(e,t,n,r){try{this.useConsole&&console.log("getRemoteConversationList");var o=t||[1,2,3,4,5,6,7,8],i=this.addon.getConversationList(o),s=JSON.parse(i).list,a=[],c=0;s.reverse(),r="boolean"==typeof r&&r;for(var u=0,l=s.length;u<l;u++){var d=s[u].obj,f=JSON.parse(d);if(""!=f){if(1==f.isHidden&&r)continue;a[c]=this.buildConversation(d),c++}}a.reverse();var p=a.length;p>(n=n||p)&&(a.length=n),e.onSuccess(a)}catch(t){e.onError(t)}},t.prototype.removeConversation=function(t,n,r){try{this.useConsole&&console.log("removeConversation"),this.addon.removeConversation(t,n);for(var o=e.RongIMClient._memoryStore.conversationList,i=o.length,s=0;s<i;s++)if(o[s].conversationType==t&&n==o[s].targetId){o.splice(s,1);break}r.onSuccess(!0)}catch(e){r.onError(e)}},t.prototype.joinChatRoom=function(e,t,n){this.useConsole&&console.log("joinChatRoom"),this.addon.joinChatRoom(e,t,(function(){n.onSuccess()}),(function(e){n.onError(e)}))},t.prototype.quitChatRoom=function(e,t){this.useConsole&&console.log("quitChatRoom"),this.addon.quitChatRoom(e,(function(){t.onSuccess()}),(function(e){t.onError(e)}))},t.prototype.setChatroomEntry=function(e,t,n){},t.prototype.forceSetChatroomEntry=function(e,t,n){},t.prototype.getChatroomEntry=function(e,t,n){},t.prototype.getAllChatroomEntries=function(e,t){},t.prototype.removeChatroomEntry=function(e,t,n){},t.prototype.forceRemoveChatroomEntry=function(e,t,n){},t.prototype.pullChatroomEntry=function(e,t,n){},t.prototype.addToBlacklist=function(e,t){this.useConsole&&console.log("addToBlacklist"),this.addon.addToBlacklist(e,(function(){t.onSuccess()}),(function(e){t.onError(e)}))},t.prototype.getBlacklist=function(e){this.useConsole&&console.log("getBlacklist"),this.addon.getBlacklist((function(t){e.onSuccess(t)}),(function(t){e.onError(t)}))},t.prototype.getBlacklistStatus=function(e,t){this.useConsole&&console.log("getBlacklistStatus"),this.addon.getBlacklistStatus(e,(function(e){t.onSuccess(e)}),(function(e){t.onError(e)}))},t.prototype.removeFromBlacklist=function(e,t){this.useConsole&&console.log("removeFromBlacklist"),this.addon.removeFromBlacklist(e,(function(){t.onSuccess()}),(function(e){t.onError(e)}))},t.prototype.sendMessage=function(t,n,r,o,i,s,a,c,u){var l=this,d=[];l.useConsole&&console.log("sendMessage"),u=u||{};var f=t==e.ConversationType.DISCUSSION||t==e.ConversationType.GROUP;if(f&&r.messageName==e.RongIMClient.MessageType.ReadReceiptResponseMessage){d=[];var p=r;if(p.receiptMessageDic){var g=[];for(var h in p.receiptMessageDic)g.push(h);d=g}}f&&r.messageName==e.RongIMClient.MessageType.SyncReadStatusMessage&&(d=[]).push(l.userId);var m=u.userIds;f&&m&&(d=m);var v=l.addon.sendMessage(t,n,e.RongIMClient.MessageParams[r.messageName].objectName,r.encode(),s||"",a||"",(function(e){}),(function(t,n){var r=l.buildMessage(t),i=e.ErrorCode.SENSITIVE_REPLACE;if(n==i)return o.onError(i,r);o.onSuccess(r)}),(function(e,t){o.onError(t,l.buildMessage(e))}),d,i),y=JSON.parse(v);o.onBefore&&o.onBefore(y.messageId),e.MessageIdHandler.messageId=y.messageId},t.prototype.registerMessageType=function(t,n,r,o,i){this.useConsole&&console.log("registerMessageType"),this.addon.registerMessageType(n,r.getMessageTag(),i);var s=e.ModelUtil.modleCreate(o,t);e.RongIMClient.RegisterMessage[t]=s,e.RongIMClient.RegisterMessage[t].messageName=t,registerMessageTypeMapping[n]=t,e.RongIMClient.MessageType[t]=t,e.RongIMClient.MessageParams[t]={objectName:n,msgTag:r},typeMapping[n]=t},t.prototype.registerMessageTypes=function(t){var n=[],r=function(e){var t=[];for(var n in e)t.push(n);return t};for(var o in t){var i=r((d=t[o]).proto),s=d.flag||3,a=e.MessageTag.getTagByStatus(s);s=new e.MessageTag(a.isCounted,a.isPersited),n.push({type:o,name:d.name,flag:s,protos:i})}for(var c=function(t){var n=t.type,r=t.name,o=t.flag,i=t.protos;e.RongIMClient.registerMessageType(n,r,o,i)},u=0,l=n.length;u<l;u++){var d;c(d=n[u])}},t.prototype.addMessage=function(t,n,r,o){this.useConsole&&console.log("addMessage");var i=r.direction,s=this.addon.insertMessage(t,n,r.senderUserId,r.objectName,JSON.stringify(r.content),(function(){o.onSuccess(a.buildMessage(s))}),(function(){o.onError(e.ErrorCode.MSG_INSERT_ERROR)}),i),a=this},t.prototype.removeMessage=function(e,t,n,r){},t.prototype.deleteRemoteMessages=function(e,t,n,r){},t.prototype.removeLocalMessage=function(e,t,n,r){try{this.useConsole&&console.log("removeLocalMessage"),this.addon.deleteMessages(n),r.onSuccess(!0)}catch(e){r.onError(e)}},t.prototype.getMessage=function(e,t){try{this.useConsole&&console.log("getMessage");var n=this.buildMessage(this.addon.getMessage(e));t.onSuccess(n)}catch(e){t.onError(e)}},t.prototype.clearMessages=function(e,t,n){try{this.useConsole&&console.log("clearMessages"),this.addon.clearMessages(e,t),n.onSuccess(!0)}catch(e){n.onError(e)}},t.prototype.setUnreadCount=function(e,t,n){},t.prototype.getConversation=function(e,t,n){try{this.useConsole&&console.log("getConversation");var r=this.addon.getConversation(e,t);n.onSuccess(this.buildConversation(r))}catch(e){n.onError(e)}},t.prototype.getConversationList=function(e,t,n,r){this.useConsole&&console.log("getConversationList"),this.getRemoteConversationList(e,t,n,r)},t.prototype.clearCache=function(){var t=e.RongIMClient._memoryStore||{};t.conversationList=[],t.isSyncRemoteConverList},t.prototype.clearConversations=function(e,t){try{this.useConsole&&console.log("clearConversations"),this.addon.clearConversations(),t.onSuccess(!0)}catch(e){t.onError(e)}},t.prototype.setMessageContent=function(e,t,n){t=JSON.stringify(t),this.addon.setMessageContent(e,t,n)},t.prototype.setMessageSearchField=function(e,t,n){this.addon.setMessageSearchField(e,t,n)},t.prototype.getHistoryMessages=function(t,n,r,o,i,s,a){if(this.useConsole&&console.log("getHistoryMessages"),o<=0)i.onError(e.ErrorCode.TIMEOUT);else{s=s||"",a=void 0===a||a;try{var c=this.addon.getHistoryMessages(t,n,r||0,o,s,a),u=c?JSON.parse(c).list:[],l=[];u.reverse();for(var d=0,f=u.length;d<f;d++){var p=this.buildMessage(u[d].obj);l[d]=p}i.onSuccess(l,f==o)}catch(e){i.onError(e)}}},t.prototype.clearRemoteHistoryMessages=function(t,n){var r=t.conversationType,o=t.targetId,i=t.timestamp;!{1:!0,2:!0,3:!0,5:!0,6:!0}[r]?n.onError(e.ErrorCode.CLEAR_HIS_TYPE_ERROR):"number"==typeof i?this.addon.clearRemoteHistoryMessages(+r,o,i,(function(){n.onSuccess(!0)}),(function(t){1==t&&(t=e.ErrorCode.CLEAR_HIS_ERROR),n.onError(t)})):n.onError(e.ErrorCode.CLEAR_HIS_TIME_ERROR)},t.prototype.clearHistoryMessages=function(t,n){var r=+t.conversationType,o=t.targetId;try{this.addon.clearMessages(r,o);n.onSuccess(!0)}catch(t){console.log(t),n.onError(e.ErrorCode.CLEAR_HIS_ERROR)}},t.prototype.getTotalUnreadCount=function(e,t){var n=0;try{this.useConsole&&console.log("getTotalUnreadCount"),n=t?this.addon.getTotalUnreadCount(t):this.addon.getTotalUnreadCount(),e.onSuccess(n)}catch(t){e.onError(t)}return n},t.prototype.getConversationUnreadCount=function(e,t){this.useConsole&&console.log("getConversationUnreadCount"),this.getTotalUnreadCount(t,e)},t.prototype.getUnreadCount=function(e,t,n){try{this.useConsole&&console.log("getUnreadCount");var r=this.addon.getUnreadCount(e,t);n.onSuccess(r)}catch(e){n.onError(e)}},t.prototype.clearUnreadCount=function(e,t,n){try{this.useConsole&&console.log("clearUnreadCount");this.addon.clearUnreadCount(e,t);n.onSuccess(!0)}catch(e){n.onError(e)}},t.prototype.clearTotalUnreadCount=function(e){this.useConsole&&console.log("clearTotalUnreadCount")},t.prototype.clearUnreadCountByTimestamp=function(e,t,n,r){try{this.useConsole&&console.log("clearUnreadCountByTimestamp");this.addon.clearUnreadCountByTimestamp(e,t,n);r.onSuccess(!0)}catch(e){r.onError(e)}},t.prototype.setConversationToTop=function(e,t,n,r){try{this.useConsole&&console.log("setConversationToTop"),this.addon.setConversationToTop(e,t,n),r.onSuccess(!0)}catch(e){r.onError(e)}},t.prototype.setConversationHidden=function(e,t,n){this.addon.setConversationHidden(e,t,n)},t.prototype.setMessageReceivedStatus=function(e,t,n){try{this.useConsole&&console.log("setMessageReceivedStatus"),this.addon.setMessageReceivedStatus(e,t),n.onSuccess(!0)}catch(e){n.onError(e)}},t.prototype.setMessageSentStatus=function(e,t,n){try{this.useConsole&&console.log("setMessageSentStatus"),this.addon.setMessageSentStatus(e,t),n.onSuccess(!0)}catch(e){n.onError(e)}},t.prototype.getFileToken=function(e,t){this.useConsole&&console.log("getFileToken"),this.addon.getUploadToken(e,(function(e){t.onSuccess({token:e})}),(function(e){t.onError(e)}))},t.prototype.getFileUrl=function(e,t,n,r){this.useConsole&&console.log("getFileUrl"),this.addon.getDownloadUrl(e,t,n,(function(e){r.onSuccess({downloadUrl:e})}),(function(e){r.onError(e)}))},t.prototype.getPullSetting=function(e){this.useConsole&&console.log("getPullSetting")},t.prototype.setOfflineMessageDuration=function(e,t){this.useConsole&&console.log("setOfflineMessageDuration")},t.prototype.searchConversationByContent=function(e,t,n){var r=[];r=void 0===n?[1,2,3,4,5,6,7]:n;try{this.useConsole&&console.log("searchConversationByContent");var o=this.addon.searchConversationByContent(r,e),i=JSON.parse(o).list,s=[];i.reverse();for(var a=0,c=i.length;a<c;a++)s[a]=this.buildConversation(i[a].obj);t.onSuccess(s)}catch(e){t.onError(e)}},t.prototype.searchMessageByContent=function(e,t,n,r,o,i,s){var a=this;try{this.useConsole&&console.log("searchMessageByContent"),this.addon.searchMessageByContent(e,t,n,r,o,i,(function(e,t){var n=e?JSON.parse(e).list:[],r=[];n.reverse();for(var o=0,i=n.length;o<i;o++)r[o]=a.buildMessage(n[o].obj);s.onSuccess(r,t)}))}catch(e){s.onError(e)}},t.prototype.getChatRoomInfo=function(e,t,n,r){this.useConsole&&console.log("getChatRoomInfo"),this.addon.getChatroomInfo(e,t,n,(function(e,t){var n=e?JSON.parse(e).list:[],o={userInfos:[],userTotalNums:t};if(n.length>0)for(var i=0,s=n.length;i<s;i++)o.userInfos.push(JSON.parse(n[i].obj));r.onSuccess(o)}),(function(e){r.onError(e)}))},t.prototype.setChatroomHisMessageTimestamp=function(e,t){},t.prototype.getChatRoomHistoryMessages=function(e,t,n,r){},t.prototype.getDelaTime=function(){return this.addon.getDeltaTime()},t.prototype.getUserStatus=function(t,n){this.addon.getUserStatus(t,(function(t){var r=e.RongInnerTools.convertUserStatus({status:t,userId:""});n.onSuccess(r)}),(function(e){n.onError(e)}))},t.prototype.setUserStatus=function(e,t){this.addon.setUserStatus(e,(function(){t.onSuccess(!0)}),(function(e){t.onError(e)}))},t.prototype.subscribeUserStatus=function(e,t){this.addon.subscribeUserStatus(e,(function(){t&&t.onSuccess(!0)}),(function(e){t&&t.onError(e)}))},t.prototype.setUserStatusListener=function(t,n){this.addon.setOnReceiveStatusListener((function(t,n){var r=e.RongInnerTools.convertUserStatus({userId:t,status:n});e.RongIMClient.userStatusObserver.notify({key:t,entity:r})}));var r=t.userIds||[];r.length&&e.RongIMClient._dataAccessProvider.subscribeUserStatus(r)},t.prototype.getUnreadMentionedMessages=function(e,t){for(var n=JSON.parse(this.addon.getUnreadMentionedMessages(e,t)).list,r=0,o=n.length;r<o;r++){var i=JSON.parse(n[r].obj);i.content=JSON.parse(i.content),n[r]=i}return n},t.prototype.hasRemoteUnreadMessages=function(e,t){t.onSuccess(!1)},t.prototype.sendRecallMessage=function(e,t){var n=this;n.addon.recallMessage("RC:RcCmd",JSON.stringify(e),e.push||"",(function(){e.objectName="RC:RcCmd",t.onSuccess(n.buildMessage(JSON.stringify(e)))}),(function(e){t.onError(e)}))},t.prototype.updateMessage=function(e,t){},t.prototype.updateMessages=function(e,t,n,r,o){},t.prototype.reconnect=function(t){var n=e.Bridge._client.token;this.disconnect(),this.connect(n,t)},t.prototype.sendReceiptResponse=function(e,t,n){},t.prototype.setMessageExtra=function(e,t,n){},t.prototype.addMemberToDiscussion=function(e,t,n){},t.prototype.createDiscussion=function(e,t,n){},t.prototype.getDiscussion=function(e,t){},t.prototype.quitDiscussion=function(e,t){},t.prototype.removeMemberFromDiscussion=function(e,t,n){},t.prototype.setDiscussionInviteStatus=function(e,t,n){},t.prototype.setDiscussionName=function(e,t,n){},t.prototype.setEnvironment=function(e){this.addon.setEnvironment(e)},t.prototype.addConversation=function(e,t){},t.prototype.updateConversation=function(e){return null},t.prototype.getConversationNotificationStatus=function(t,n){var r=t.conversationType,o=t.targetId,i=e.RongIMClient._memoryStore.notification,s=r+"_"+o,a=i[s];"number"!=typeof a?this.addon.getConversationNotificationStatus(r,o,(function(e){i[s]=e,n.onSuccess(e)}),(function(e){n.onError(e)})):n.onSuccess(a)},t.prototype.setConversationNotificationStatus=function(t,n){var r=t.conversationType,o=t.targetId,i=t.status;e.RongIMClient._memoryStore.notification[r+"_"+o]=i;var s=!!i;this.addon.setConversationNotificationStatus(r,o,s,(function(){n.onSuccess(i)}),(function(e){n.onError(e)}))},t.prototype.getCurrentConnectionStatus=function(){return this.addon.getConnectionStatus()},t.prototype.getAgoraDynamicKey=function(e,t,n){this.addon.getVoIPKey(e,t,"",(function(e){n.onSuccess(e)}),(function(e){n.onError(e)}))},t.prototype.getPublicServiceProfile=function(t,n,r){var o=e.RongIMClient._memoryStore.publicServiceMap.get(t,n);r.onSuccess(o)},t.prototype.setDeviceInfo=function(e){var t=e.id||"";this.addon.setDeviceId(t)},t.prototype.getRemotePublicServiceList=function(t,n){var r=[],o=this.addon.getAccounts(),i=function(e){var t={hasFollowed:!1,isGlobal:!1,menu:null};if(!e.obj){var n={error:e};throw new Error("å¬ä¼è´¦å·æ°æ®æ ¼å¼éè¯¯: "+JSON.stringify(n))}var r=JSON.parse(e.obj),o={aType:"conversationType",aId:"publicServiceId",aName:"introduction",aUri:"portraitUri",follow:"hasFollowed",isGlobal:"isGlobal"};for(var i in r){var s=r[i];if("aExtra"==i){var a=JSON.parse(s);t.hasFollowed=a.follow,t.isGlobal=a.isGlobal,t.menu=a.menu}var c=o[i];c&&(t[c]=s)}return t};if(o)for(var s=(o=JSON.parse(o)).list,a=0,c=s.length;a<c;a++){var u=s[a];u=i(u),r.push(u)}r.length>0&&(e.RongIMClient._memoryStore.publicServiceMap.publicServiceList.length=0,e.RongIMClient._memoryStore.publicServiceMap.publicServiceList=r),t.onSuccess(e.RongIMClient._memoryStore.publicServiceMap.publicServiceList)},t.prototype.buildMessage=function(t){var n=new e.Message,r=JSON.parse(t);n.conversationType=r.conversationType,n.targetId=r.targetId,n.messageDirection=r.direction,n.senderUserId=r.senderUserId,r.direction==e.MessageDirection.RECEIVE?n.receivedStatus=r.status:r.direction==e.MessageDirection.SEND&&(n.sentStatus=r.status),n.sentTime=r.sentTime,n.objectName=r.objectName;var o=r.content?JSON.parse(r.content):r.content,i=typeMapping[r.objectName]||registerMessageTypeMapping[r.objectName];return o&&(o.messageName=i),n.content=o,n.messageId=r.messageId,n.messageUId=r.messageUid,n.messageType=i,n},t.prototype.buildConversation=function(t){if(""===t)return null;var n=new e.Conversation,r=JSON.parse(t),o=r.lastestMsg?this.buildMessage(r.lastestMsg):{};n.conversationTitle=r.title,n.conversationType=r.conversationType,n.draft=r.draft,n.isTop=r.isTop,n.isHidden=r.isHidden,o.conversationType=r.conversationType,o.targetId=r.targetId,n.latestMessage=o,n.latestMessageId=o.messageId,n.latestMessage.messageType=typeMapping[o.objectName]||registerMessageTypeMapping[o.objectName],n.objectName=o.objectName,n.receivedStatus=e.ReceivedStatus.READ,n.sentTime=o.sentTime,n.senderUserId=o.senderUserId,n.sentStatus=o.status,n.targetId=r.targetId,n.unreadMessageCount=r.unreadCount,n.hasUnreadMention=r.m_hasUnreadMention;var i=this.getUnreadMentionedMessages(r.conversationType,r.targetId);if(i.length>0){var s=i.pop();n.mentionedMsg={uid:s.messageUid,time:s.sentTime,mentionedInfo:s.content.mentionedInfo,sendUserId:s.senderUserId}}return n},t.prototype.getRTCUserInfoList=function(e,t){this.addon.getRTCUsers(e.id,1,(function(e){t.onSuccess(e)}),(function(e){t.onError(e)}))},t.prototype.getRTCRoomInfo=function(e,t){this.addon.getRTCResouce(e.id,2,(function(e){t.onSuccess(JSON.parse(e))}),(function(e){t.onError(e)}))},t.prototype.joinRTCRoom=function(t,n){var r=t.id,o=t.type||0;this.addon.joinRTCRoom(r,o,(function(t,r){var o=JSON.parse(t),i={},s=o.list;e.RongUtil.forEach(s,(function(t){var n=t.id,r={};e.RongUtil.forEach(t.data,(function(e){var t=e.key,n=e.value;r[t]=n})),i[n]=r})),n.onSuccess({users:i,token:r})}),(function(e){n.onError(e)}))},t.prototype.quitRTCRoom=function(e,t){this.addon.exitRTCRoom(e.id,(function(){t.onSuccess(!0)}),(function(e){t.onError(e)}))},t.prototype.RTCPing=function(e,t){this.addon.sendRTCPing(e.id,(function(){t.onSuccess(!0)}),(function(e){t.onError(e)}))},t.prototype.setRTCData=function(t,n,r,o,i,s,a){var c=this,u={room_inner:function(t,n,r,o,i,s,a){c.addon.setRTCInnerData(t,e.RTCAPIType.ROOM,n,r,o,i,s,a)},room_outer:function(t,n,r,o,i,s,a){c.addon.setRTCOuterData(t,e.RTCAPIType.ROOM,n,r,o,i,s,a)},user_inner:function(t,n,r,o,i,s,a){c.addon.setRTCInnerData(t,e.RTCAPIType.PERSON,n,r,o,i,s,a)},user_outer:function(t,n,r,o,i,s,a){c.addon.setRTCOuterData(t,e.RTCAPIType.PERSON,n,r,o,i,s,a)}},l=e.RTCAPIType.PERSON==i?"user":"room",d=o?"inner":"outer",f=u[e.RongUtil.tplEngine("{type}_{direction}",{type:l,direction:d})];f&&f(t,n,r,(a=a||{}).name,a.content,(function(){s.onSuccess(!0)}),(function(e){s.onError(e)}))},t.prototype.setRTCRoomData=function(t,n,r,o,i,s){this.setRTCData(t,n,r,o,e.RTCAPIType.ROOM,i,s)},t.prototype.getRTCData=function(t,n,r,o,i){var s=this,a={room_inner:function(t,n,r,o){s.addon.getRTCInnerData(t,e.RTCAPIType.ROOM,n,r,o)},room_outer:function(t,n,r,o){s.addon.getRTCOuterData(t,e.RTCAPIType.ROOM,n,r,o)}},c=e.RTCAPIType.PERSON==o?"user":"room",u=r?"inner":"outer",l=a[e.RongUtil.tplEngine("{type}_{direction}",{type:c,direction:u})];l&&l(t,n,(function(t){var n=JSON.parse(t),r={},o=n.list;e.RongUtil.forEach(o,(function(e){r[e.key]=e.value})),i.onSuccess(r)}),(function(e){i.onError(e)}))},t.prototype.getRTCRoomData=function(t,n,r,o,i){this.getRTCData(t,n,r,e.RTCAPIType.ROOM,o)},t.prototype.removeRTCData=function(t,n,r,o,i,s){var a=this,c={room_inner:function(t,n,r,o,i,s){a.addon.deleteRTCInnerData(t,e.RTCAPIType.ROOM,n,r,o,i,s)},room_outer:function(t,n,r,o,i,s){a.addon.deleteRTCOuterData(t,e.RTCAPIType.ROOM,n,r,o,i,s)},user_inner:function(e,t,n,r,o,i){},user_outer:function(e,t,n,r,o,i){}},u=e.RTCAPIType.PERSON==o?"user":"room",l=r?"inner":"outer",d=c[e.RongUtil.tplEngine("{type}_{direction}",{type:u,direction:l})];d&&d(t,n,(s=s||{}).name||"",s.content||"",(function(){i.onSuccess(!0)}),(function(e){i.onError(e)}))},t.prototype.removeRTCRoomData=function(t,n,r,o,i){this.removeRTCData(t,n,r,e.RTCAPIType.ROOM,o)},t.prototype.getNavi=function(){return this.addon.getNav()[this.userId]},t.prototype.setRTCOutData=function(e,t,n,r,o){},t.prototype.getRTCOutData=function(e,t,n){},t.prototype.setRTCUserInfo=function(e,t,n){},t.prototype.removeRTCUserInfo=function(e,t,n){},t.prototype.getRTCUserList=function(e,t){},t.prototype.setRTCRoomInfo=function(e,t,n){},t.prototype.removeRTCRoomInfo=function(e,t,n){},t.prototype.setRTCUserData=function(t,n,r,o,i,s){this.setRTCData(t,n,r,o,e.RTCAPIType.PERSON,i,s)},t.prototype.setRTCUserTotalRes=function(e,t,n,r,o){},t.prototype.getRTCUserData=function(e,t,n,r,o){},t.prototype.removeRTCUserData=function(e,t,n,r,o){},t.prototype.getRTCToken=function(e,t){},t.prototype.setRTCState=function(e,t,n){},t}();e.VCDataProvider=t}(RongIMLib||(RongIMLib={})),function(e){!function(e){e[e.F=0]="F",e[e.E=1]="E",e[e.W=2]="W",e[e.I=3]="I",e[e.D=4]="D"}(e.LoggerLevel||(e.LoggerLevel={}));e.LoggerLevel;!function(e){e[e.ADVANCED=500]="ADVANCED",e[e.LOW=500]="LOW"}(e.LoggerStoreSize||(e.LoggerStoreSize={}));e.LoggerStoreSize;var t=function(){function e(){}return e.IM="IM",e.RTC="RTC",e}();e.LoggerType=t;var n=function(){function e(){}return e.IM={A_INIT_O:"A-init-O",A_CONN_T:"A-connect-T",A_CONN_R:"A-connect-R",A_CONN_E:"A-connect-E",L_RECO_T:"L-reconnect-T",L_RECO_R:"L-reconnect-R",L_RECO_E:"L-reconnect-E",L_GETN_T:"L-get_navi-T",L_GETN_R:"L-get_navi-R",L_PING_WS_T:"L-ping_ws-T",L_PING_WS_R:"L-ping_ws-R",L_NETC_S:"L-network_changed-S",A_DISC_O:"A-disconnect-O",A_JCTR_T:"A-join_chatroom-T",A_JCTR_R:"A-join_chatroom-R",A_QCTR_T:"A-quit_chatroom-T",A_QCTR_R:"A-quit_chatroom-R",A_INIT_CMD_MSG_E:"A-instantiate_command_message-E",A_INIT_PROFILE_MSG_E:"A-instantiate_profile_notify_message-E",A_INIT_CMD_NOTI_MSG_E:"A-instantiate_command_notify_message-E",L_CHRM_PULL_E:"L-chatroom_pull-E",L_QUERY_MSG_E:"L-query_message-E",L_DECODE_MSG_E:"L-decode_upstream_message-E",L_CATCH_UNKNOWN_MSG_E:"L-catch_unknown_message-E",L_DECODE_QUERY_DATA_E:"L-decode_query_data-E",L_PARSE_MSG_E:"L-parse_message-E",L_WS_ERR_E:"L-websocket-error-E",G_CRAW_E:"G-crash-E",G_UP_LOG_S:"G-upload_log-S",G_UP_LOG_E:"G-upload_log-E"},e}();e.LoggerTag=n;var r=function(){function e(){}return e.REAL_TIME_LOG="RealTimeLog",e.MSG_NOTIF_LOG="MessageNotificationLog",e}();e.LoggerReportType=r}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(){}return t.writeLog=function(t){var n=this;if("off"!==e.RongIMClient._memoryStore.loggerSwitch){var r=e.RongIMClient._memoryStore.networkUnavailable,o=e.LoggerUtil.isLowLevelBro();t.time=(new Date).getTime(),t.sessionId=e.LoggerUtil.getSessionId(),t.content=t.content&&JSON.stringify(t.content),r&&(t.level!=e.LoggerLevel.E&&t.level!=e.LoggerLevel.W||(t.level=e.LoggerLevel.I)),n.logStore.push(t);var i=function(e){if(n.logStore.length>e){var t=n.logStore.length-e;n.logStore.splice(0,t)}};i(o?e.LoggerStoreSize.LOW:e.LoggerStoreSize.ADVANCED)}},t.reportRTLog=function(){var n=this,r="off"===e.RongIMClient._memoryStore.loggerSwitch;if(!n.loggerCache.hasStarted&&!r){n.loggerCache.hasStarted=!0;var o=this.defaultLogPolicy,i=!0,s=1,a=function(){var r=o.logSwitch,c=1e3*o.itv,u=o.times,l=o.url,d=o.level,f=c*Math.pow(2,s-1);s<u&&s++,r&&setTimeout((function(){var c=e.LoggerUtil.handleLog({level:d,type:e.LoggerReportType.REAL_TIME_LOG}),u=e.TextCompressor.compress(c),f=e.LoggerUtil.getEntireUrl({url:l,type:e.LoggerReportType.REAL_TIME_LOG});if(n.loggerCache.isNewNavi&&(s=1,o=e.LoggerUtil.getNaviPolicy(),n.loggerCache.isNewNavi=!1),i&&(s=1,i=!1,o=e.LoggerUtil.getNaviPolicy()),0==c.length)return o=e.LoggerUtil.getNaviPolicy(),void a();e.RongUtil.request({url:f,method:"POST",body:u,timeout:1e3*o.timeout,success:function(n){t.writeLog({tag:e.LoggerTag.IM.G_UP_LOG_S,level:e.LoggerLevel.D,type:e.LoggerType.IM,content:{desc:"report real-time log"}}),r&&(n&&(n=JSON.parse(n),o.itv=n.nextTime,o.level=n.level,o.logSwitch=n.logSwitch,s=1),a())},error:function(n,r){a(),t.writeLog({tag:e.LoggerTag.IM.G_UP_LOG_E,level:e.LoggerLevel.D,type:e.LoggerType.IM,content:{desc:"report real-time log",status:n,resText:r}})}})}),f)};a()}},t.reportMNLog=function(n){var r=this,o=1,i=e.RongIMClient._memoryStore.connectAckTime;if("Web"===n.platform&&n.logId!==r.loggerCache.logId){r.loggerCache.logId=n.logId;var s=function(){var a=5e3;a*=Math.pow(2,o-2),1===o&&(a=0),o<=3&&(o++,setTimeout((function(){var o=e.LoggerUtil.handleLog({level:e.LoggerLevel.D,startTime:n.startTime,endTime:n.endTime,type:e.LoggerReportType.MSG_NOTIF_LOG});if(!(0===o.length&&n.endTime<i)){0===o.length&&n.endTime>i&&(o="nodata");var a=e.TextCompressor.compress(o),c=e.LoggerUtil.getEntireUrl({url:n.uri,logId:n.logId,type:e.LoggerReportType.MSG_NOTIF_LOG});e.RongUtil.request({url:c,method:"POST",body:a,timeout:1e3*r.defaultLogPolicy.timeout,success:function(){t.writeLog({tag:e.LoggerTag.IM.G_UP_LOG_S,level:e.LoggerLevel.D,type:e.LoggerType.IM,content:{desc:"report message notification log"}})},error:function(n,r){s(),t.writeLog({tag:e.LoggerTag.IM.G_UP_LOG_E,level:e.LoggerLevel.D,type:e.LoggerType.IM,content:{desc:"report message notification log",status:n,resText:r}})}})}}),a))};s()}},t.logStore=[],t.defaultLogPolicy={logSwitch:1,url:"logcollection.ronghub.com/",level:e.LoggerLevel.E,itv:20,times:5,timeout:15},t.loggerCache={userId:"",logId:"none",isNewNavi:!1,hasStarted:!1},t}();e.Logger=t}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(){}return t.isLowLevelBro=function(){var t=!1,n=e.RongUtil.getBrower();return"IE"==n.type&&n.version<9&&(t=!0),t},t.isRealTimeLogType=function(t){return t===e.LoggerReportType.REAL_TIME_LOG},t.handleLog=function(t){var n=this,r="",o=e.Logger.logStore,i=0;return n.isRealTimeLogType(t.type)?(e.RongUtil.forEach(o,(function(e,o){e.time>n.lastTime&&e.level<=t.level&&(r+=n.genCSVLog(e),i=o)})),0!==r.length&&(n.lastTime=o[i].time)):e.RongUtil.forEach(o,(function(e){e.level<=t.level&&e.time>=t.startTime&&e.time<=t.endTime&&(r+=n.genCSVLog(e))})),r},t.getNaviPolicy=function(){var t=e.RongIMClient._storageProvider.getItem("fullnavi")||"{}",n=t&&JSON.parse(t),r={},o=n.logPolicy||"{}",i=n.logSwitch;return(r=o&&JSON.parse(o)).logSwitch=i,r},t.genDeviceId=function(){var t,n="",r="deviceId",o=e.RongUtil.supportLocalStorage(),i=e.RongUtil.supportSessionStorage();if((t=o?new e.LocalStorageProvider:i?new e.sessionStorageProvider:new e.MemeoryProvider).getItem(r))n=t.getItem(r);else{t.removeItem(r);var s=e.RongUtil.getUUID22();t.setItem(r,s),n=s}return n},t.getSessionId=function(){var t,n="",r="sessionId";if((t=e.RongUtil.supportSessionStorage()?new e.sessionStorageProvider:new e.MemeoryProvider).getItem(r))n=t.getItem(r);else{t.removeItem(r);var o=e.RongUtil.getUUID22();t.setItem(r,o),n=o}return n},t.getDeviceInfo=function(){var t=e.RongUtil.getBrower(),n=this.getSessionId().slice(0,10);return e.RongUtil.tplEngine("{brower}|{version}|{sessionId}",{brower:t.type,version:t.version,sessionId:n})},t.getEntireUrl=function(t){var n="https://";"http:"==location.protocol&&(n="http://");var r={protocol:n,url:t.url,version:e.RongIMClient.sdkver||"Unknown version",appkey:e.RongIMClient._memoryStore.appKey||"Unknown appkey",deviceId:this.genDeviceId(),deviceInfo:this.getDeviceInfo(),platform:"Web",userId:e.Logger.loggerCache.userId||""};return this.isRealTimeLogType(t.type)?e.RongUtil.tplEngine("{protocol}{url}?version={version}&appkey={appkey}&userId={userId}&deviceId={deviceId}&deviceInfo={deviceInfo}&platform={platform}",r):e.RongUtil.tplEngine("{protocol}{url}?version={version}&appkey={appkey}&userId={userId}&logId={logId}&deviceId={deviceId}&deviceInfo={deviceInfo}&platform={platform}",e.RongUtil.extend(r,{logId:t.logId}))},t.genCSVLog=function(t){if(t.content)var n='"'+t.content.replace(/\"/g,'""')+'"';return e.RongUtil.tplEngine("{sessionId},{time},{type},{level},{tag},{content}\n",{sessionId:t.sessionId,time:t.time,type:t.type,level:t.level,tag:t.tag,content:n||'""'})},t.isLogCmdMsg=function(t){var n=!1;return t.messageType===e.RongIMClient.MessageType.LogCommandMessage&&"rongcloudsystem"===t.senderUserId&&(n=!0),n},t.recordFatalLogOfNavi=function(t,n){3===t&&e.Logger.writeLog({tag:e.LoggerTag.IM.L_GETN_R,level:e.LoggerLevel.F,type:e.LoggerType.IM,content:{desc:"Request navigation failed 3 times",navigators:n}})},t.lastTime=0,t}();e.LoggerUtil=t}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function e(){this._memeoryStore={},this.prefix="rong_"}return e.prototype.setItem=function(e,t){this._memeoryStore[e]=decodeURIComponent(t)},e.prototype.getItem=function(e){return this._memeoryStore[e]},e.prototype.removeItem=function(e){this.getItem(e)&&delete this._memeoryStore[e]},e.prototype.getItemKey=function(e){var t=null,n=new RegExp(e+"\\w+");for(var r in this._memeoryStore){r.match(n)&&(t=r)}return t},e.prototype.getItemKeyList=function(e){var t=this.prefix,n=[],r=new RegExp(e+"\\w+");for(var o in this._memeoryStore){o.match(r)&&(o=o.substring(t.length),n.push(o))}return n},e.prototype.clearItem=function(){for(var e in this._memeoryStore)delete this._memeoryStore[e]},e.prototype.onOutOfQuota=function(){return 4096},e}();e.MemeoryProvider=t}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function t(){this.prefix="rong_",this._host="";var t=new Date,n=t.getMonth()+1,r=t.getFullYear()+"/"+(1==n.toString().length?"0"+n:n)+"/"+t.getDate(),o=new Date(r).getTime();for(var i in localStorage){if(i.lastIndexOf("RECEIVED")>-1){var s=JSON.parse(localStorage.getItem(i));for(var a in s)o-s[a].dealtime>0&&delete s[a];e.RongUtil.isEmpty(s)?localStorage.removeItem(i):localStorage.setItem(i,JSON.stringify(s))}if(i.lastIndexOf("SENT")>-1)o-JSON.parse(localStorage.getItem(i)).dealtime>0&&localStorage.removeItem(i)}}return t.prototype.setItem=function(e,t){e&&(-1==e.indexOf(this.prefix)&&(e=this.prefix+e),localStorage.setItem(e,t))},t.prototype.getItem=function(e){return e?(-1==e.indexOf(this.prefix)&&(e=this.prefix+e),localStorage.getItem(e||"")):""},t.prototype.getItemKey=function(e){var t="",n=this.prefix+e;for(var r in localStorage)if(0==r.indexOf(n)){t=r;break}return t},t.prototype.getItemKeyList=function(e){var t=[],n=this.prefix,r=n+e;for(var o in localStorage)0==o.indexOf(r)&&(o=o.substring(n.length),t.push(o));return t},t.prototype.removeItem=function(e){e&&(-1==e.indexOf(this.prefix)&&(e=this.prefix+e),localStorage.removeItem(e.toString()))},t.prototype.clearItem=function(){for(var e in localStorage)e.indexOf(this.prefix)>-1&&this.removeItem(e)},t.prototype.onOutOfQuota=function(){return JSON.stringify(localStorage).length},t}();e.LocalStorageProvider=t}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function e(){this.prefix="rong_",this._host=""}return e.prototype.setItem=function(e,t){e&&(-1==e.indexOf(this.prefix)&&(e=this.prefix+e),sessionStorage.setItem(e,t))},e.prototype.getItem=function(e){return e?(-1==e.indexOf(this.prefix)&&(e=this.prefix+e),sessionStorage.getItem(e||"")):""},e.prototype.getItemKey=function(e){var t="",n=this.prefix+e;for(var r in sessionStorage)if(0==r.indexOf(n)){t=r;break}return t},e.prototype.getItemKeyList=function(e){var t=[],n=this.prefix,r=n+e;for(var o in sessionStorage)0==o.indexOf(r)&&(o=o.substring(n.length),t.push(o));return t},e.prototype.removeItem=function(e){e&&(-1==e.indexOf(this.prefix)&&(e=this.prefix+e),sessionStorage.removeItem(e.toString()))},e.prototype.clearItem=function(){for(var e in sessionStorage)e.indexOf(this.prefix)>-1&&this.removeItem(e)},e.prototype.onOutOfQuota=function(){return JSON.stringify(sessionStorage).length},e}();e.sessionStorageProvider=t}(RongIMLib||(RongIMLib={})),function(e){var t=function(){function e(){this.opersistName="RongIMLib",this.keyManager="RongUserDataKeyManager",this._host="",this.prefix="rong_",this.oPersist=document.createElement("div"),this.oPersist.style.display="none",this.oPersist.style.behavior="url('#default#userData')",document.body.appendChild(this.oPersist),this.oPersist.load(this.opersistName)}return e.prototype.setItem=function(e,t){e&&-1==e.indexOf(this.prefix)&&(e=this.prefix+e),this.oPersist.setAttribute(e,t);var n=this.getItem(this.keyManager);n?-1==n.indexOf(e)&&(n+=","+e):n=e,this.oPersist.setAttribute(this.prefix+this.keyManager,n),this.oPersist.save(this.opersistName)},e.prototype.getItem=function(e){return e&&-1==e.indexOf(this.prefix)&&(e=this.prefix+e),e?this.oPersist.getAttribute(e):e},e.prototype.removeItem=function(e){e&&-1==e.indexOf(this.prefix)&&(e=this.prefix+e),this.oPersist.removeAttribute(e),this.oPersist.save(this.opersistName);for(var t=this.getItem(this.keyManager),n=t&&t.split(",")||[],r=0,o=n.length;r<o;r++)n[r]==e&&n.splice(r,1);this.oPersist.setAttribute(this.prefix+this.keyManager,n.join(",")),this.oPersist.save(this.opersistName)},e.prototype.getItemKey=function(e){var t=null,n=this.getItem(this.keyManager),r=n&&n.split(",")||[],o=this.prefix+e;if(r.length)for(var i=0,s=r.length;i<s;i++)if(r[i]&&0==r[i].indexOf(o)){t=r[i];break}return t},e.prototype.getItemKeyList=function(e){var t=[],n=this.getItem(this.keyManager),r=n&&n.split(",")||[],o=this.prefix,i=o+e;if(r.length)for(var s=0,a=r.length;s<a;s++)if(r[s]&&0==r[s].indexOf(i)){var c=r[s];c=c.substring(o.length),t.push(r[s])}return t},e.prototype.clearItem=function(){var e=this.getItem(this.keyManager),t=[];if(e&&(t=e.split(",")),t.length){for(var n=0,r=t.length;n<r;n++)t[n]&&this.removeItem(t[n]);this.removeItem(this.keyManager)}},e.prototype.onOutOfQuota=function(){return 10485760},e}();e.UserDataProvider=t}(RongIMLib||(RongIMLib={})),function(e){var t=function(t){if(this.script=document.createElement("script"),this.head=document.getElementsByTagName("head")[0],"WebSocket"in window&&"ArrayBuffer"in window&&3===WebSocket.prototype.CLOSED&&!e.RongIMClient._memoryStore.depend.isPolling){if(e.Transportations._TransportType=e.Socket.WEBSOCKET,!e.RongIMClient.Protobuf){var n=e.RongIMClient._memoryStore.depend.protobuf,r=this.script;r.src=n,this.head.appendChild(r),r.onload=r.onreadystatechange=function(){if(!(this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(r.onload=r.onreadystatechange=null,t&&t(),t))){var n=e.RongIMClient._memoryStore.token,o=e.RongIMClient._memoryStore.callback;n&&e.RongIMClient.connect(n,o,null,{isIgnoreReportStart:!0})}}}}else e.Transportations._TransportType="xhr-polling",e.RongIMClient.Protobuf=Polling};e.FeatureDectector=t}(RongIMLib||(RongIMLib={})),function(RongIMLib){var FeaturePatcher=function(){function FeaturePatcher(){}return FeaturePatcher.prototype.patchAll=function(){this.patchJSON(),this.patchForEach()},FeaturePatcher.prototype.patchForEach=function(){Array.forEach||(Array.forEach=function(e,t){for(var n=0;n<e.length;n++)t.call(e,e[n],n,e)})},FeaturePatcher.prototype.patchJSON=function(){window.JSON||(window.JSON=function(){function JSON(){}return JSON.parse=function(sJSON){return eval("("+sJSON+")")},JSON.stringify=function(e){return this.str("",{"":e})},JSON.str=function(e,t){var n,r,o,i,s,a=t[e];switch(a&&"object"==typeof a&&"function"==typeof a.toJSON&&(a=a.toJSON(e)),typeof a){case"string":return this.quote(a);case"number":return isFinite(a)?String(a):"null";case"boolean":case"null":return String(a);case"object":if(!a)return"null";if(s=[],"[object Array]"===Object.prototype.toString.apply(a)){for(i=a.length,n=0;n<i;n+=1)s[n]=this.str(n,a)||"null";return o=0===s.length?"[]":"["+s.join(",")+"]"}for(r in a)Object.prototype.hasOwnProperty.call(a,r)&&(o=this.str(r,a))&&s.push(this.quote(r)+":"+o);return o=0===s.length?"{}":"{"+s.join(",")+"}"}},JSON.quote=function(e){var t=this;return t.rx_escapable.lastIndex=0,t.rx_escapable.test(e)?'"'+e.replace(t.rx_escapable,(function(e){var n=t.meta[e];return"string"==typeof n?n:"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+e+'"'},JSON.rx_escapable=new RegExp('[\\"\\\\"\0--ÂÂ­Ø-ØÜá´áµâ-â\u2028-â¯â -â¯\ufeffï¿°-ï¿¿]',"g"),JSON.meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"''":"\\''","\\":"\\\\"},JSON}())},FeaturePatcher}();RongIMLib.FeaturePatcher=FeaturePatcher}(RongIMLib||(RongIMLib={})),RongIMLib||(RongIMLib={}),function(){function e(){}e.prototype.load=function(e,t,n){var r=document.createElement("script");r.async=!0,t&&(r.addEventListener?r.addEventListener("load",(function(e){var n=e.target||e.srcElement;t(n.src)}),!1):r.readyState&&(r.onreadystatechange=function(e){var n=e.srcElement;t(n.src)})),n&&(r.onerror=function(e){var t=e.target||e.srcElement;n(t.src)}),(document.head||document.getElementsByTagName("head")[0]).appendChild(r),r.src=e}}(),function(e){var t=function(){function e(){this.publicServiceList=[]}return e.prototype.get=function(e,t){for(var n=0,r=this.publicServiceList.length;n<r;n++)if(this.publicServiceList[n].conversationType==e&&t==this.publicServiceList[n].publicServiceId)return this.publicServiceList[n]},e.prototype.add=function(e){for(var t=!0,n=0,r=this.publicServiceList.length;n<r;n++)if(this.publicServiceList[n].conversationType==e.conversationType&&e.publicServiceId==this.publicServiceList[n].publicServiceId){this.publicServiceList.unshift(this.publicServiceList.splice(n,1)[0]),t=!1;break}t&&this.publicServiceList.unshift(e)},e.prototype.replace=function(e){for(var t=0,n=this.publicServiceList.length;t<n;t++)if(this.publicServiceList[t].conversationType==e.conversationType&&e.publicServiceId==this.publicServiceList[t].publicServiceId){this.publicServiceList.splice(t,1,e);break}},e.prototype.remove=function(e,t){for(var n=0,r=this.publicServiceList.length;n<r;n++)if(this.publicServiceList[n].conversationType==e&&t==this.publicServiceList[n].publicServiceId){this.publicServiceList.splice(n,1);break}},e}();e.PublicServiceMap=t;var n=function(){function e(){this.conversationList=[]}return e.prototype.get=function(e,t){for(var n=0,r=this.conversationList.length;n<r;n++)if(this.conversationList[n].conversationType==e&&this.conversationList[n].targetId==t)return this.conversationList[n];return null},e.prototype.add=function(e){for(var t=!0,n=0,r=this.conversationList.length;n<r;n++)if(this.conversationList[n].conversationType===e.conversationType&&this.conversationList[n].targetId===e.targetId){this.conversationList.unshift(this.conversationList.splice(n,1)[0]),t=!1;break}t&&this.conversationList.unshift(e)},e.prototype.replace=function(e){for(var t=0,n=this.conversationList.length;t<n;t++)if(this.conversationList[t].conversationType===e.conversationType&&this.conversationList[t].targetId===e.targetId){this.conversationList.splice(t,1,e);break}},e.prototype.remove=function(e){for(var t=0,n=this.conversationList.length;t<n;t++)if(this.conversationList[t].conversationType===e.conversationType&&this.conversationList[t].targetId===e.targetId){this.conversationList.splice(t,1);break}},e}();e.ConversationMap=n;var r=function(){function t(){}return t.getInstance=function(){return t._instance||(t._instance=new t),t._instance},t.prototype.logger=function(t,n,r){e.RongIMClient.logger({code:t,funcName:n,msg:r})},t.prototype.check=function(t,n,r,o){if(e.RongIMClient._dataAccessProvider||r){for(var i=0,s=o.length;i<s;i++)if(!new RegExp(this.getType(o[i])).test(t[i])){var a="ç¬¬"+(i+1)+"ä¸ªåæ°éè¯¯, éè¯¯ç±»åï¼"+this.getType(o[i])+" ["+t[i]+"] -> ä½ç½®:"+n;this.logger("-3",n,a)}}else{a="è¯¥åæ°ä¸æ­£ç¡®æå°æªå®ä¾åRongIMClient -> ä½ç½®:"+n;this.logger("-4",n,a)}},t.prototype.getType=function(e){var t=Object.prototype.toString.call(e).toLowerCase();return t.slice(8,t.length-1)},t.prototype.checkCookieDisable=function(){document.cookie="checkCookie=1";var e=!1;return document.cookie.match(new RegExp("(^| )checkCookie=([^;]*)(;|$)"))||(e=!0),document.cookie="checkCookie=1;expires=Thu, 01-Jan-1970 00:00:01 GMT",e},t}();e.CheckParam=r;var o=function(){function e(e){this.map={},this.keys=[],this.limit=e||10}return e.prototype.set=function(e,t){this.map[e]=t},e.prototype.get=function(e){return this.map[e]||0},e.prototype.remove=function(e){delete this.map[e]},e}();e.LimitableMap=o;var i=function(){function e(){this.cache={}}return e.prototype.set=function(e,t){this.cache[e]=t},e.prototype.get=function(e){return this.cache[e]},e.prototype.remove=function(e){delete this.cache[e]},e}();e.MemoryCache=i;var s=function(){function e(e){var t=this;t.xmlhttp=null,t.options=e;var n="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest;"undefined"!=typeof XMLHttpRequest&&n?t.xmlhttp=new XMLHttpRequest:"undefined"!=typeof XDomainRequest?t.xmlhttp=new XDomainRequest:t.xmlhttp=new ActiveXObject("Microsoft.XMLHTTP")}return e.prototype.send=function(e){var t=this;t.options.url||(t.options.url="http://upload.qiniu.com/putb64/-1"),t.xmlhttp.onreadystatechange=function(){4==t.xmlhttp.readyState&&(t.options.type?e():e(JSON.parse(t.xmlhttp.responseText.replace(/'/g,'"'))))},t.xmlhttp.open("POST",t.options.url,!0),t.xmlhttp.withCredentials=!1,"setRequestHeader"in t.xmlhttp&&(t.options.type?t.xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded; charset=utf-8"):(t.xmlhttp.setRequestHeader("Content-type","application/octet-stream"),t.xmlhttp.setRequestHeader("Authorization","UpToken "+t.options.token))),t.xmlhttp.send(t.options.type?"appKey="+t.options.appKey+"&deviceId="+t.options.deviceId+"&timestamp="+t.options.timestamp+"&deviceInfo="+t.options.deviceInfo+"&privateInfo="+JSON.stringify(t.options.privateInfo):t.options.base64)},e}();function a(){var e=[],t=!1;this.produce=function(t){e.push(t)},this.consume=function(n,r){if(!t){t=!0;var o=function(){var i=e.shift();if(c.isUndefined(i))return t=!1,void(r&&r());n(i,o)};o()}},this.isExeuting=function(){return t}}e.RongAjax=s;var c=function(){function t(){}return t.noop=function(){},t.isEmpty=function(e){var n=!0;return t.isObject(e)&&t.forEach(e,(function(){n=!1})),t.isString(e)||t.isArray(e)?0===e.length:t.isNumber(e)?0===e:n},t.isLengthLimit=function(e,t,n){n=n||0;var r=e.length;return r<=t&&r>=n},t.MD5=function(e,t,n){return md5(e,t,n)},t.isObject=function(e){return"[object Object]"==Object.prototype.toString.call(e)},t.isArray=function(e){return"[object Array]"==Object.prototype.toString.call(e)},t.isString=function(e){return"[object String]"==Object.prototype.toString.call(e)},t.isFunction=function(e){return"[object Function]"==Object.prototype.toString.call(e)},t.isUndefined=function(e){return"[object Undefined]"==Object.prototype.toString.call(e)},t.isNull=function(e){return"[object Null]"==Object.prototype.toString.call(e)},t.isEqual=function(e,t){return e===t},t.indexOf=function(e,t){for(var n=-1,r=0;r<e.length;r++)if(t===e[r]){n=r;break}return n},t.stringFormat=function(e,t){for(var n=0,r=t.length;n<r;n++){var o=t[n],i=new RegExp("\\{"+n+"\\}","g");e=e.replace(i,o)}return e},t.tplEngine=function(e,t,n){"[object Array]"!==Object.prototype.toString.call(t)&&(t=[t]);for(var r=[],o=0,i=t.length;o<i;o++)r.push(s(t[o]));return r.join("");function s(t){return e.replace(n||/{([^}]+)}/g,(function(e,n){return"\\"==e.charAt(0)?e.slice(1):null!=t[n]?t[n]:"{"+n+"}"}))}},t.forEach=function(e,n){n=n||t.noop;t.isObject(e)&&function(){for(var t in e)e.hasOwnProperty(t)&&n(e[t],t,e)}(),t.isArray(e)&&function(){for(var t=0,r=e.length;t<r;t++)n(e[t],t)}()},t.extend=function(e,n,r,o){return t.forEach(e,(function(e,t){var r=t in n;o&&r&&(n[t]=e),r||(n[t]=e)})),n},t.createXHR=function(){var e={XMLHttpRequest:function(){return new XMLHttpRequest},XDomainRequest:function(){return new XDomainRequest},ActiveXObject:function(){return new ActiveXObject("Microsoft.XMLHTTP")}},t="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest,n="function"==typeof XDomainRequest||"object"==typeof XDomainRequest;return e[t?"XMLHttpRequest":n?"XDomainRequest":"ActiveXObject"]()},t.request=function(e){var n=e.url,r=e.body,o=e.success,i=e.error||t.noop,s=e.method||"GET",a=e.timeout,c=t.createXHR();return"onload"in c?(c.onload=function(){c.onload=t.noop,o(c.responseText)},c.onerror=function(){i(c.status,c.responseText),c.onerror=t.noop}):c.onreadystatechange=function(){if(4==c.readyState){var e=c.status;200==e?o(c.responseText):i(e,c.responseText)}},c.open(s,n,!0),a&&(c.timeout=a),r?(c.send(r),c):(c.send(null),c)},t.getLocalProtocol=function(){return"object"!=typeof location||"https:"===location.protocol?"https://":"http://"},t.formatProtoclPath=function(e){var n=e.path,r=e.protocol,o=e.tmpl||"{0}{1}",i=e.sub,s=n.indexOf("://");(s>-1&&(s+="://".length,n=n.substring(s)),i)&&((s=n.indexOf("/"))>-1&&(n=n.substr(0,s)));return t.stringFormat(o,[r,n])},t.getValidNavi=function(n){var r=e.RongIMClient.HttpProtocol,o=n.indexOf("://"),i=n;o>-1||(i=e.RongIMClient.getProtocol().protocol+n);var s=t.getUrlProtocol(i),a=t.getLocalProtocol();return s===r.http&&"https://"===a&&(i=t.formatProtoclPath({path:i,tmpl:"{0}{1}",protocol:r.https,sub:!0})),i},t.getUrlProtocol=function(e){var t=e.indexOf("://");return t>-1?e.substring(0,t+"://".length):"https://"},t.getUrlHost=function(e){var n=t.indexOf(e,"/");return e.substring(0,n)},t.supportLocalStorage=function(){var e=!1;if("object"==typeof localStorage)try{var t="RC_TMP_KEY";localStorage.setItem(t,"RC_TMP_VAL"),"RC_TMP_VAL"==localStorage.getItem(t)&&(e=!0)}catch(e){console.log("localStorage is disabled.")}return e},t.supportSessionStorage=function(){var e=!1;if("object"==typeof sessionStorage)try{var t="RC_TMP_KEY";sessionStorage.setItem(t,"RC_TMP_VAL"),"RC_TMP_VAL"==sessionStorage.getItem(t)&&(e=!0)}catch(e){console.log("sessionStorage is disabled.")}return e},t.rename=function(e,n){var r=t.isObject(e);r&&(e=[e]),e=JSON.parse(JSON.stringify(e));var o=function(e,t,r){delete r[t],r[t=n[t]]=e};return t.forEach(e,(function(e){t.forEach(e,(function(e,r,i){(r in n?o:t.noop)(e,r,i)}))})),r?e[0]:e},t.some=function(e,t){for(var n=!1,r=0,o=e.length;r<o;r++)if(t(e[r])){n=!0;break}return n},t.keys=function(e){var t=[];for(var n in e)t.push(n);return t},t.isNumber=function(e){return"[object Number]"==Object.prototype.toString.call(e)},t.getTimestamp=function(){return(new Date).getTime()},t.isSupportRequestHeaders=function(){var e=navigator.userAgent;return!window.ActiveXObject&&!("ActiveXObject"in window)||(new RegExp("MSIE (\\d+\\.\\d+);").test(e),parseFloat(RegExp.$1)>9)},t.hasValidWsUrl=function(e){try{e=JSON.parse(e)}catch(e){return!1}return t.getValidWsUrlList(e).length>0},t.getValidWsUrlList=function(n){var r=e.RongIMClient.invalidWsUrls,o=[];return t.forEach(n,(function(e){-1===t.indexOf(r,e)&&o.push(e)})),o},t.isValidWsUrl=function(n){return-1===e.RongIMClient.invalidWsUrls.indexOf(n)&&!t.isEmpty(n)},t.getBrower=function(){var e,t,n=navigator.userAgent,r={IE:/rv:([\d.]+)\) like Gecko|MSIE ([\d.]+)/,Edge:/Edge\/([\d.]+)/,Firefox:/Firefox\/([\d.]+)/,Opera:/(?:OPERA|OPR).([\d.]+)/,WeChat:/MicroMessenger\/([\d.]+)/,QQBrowser:/QQBrowser\/([\d.]+)/,Chrome:/Chrome\/([\d.]+)/,Safari:/Version\/([\d.]+).*Safari/,iOSChrome:/Mobile\/([\d.]+).*Safari/};for(var o in r){var i;if(r.hasOwnProperty(o))if(i=n.match(r[o])){t=o,e=i[1]||i[2];break}}return{type:t||"UnKonw",version:e||"UnKonw"}},t.string10to64=function(e){var t="0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZa0".split(""),n=t.length+1,r=+e,o=[];do{var i=r%n;r=(r-i)/n,o.unshift(t[i])}while(r);return o.join("")},t.getUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},t.getUUID22=function(){var e=this.getUUID();if(e=e.replace(/-/g,"")+"a",e=parseInt(e,16),(e=this.string10to64(e)).length>22&&(e=e.slice(0,22)),e.length<22)for(var t=22-e.length,n=0;n<t;n++)e+="0";return e},t.getByteLength=function(e,t){var n,r=0;if("utf-16"===(t=t||"utf-8"))for(var o=0,i=e.length;o<i;o++)r+=(n=e.charCodeAt(o))<=65535?2:4;else for(o=0,i=e.length;o<i;o++)r+=(n=e.charCodeAt(o))<127?1:n<=2047?2:n<=65535?3:4;return r},t.concat=function(e,n,r){return t.forEach(n,(function(n){r&&-1!==t.indexOf(e,n)||e.push(n)})),e},t.getCurrentDate=function(e){var n=new Date,r=n.getFullYear(),o=n.getMonth()+1,i=n.getDate();return t.tplEngine("{year}{seperator}{month}{seperator}{day}",{year:r,month:o,day:i,seperator:e})},t.generateUploadFileName=function(e,n){var r,o,i=Math.floor(1e3*Math.random()%1e4),s=this.getUUID();return n&&(o="."+(r=n.split("."))[r.length-1]),t.tplEngine("{type}__RC-{date}_{random}_{timestamp}{uuid}{extension}",{type:e,date:t.getCurrentDate("-"),random:i,uuid:s,timestamp:t.getTimestamp(),extension:o||""})},t.Prosumer=a,t.Storage={set:function(t,n){try{e.RongIMClient._storageProvider.setItem(t,JSON.stringify(n))}catch(e){}},get:function(t){var n=e.RongIMClient._storageProvider.getItem(t);try{return JSON.parse(n)}catch(e){return{}}}},t}();e.RongUtil=c;var u=function(){function e(){this.watchers={}}return e.prototype.genUId=function(e){return[e,(new Date).getTime()].join("_")},e.prototype.watch=function(e){var t=this,n=e.key,r=e.multiple;n=c.isArray(n)?n:[n];var o=e.func;c.forEach(n,(function(e){e=r?t.genUId(e):e,t.watchers[e]=o}))},e.prototype.notify=function(e){var t=e.key,n=e.entity;for(var r in this.watchers){0==r.indexOf(t)&&this.watchers[r](n)}},e.prototype.remove=function(){},e}();e.RongObserver=u;var l=function(){function e(){this.observers=[]}return e.prototype.add=function(e,t){t&&(this.observers=[e]),c.isFunction(e)&&this.observers.push(e)},e.prototype.emit=function(e){c.forEach(this.observers,(function(t){t(e)}))},e.prototype.clear=function(){this.observers=[]},e.prototype.checkIndexOutBound=function(e,t){return e>-1&&e<t},e.prototype.removeAt=function(e){this.checkIndexOutBound(e,this.observers.length)&&this.observers.splice(e,1)},e.prototype.remove=function(e){if(e){if(c.isFunction(e))for(var t=this.observers,n=t.length-1;n>=0;n--)e===t[n]&&this.removeAt(n)}else this.clear()},e}();e.Observer=l;var d=function(){function e(e){this.timeout=0,this.timers=[],this.timeout=e.timeout}return e.prototype.resume=function(e){var t=setTimeout(e,this.timeout);this.timers.push(t)},e.prototype.pause=function(){c.forEach(this.timers,(function(e){clearTimeout(e)}))},e}();e.Timer=d;var f=function(){function e(e){this.items=[],this.index=0,this.onwheel=function(){},this.items=e.items,this.onwheel=e.onwheel}return e.prototype.get=function(){var e=this.items,t=this.index,n=t>=e.length;return n&&this.onwheel(),n?0:t},e.prototype.add=function(){this.index+=1},e}();e.IndexTools=f;var p=function(){function e(){}return e.getUId=function(e){return md5(e).slice(8,16)},e}();e.InnerUtil=p;var g=function(){function e(){}return e.utf8_encode=function(e){e=e.replace(/\r\n/g,"\n");for(var t="",n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t+=String.fromCharCode(r):r>127&&r<2048?(t+=String.fromCharCode(r>>6|192),t+=String.fromCharCode(63&r|128)):(t+=String.fromCharCode(r>>12|224),t+=String.fromCharCode(r>>6&63|128),t+=String.fromCharCode(63&r|128))}return t},e.utf8_decode=function(e){for(var t,n="",r=0,o=0,i=0;r<e.length;)(o=e.charCodeAt(r))<128?(n+=String.fromCharCode(o),r++):o>191&&o<224?(i=e.charCodeAt(r+1),n+=String.fromCharCode((31&o)<<6|63&i),r+=2):(i=e.charCodeAt(r+1),t=e.charCodeAt(r+2),n+=String.fromCharCode((15&o)<<12|(63&i)<<6|63&t),r+=3);return n},e.encode=function(e){var t,n,r,o,i,s,a,c="",u=0;for(e=this.utf8_encode(e);u<e.length;)o=(t=e.charCodeAt(u++))>>2,i=(3&t)<<4|(n=e.charCodeAt(u++))>>4,s=(15&n)<<2|(r=e.charCodeAt(u++))>>6,a=63&r,isNaN(n)?s=a=64:isNaN(r)&&(a=64),c=c+this.keyStr.charAt(o)+this.keyStr.charAt(i)+this.keyStr.charAt(s)+this.keyStr.charAt(a);return c},e.decode=function(e){var t,n,r,o,i,s,a="",c=0;for(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");c<e.length;)t=this.keyStr.indexOf(e.charAt(c++))<<2|(o=this.keyStr.indexOf(e.charAt(c++)))>>4,n=(15&o)<<4|(i=this.keyStr.indexOf(e.charAt(c++)))>>2,r=(3&i)<<6|(s=this.keyStr.indexOf(e.charAt(c++))),a+=String.fromCharCode(t),64!=i&&(a+=String.fromCharCode(n)),64!=s&&(a+=String.fromCharCode(r));return a=this.utf8_decode(a)},e.keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e}();e.Base64=g;var h=function(){function e(){}return e.compress=function(e){for(var t=this,n={},r=0;r<e.length-1;r++){var o=e.charAt(r)+e.charAt(r+1);n.hasOwnProperty(o)?n[o].push(r):n[o]=[r]}for(var i=[],s=[],a=function(){if(s.length>0){var e=s.join("");if(s=[],e.length>26){var n=t.numberEncode(e.length),r=String.fromCharCode(t.dataType.NormalExt|n.length);i.push(r+n)}else{var o=String.fromCharCode(t.dataType.Normal|e.length);i.push(o)}i.push(e)}},c=0;c<e.length;){var u=t.indexOf(n,e,c);if(u.length<2)s.push(e.charAt(c++));else if(u.length<4)s.push(e.substr(c,u.length)),c+=u.length;else{var l=t.numberEncode(c-u.offset),d=t.numberEncode(u.length);if(l.length+d.length>=u.length)s.push(e.substr(c,u.length)),c+=u.length;else{a();var f=String.fromCharCode(t.dataType.Compressed|l.length<<2|d.length);i.push(f+l+d),c+=u.length}}}a();var p=t.numberEncode(e.length),g=String.fromCharCode(t.dataType.Tail|p.length);return i.push(g+p),i.join("")},e.uncompress=function(e){var t=0,n="";e:do{var r=e.charCodeAt(t++),o=r&this.dataType.Mark,i=15&r;switch(o){case this.dataType.Compressed:var s=i>>2,a=3&i;if(0==s||0==a)throw new Error("Data parsing error,at "+t);var c=this.numberDecode(e.substr(t,s)),u=this.numberDecode(e.substr(t+=s,a));if((c=n.length-c)+u>n.length)throw new Error("Data parsing error,at "+t);t+=a,n+=n.substr(c,u);break;case this.dataType.Tail:if((l=this.numberDecode(e.substr(t,i)))!=n.length)throw console.log(n.length),console.log(l),new Error("Data parsing error,at "+t);t+=i;break e;case this.dataType.NormalExt:var l=this.numberDecode(e.substr(t,i));n+=e.substr(t+=i,l),t+=l;break;case this.dataType.Normal:n+=e.substr(t,i),t+=i;break;case this.dataType.Mark:if(i>10)throw new Error("Data parsing error,at "+t);n+=e.substr(t,16+i),t+=16+i;break;default:throw new Error("Data parsing error,at "+t+" header:"+o)}}while(t<e.length);return n},e.indexOf=function(e,t,n){var r={length:0,offset:-1};t.length;if(n>=t.length-1)return r;var o=e[t.charAt(n)+t.charAt(n+1)];if(o[0]==n)return r;for(var i=t.length-n,s=0,a=o.length;s<a;s++){var c=o[s],u=n-c;if(!(u>this.max)){var l=Math.min(i,u);if(l<=r.length)break;if(!(r.length>2&&t.charAt(c+r.length-1)!=t.charAt(n+r.length-1))){for(var d=2,f=d;f<l&&t.charAt(c+f)==t.charAt(n+f);f++)d++;d>=r.length&&(r.length=d,r.offset=c)}}}return r},e.numberEncode=function(e){var t=[],n=0;do{n=e%this.scale,t.push(this.chars.charAt(n)),e=(e-n)/this.scale}while(e>0);return t.join("")},e.numberDecode=function(e){for(var t=0,n=0,r=e.length-1;r>=0;r--){if(-1==(n=this.chars.indexOf(e.charAt(r))))throw new Error('decode number error, data is "'+e+'"');t=t*this.scale+n}return t},e.dataType={Tail:48,Compressed:64,NormalExt:80,Normal:96,Mark:112},e.chars="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",e.scale=e.chars.length,e.max=238327,e}();e.TextCompressor=h}(RongIMLib||(RongIMLib={})),RongIMLib}))},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){t.L={bit:1},t.M={bit:0},t.Q={bit:3},t.H={bit:2},t.isValid=function(e){return e&&void 0!==e.bit&&e.bit>=0&&e.bit<4},t.from=function(e,n){if(t.isValid(e))return e;try{return function(e){if("string"!=typeof e)throw new Error("Param is not a string");switch(e.toLowerCase()){case"l":case"low":return t.L;case"m":case"medium":return t.M;case"q":case"quartile":return t.Q;case"h":case"high":return t.H;default:throw new Error("Unknown EC Level: "+e)}}(e)}catch(e){return n}}},function(e,t,n){var r=n(6),o=[1,1,1,1,1,1,1,1,1,1,2,2,1,2,2,4,1,2,4,4,2,4,4,4,2,4,6,5,2,4,6,6,2,5,8,8,4,5,8,8,4,5,8,11,4,8,10,11,4,9,12,16,4,9,16,16,6,10,12,18,6,10,17,16,6,11,16,19,6,13,18,21,7,14,21,25,8,16,20,25,8,17,23,25,9,17,23,34,9,18,25,30,10,20,27,32,12,21,29,35,12,23,34,37,12,25,34,40,13,26,35,42,14,28,38,45,15,29,40,48,16,31,43,51,17,33,45,54,18,35,48,57,19,37,51,60,19,38,53,63,20,40,56,66,21,43,59,70,22,45,62,74,24,47,65,77,25,49,68,81],i=[7,10,13,17,10,16,22,28,15,26,36,44,20,36,52,64,26,48,72,88,36,64,96,112,40,72,108,130,48,88,132,156,60,110,160,192,72,130,192,224,80,150,224,264,96,176,260,308,104,198,288,352,120,216,320,384,132,240,360,432,144,280,408,480,168,308,448,532,180,338,504,588,196,364,546,650,224,416,600,700,224,442,644,750,252,476,690,816,270,504,750,900,300,560,810,960,312,588,870,1050,336,644,952,1110,360,700,1020,1200,390,728,1050,1260,420,784,1140,1350,450,812,1200,1440,480,868,1290,1530,510,924,1350,1620,540,980,1440,1710,570,1036,1530,1800,570,1064,1590,1890,600,1120,1680,1980,630,1204,1770,2100,660,1260,1860,2220,720,1316,1950,2310,750,1372,2040,2430];t.getBlocksCount=function(e,t){switch(t){case r.L:return o[4*(e-1)+0];case r.M:return o[4*(e-1)+1];case r.Q:return o[4*(e-1)+2];case r.H:return o[4*(e-1)+3];default:return}},t.getTotalCodewordsCount=function(e,t){switch(t){case r.L:return i[4*(e-1)+0];case r.M:return i[4*(e-1)+1];case r.Q:return i[4*(e-1)+2];case r.H:return i[4*(e-1)+3];default:return}}},function(e,t){t.isValid=function(e){return!isNaN(e)&&e>=1&&e<=40}},function(e,t){var n="(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+",r="(?:(?![A-Z0-9 $%*+\\-./:]|"+(n=n.replace(/u/g,"\\u"))+")(?:.|[\r\n]))+";t.KANJI=new RegExp(n,"g"),t.BYTE_KANJI=new RegExp("[^A-Z0-9 $%*+\\-./:]+","g"),t.BYTE=new RegExp(r,"g"),t.NUMERIC=new RegExp("[0-9]+","g"),t.ALPHANUMERIC=new RegExp("[A-Z $%*+\\-./:]+","g");var o=new RegExp("^"+n+"$"),i=new RegExp("^[0-9]+$"),s=new RegExp("^[A-Z0-9 $%*+\\-./:]+$");t.testKanji=function(e){return o.test(e)},t.testNumeric=function(e){return i.test(e)},t.testAlphanumeric=function(e){return s.test(e)}},function(e,t){function n(e){if("number"==typeof e&&(e=e.toString()),"string"!=typeof e)throw new Error("Color should be defined as hex string");var t=e.slice().replace("#","").split("");if(t.length<3||5===t.length||t.length>8)throw new Error("Invalid hex color: "+e);3!==t.length&&4!==t.length||(t=Array.prototype.concat.apply([],t.map((function(e){return[e,e]})))),6===t.length&&t.push("F","F");var n=parseInt(t.join(""),16);return{r:n>>24&255,g:n>>16&255,b:n>>8&255,a:255&n,hex:"#"+t.slice(0,6).join("")}}t.getOptions=function(e){e||(e={}),e.color||(e.color={});var t=void 0===e.margin||null===e.margin||e.margin<0?4:e.margin,r=e.width&&e.width>=21?e.width:void 0,o=e.scale||4;return{width:r,scale:r?4:o,margin:t,color:{dark:n(e.color.dark||"#000000ff"),light:n(e.color.light||"#ffffffff")},type:e.type,rendererOpts:e.rendererOpts||{}}},t.getScale=function(e,t){return t.width&&t.width>=e+2*t.margin?t.width/(e+2*t.margin):t.scale},t.getImageWidth=function(e,n){var r=t.getScale(e,n);return Math.floor((e+2*n.margin)*r)},t.qrToImageData=function(e,n,r){for(var o=n.modules.size,i=n.modules.data,s=t.getScale(o,r),a=Math.floor((o+2*r.margin)*s),c=r.margin*s,u=[r.color.light,r.color.dark],l=0;l<a;l++)for(var d=0;d<a;d++){var f=4*(l*a+d),p=r.color.light;if(l>=c&&d>=c&&l<a-c&&d<a-c)p=u[i[Math.floor((l-c)/s)*o+Math.floor((d-c)/s)]?1:0];e[f++]=p.r,e[f++]=p.g,e[f++]=p.b,e[f]=p.a}}},function(e,t,n){var r=n(14),o=n(15),i=n(37),s=n(38);function a(e,t,n,i,s){var a=[].slice.call(arguments,1),c=a.length,u="function"==typeof a[c-1];if(!u&&!r())throw new Error("Callback required as last argument");if(!u){if(c<1)throw new Error("Too few arguments provided");return 1===c?(n=t,t=i=void 0):2!==c||t.getContext||(i=n,n=t,t=void 0),new Promise((function(r,s){try{var a=o.create(n,i);r(e(a,t,i))}catch(e){s(e)}}))}if(c<2)throw new Error("Too few arguments provided");2===c?(s=n,n=t,t=i=void 0):3===c&&(t.getContext&&void 0===s?(s=i,i=void 0):(s=i,i=n,n=t,t=void 0));try{var l=o.create(n,i);s(null,e(l,t,i))}catch(e){s(e)}}t.create=o.create,t.toCanvas=a.bind(null,i.render),t.toDataURL=a.bind(null,i.renderToDataURL),t.toString=a.bind(null,(function(e,t,n){return s.render(e,n)}))},function(e,t,n){e.exports=function(){"use strict";var e,t,n,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},c=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&a.return&&a.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},u=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},l=function(){},d=function(e){return"[object Object]"===Object.prototype.toString.call(e)},f=function(e){return"[object Array]"===Object.prototype.toString.call(e)},p=function(e){return"[object Function]"===Object.prototype.toString.call(e)},g=function(e){return"[object String]"===Object.prototype.toString.call(e)},h=function(e){return"[object Undefined]"===Object.prototype.toString.call(e)},m=function(e){return"[object Number]"===Object.prototype.toString.call(e)},v=function(e){return JSON.stringify(e)},y=function(e){return JSON.parse(e)},C=function(e,t,n){t=t||l;var r=(n=n||{}).isReverse;d(e)&&function(){for(var n in e)t(e[n],n,e)}(),f(e)&&function(){if(r)for(var n=e.length-1;n>=0;n--)t(e[n],n);else for(var o=0,i=e.length;o<i;o++)t(e[o],o)}()},R=function(e,t){for(var n in t){var r=t[n];h(r)||(e[n]=r)}return e},T=Promise,I=function(e){return new T(e)},S=function(e,t){return e===t},E=function(e,t){return e.filter(t)},M=function(e){return JSON.parse(JSON.stringify(e))},_=console,b=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},O={get:function(e){var t="rong-rtc-"+e;if(!function(e){return Object.prototype.hasOwnProperty.call(localStorage,e)||Object.prototype.hasOwnProperty.call(sessionStorage,e)}(t))return null;var n=localStorage.getItem(t)||sessionStorage.getItem(t);return null!==(n=JSON.parse(n))&&Object.prototype.hasOwnProperty.call(n,"type")&&Object.prototype.hasOwnProperty.call(n,"data")?n.data:null},set:function(e,t,n){(n?sessionStorage:localStorage).setItem("rong-rtc-"+e,JSON.stringify({data:t,type:void 0===t?"undefined":r(t)}))},remove:function(e){var t="rong-rtc-"+e;localStorage.removeItem(t),sessionStorage.removeItem(t)}},N={Prosumer:function(){var e=[],t=!1;this.produce=function(t){e.push(t)},this.consume=function(n,r){t||(t=!0,function o(){var i=e.shift();if(h(i))return t=!1,void(r&&r());n(i,o)}())},this.isExeuting=function(){return t}},Log:_,Observer:function(){var e=[];this.add=function(t,n){if(p(t)){if(n)return e=[t];e.push(t)}},this.remove=function(t){e=E(e,(function(e){return e!==t}))},this.emit=function(t){C(e,(function(e){e(t)}))}},Timer:function(e){var t={timeout:0,type:"interval"};R(t,e=e||{});var n=[],r=t.timeout,o=t.type,i={resume:{interval:function(e,t){return t&&e(),setInterval(e,r)},timeout:function(e,t){return t&&e(),setTimeout(e,r)}},pause:{interval:function(e){return clearInterval(e)},timeout:function(e){return clearTimeout(e)}}};this.resume=function(e,t){e=e||l;var r=i.resume[o](e,t);n.push(r)},this.pause=function(){var e=i.pause;C(n,(function(t){e[o](t)}))}},isUndefined:h,isBoolean:function(e){return"[object Boolean]"===Object.prototype.toString.call(e)},isString:g,isObject:d,isArray:f,isFunction:p,stringify:v,parse:y,rename:function(e,t){d(e)&&(e=[e]),e=y(v(e));var n=function(e,n,r){delete r[n],r[n=t[n]]=e};return C(e,(function(e){C(e,(function(e,r,o){(r in t?n:l)(e,r,o)}))})),d?e[0]:e},extend:R,clone:M,deferred:I,Defer:T,forEach:C,tplEngine:function(e,t,n){f(t)||(t=[t]);for(var r=[],o=function(t){return e.replace(n||/\\?\{([^}]+)\}/g,(function(e,n){return"\\"===e.charAt(0)?e.slice(1):void 0!==t[n]?t[n]:"{"+n+"}"}))},i=0,s=t.length;i<s;i++)r.push(o(t[i]));return r.join("")},isContain:function(e,t){return e.indexOf(t)>-1},noop:l,Cache:function(e){return d(e)||(e={}),{set:function(t,n){e[t]=n},get:function(t){return e[t]},remove:function(t){delete e[t]},getKeys:function(){var t=[];for(var n in e)t.push(n);return t},clear:function(){e={}}}},request:function(e,t){return I((function(n,r){t=t||{};var o=new XMLHttpRequest,i=t.method||"GET";o.open(i,e,!0);var s=t.headers||{};C(s,(function(e,t){o.setRequestHeader(t,e)}));var a=t.body||{},c=t.timeout;c&&(o.timeout=c),o.onreadystatechange=function(){if(S(o.readyState,4)){var e=o.responseText;e=e||"{}";var t=JSON.parse(e);if(/^(200|202)$/.test(o.status))n(t);else{var i=o.status;R(t,{status:i}),r(t)}}},o.onerror=function(e){r(e)},o.send(a)}))},map:function(e,t){return e.map(t)},filter:E,uniq:function(e,t){var n=[],r={};return e.forEach((function(e){var n=t(e);r[n.key]=n.value})),C(r,(function(e){n.push(e)})),n},some:function(e,t){return e.some(t)},isEqual:S,isEmpty:function(e){var t=!0;return d(e)&&C(e,(function(){t=!1})),(g(e)||f(e))&&(t=0===e.length),m(e)&&(t=0===e),t},toJSON:function(e){return JSON.stringify(e)},isInclude:function(e,t){return e.indexOf(t)>-1},isNull:function(e){return"[object Null]"===Object.prototype.toString.call(e)},isNumber:m,toArray:function(e){var t=[];return C(e,(function(e,n){t.push([n,e])})),t},isPromise:function(e){var t=!1;try{t="[object Promise]"===Object.prototype.toString.call(e)||e&&e.then&&e.catch&&e.finally}catch(e){t=!1}return t},Index:function(){var e=0;this.add=function(){e+=1},this.get=function(){return e},this.reset=function(){e=0}},getBrowser:function(){var e=navigator.userAgent,t="",n="";return/(Msie|Firefox|Opera|Chrome|Netscape)\D+(\d[\d.]*)/.test(e)&&(t=RegExp.$1,n=RegExp.$2),/Version\D+(\d[\d.]*).*Safari/.test(e)&&(t="Safari",n=RegExp.$1),{name:t,version:n}},getUUID:b,getUUID22:function(){var e=b();return e=e.replace(/-/g,"")+"0",(e=function(e){var t="0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ+/".split(""),n=t.length+1,r=+e,o=[];do{var i=r%n;r=(r-i)/n,o.unshift(t[i])}while(r);return o.join("")}(e=parseInt(e,16))).length>22&&(e=e.slice(0,22)),e},Storage:O,handleObjKeys:function e(t,n){var r={};return C(t=t||{},(function(t,o){var i=n?n(o):o;r[i]=d(t)?e(t,n):t})),r},lineToHump:function(e){return e.replace(/_(\w)/g,(function(e,t){return t.toUpperCase()}))},humpToLine:function(e){return e.replace(/([A-Z])/g,"_$1").toLowerCase()},clearEselessFields:function e(t){var n=M(t=t||{});return C(n,(function(t,r){h(t)?delete n[r]:d(t)&&(t=e(t))})),n},getKeys:function(e){var t=[];for(var n in e)t.push(n);return t},merge:function(e,t,n){var r=(n=n||{}).isReverse,o=[];return C(e,(function(e){o.push(e)})),C(t,(function(e){var t=o.indexOf(e);t>-1&&o.splice(t,1),r?o.unshift(e):o.push(e)}),n),o},assert:function(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var i;return console.assert&&(i=console).assert.apply(i,[e,t].concat(r)),!!e}},A="room_user_joined",w="room_user_left",P="room_user_kick",L="stream_published",U="stream_unpublished",k="stream_disabled",D="stream_enabled",x="stream_muted",B="stream_unmuted",j="rtc_error",V="rtc_mounted",H="rtc_unmounted",F="message_received",q="report_spoke",G="monitor_stats",K="room_join",J="room_leave",W="room_get",Y="room_getsessionid",Q="room_getstats",z="stream_publish",X="stream_publish_default",$="stream_UNPUBLISH",Z="stream_subscribe",ee="stream_unsubscribe",te="stream_resize",ne="stream_get",re="live_config",oe="audio_mute",ie="audio_unmute",se="video_disable",ae="video_enable",ce="strorage_set",ue="strorage_get",le="strorage_remove",de="message_send",fe="device_get",pe="report_start",ge="report_stop",he=[{name:A,type:"joined"},{name:w,type:"left"},{name:P,type:"kick"}],me=[{name:L,type:"published"},{name:U,type:"unpublished"},{name:k,type:"disabled"},{name:D,type:"enabled"},{name:x,type:"muted"},{name:B,type:"unmuted"}],ve=[{name:F,type:"received"}],ye=[{name:q,type:"spoke"}],Ce=[{name:G,type:"stats"}],Re=(e={Inner:{},Outer:{}},N.forEach([{code:1e4,name:"INSTANCE_IS_DESTROYED",msg:"RongRTC instance has been destroyed"},{code:5e4,name:"IM_NOT_CONNECTED",msg:"IM not connected"},{code:50001,name:"ROOM_ID_IS_ILLEGAL",msg:"The roomId is illegal and can contain only upper and lower case letters, Arabic numerals, +, =, -, _ and cannot exceed 64 characters in length"},{code:50002,name:"ROOM_REPEAT_JOIN",msg:"Not rejoin the room"},{code:50003,name:"RTC_NOT_JOIN_ROOM",msg:"Please join the room first"},{code:50004,name:"NO_AUDIO_AND_VIDEO_SERVICE",msg:"No audio and video services have been activated"},{code:50010,name:"",msg:"Http request timeout"},{code:50011,name:"",msg:"http response error"},{code:50012,name:"NETWORK_UNAVAILABLE",msg:"Network unavailable"},{code:50020,name:"",msg:"Resources has been published"},{code:50021,name:"SET_OFFER_ERROR",msg:"Set offer error"},{code:50022,name:"SET_ANSWER_ERROR",msg:"Set answer error"},{code:50023,name:"PUBLISH_STREAM_EXCEED_LIMIT",msg:"The maximum number of published resources has been reached"},{code:50024,name:"STREAM_NOT_EXIST",msg:"Stream not exist. Please check user.idãstream.type or stream.tag"},{code:50030,name:"SUBSCRIBE_STREAM_NOT_EXIST",msg:"Subscribe to non-existent resource"},{code:50030,name:"STREAM_TRACK_NOT_EXIST",msg:"Track not exist. Please check user.idãstream.type or stream.tag"},{code:50031,name:"STREAM_SUBSCRIBED",msg:"Resources has been subscribed"},{code:50032,name:"UNSUBSCRIBE_STREAM_NOT_EXIST",msg:"Unsubscribe to non-existent resource"},{code:53001,name:"SOCKET_UNAVAILABLE",msg:"IM socket unavailable"},{code:53002,name:"IM_SDK_VER_NOT_MATCH",msg:"IM SDK version is too low, minimum version 2.4.0, please check: https://www.rongcloud.cn/docs/web_rtclib.html"},{code:53003,name:"STREAM_DESKTOPID_ILLEGAL",msg:"Failed to get screen shared stream, illegal desktopStreamId"},{code:53004,name:"PARAMTER_ILLEGAL",msg:"Please check the parameters, the {name} parameter is mandatory"},{code:53005,name:"ENGINE_ERROR",msg:"RTC engine error"},{code:53006,name:"MEDIA_SERVER_ERROR",msg:"Network is abnormal or Media Server is unavailable"},{code:53007,name:"MEDIA_SERVER_RESPONSE_EMPTY",msg:"Media Server response body is empty"},{code:53008,name:"WRONG_ROLE_SETTING",msg:"The set role is invalid"},{code:53009,name:"WRONG_AUDIENCE_EVENT",msg:"This method cannot be called by the audience"},{code:53010,name:"SET_LIVE_CONFIG_MODE_ERROR",msg:"This method can only be called in live mode"},{code:53011,name:"SET_LIVE_CONFIG_ROLE_ERROR",msg:"This method can only be called by the anchor"},{code:53012,name:"MUST_PUBLISHED_BEFORE_SETMIXCONFIG",msg:"Must be published before setMixConfig"},{code:53013,name:"ROOM_USER_KICK",msg:"You have been removed from the roomï¼"},{code:53014,name:"ROOM_USER_BLOCK",msg:"You are not allowed to join the roomï¼"},{code:40001,name:"NOT_IN_ROOM",msg:"Not in the room"},{code:40002,name:"INTERNAL_ERROR",msg:"IM Server internal error"},{code:40003,name:"HAS_NO_ROOM",msg:"IM Server room info not exist"},{code:40004,name:"INVALID_USERID",msg:"UserId illegal"},{code:40005,name:"REPEAT_JOIN_ROOM",msg:"Not rejoin the room"}],(function(t){var n=t.name,r=t.code,o={code:r,msg:t.msg};e.Inner[n]=o,e[r]=o,e.Outer[n]=r})),e),Te={NODE:-1,AUDIO:0,VIDEO:1,AUDIO_AND_VIDEO:2},Ie={MAX:1,MIN:2},Se={ENABLE:1,DISBALE:0},Ee=0,Me=1,_e=2,be="ice",Oe="lifecycle",Ne="room",Ae="stream",we="stream_handler",Pe="live_handler",Le="room_handler",Ue="storage_handler",ke="im",De="message",xe="device",Be="stat",je="I",Ve="V",He="W",Fe="E",qe=1,Ge=2,Ke={ROOM:1,USER:2},Je=/[A-Za-z0-9+=_-]+$/,We={height:480,width:640,frameRate:15},Ye=[0,1,2,3,4,4,5,5,5,5,6,6,6,6,6,7,7,7,7,8,8,8,9,9,9,9,9,9,9,9,9,9,9],Qe={RTC:0,LIVE:2},ze={AUDIO_AND_VIDEO:0,AUDIO:1},Xe={ANCHOR:1,AUDIENCE:2},$e={CUSTOMIZE:1,SUSPENSION:2,ADAPTATION:3},Ze={CROP:1,WHOLE:2},et={version:1},tt={R1:"R1\t{rtcVersion}\t{imVersion}\t{platform}\t{pcName}\t{pcVersion}\t{browserName}\t{browserVersion}\t{deviceId}",R2:"R2\t{type}\t{state}\t{deviceId}\r{trackIds}",R3_ITEM:"{googTrackId}\t{googCodecName}\t{audioLevel}\t{samplingRate}\t{trackSent}\t{packLostSentRate}\t{frameRate}\t{resolution}\t{googRenderDelayMs}\t{googJitterSent}\t{googNacksSent}\t{googPlisSent}\t{googRtt}\t{googFirsSent}\t{codecImplementationName}\t{trackState}",R3:"R3\t{totalRate}\t-1\t-1\t-1\t{networkType}\t{rtt}\t{localAddress}\t{receiveBand}\t{sendBand}\t{packetsLost}\t{deviceId}\r{tracks}",R3_KEYS:["mediaType","googTrackId","googCodecName","audioLevel","samplingRate","trackSent","packLostSentRate","frameRate","resolution","googRenderDelayMs","googJitterSent","googNacksSent","googPlisSent","googRtt","googFirsSent","codecImplementationName","trackState","googFirsReceived","googPlisReceived","googNacksReceived"],R4_ITEM:"{googTrackId}\t{googCodecName}\t{audioLevel}\t{samplingRate}\t{trackReceived}\t{packLostReceivedRate}\t{frameRate}\t{resolution}\t{googRenderDelayMs}\t{googJitterReceived}\t{googNacksReceived}\t{googPlisReceived}\t{googRtt}\t{googFirsReceived}\t{codecImplementationName}\t{trackState}",R4:"R4\t{totalRate}\t-1\t-1\t-1\t{networkType}\t{rtt}\t{localAddress}\t{receiveBand}\t{sendBand}\t{packetsLost}\t{deviceId}\r{tracks}",R4_KEYS:["mediaType","googTrackId","googCodecName","audioLevel","samplingRate","trackReceived","packLostReceivedRate","frameRate","resolution","googRenderDelayMs","googJitterReceived","googNacksReceived","googPlisReceived","googRtt","googFirsReceived","codecImplementationName","trackState","googNacksSent","googFirsSent"]},nt="r1",rt="r2",ot=0,it=1,st="uuid",at="http://",ct="https://",ut="A-joinRoom-T",lt="A-joinRoom-R",dt="A-joinRoom-E",ft="L-joinRoom-T",pt="L-joinRoom-R",gt="L-joinRoom-E",ht="P-joinRoomAndGetData-T",mt="P-joinRoomAndGetData-R",vt="P-joinRoomAndGetData-E",yt="A-leaveRoom-T",Ct="L-leaveRoom-T",Rt="L-leaveRoom-R",Tt="L-leaveRoom-E",It="L-mediaLeaveRoom-T",St="L-mediaLeaveRoom-R",Et="L-mediaLeaveRoom-E",Mt="A-publishAVStream-T",_t="A-publishAVStream-E",bt="A-unpublishAVStream-T",Ot="A-unpublishAVStream-E",Nt="L-MSExchange-T",At="L-MSExchange-R",wt="L-MSExchange-E",Pt="A-subscribeAVStream-T",Lt="A-subscribeAVStream-E",Ut="A-unsubscribeAVStream-T",kt="A-unsubscribeAVStream-E",Dt="L-MSSub-T",xt="L-MSSub-R",Bt="L-MSSub-E",jt="L-getRtcToken-R",Vt="L-getRtcToken-E",Ht="A-subscribeLiveStream-T",Ft="A-subscribeLiveStream-E",qt="L-MSSubLive-T",Gt="L-MSSubLive-R",Kt="L-MSSubLive-E",Jt="A-unsubscribeLiveStream-T",Wt="A-unsubscribeLiveStream-E",Yt="L-mediaLiveLeave-T",Qt="L-mediaLiveLeave-R",zt="L-mediaLiveLeave-E",Xt="A-setMixConfig-T",$t="A-setMixConfig-R",Zt="A-setMixConfig-E",en="A-userJoined-S",tn="A-userLeft-S",nn={"176_132":"RESOLUTION_176_132","256_144":"RESOLUTION_256_144","320_180":"RESOLUTION_320_180","240_240":"RESOLUTION_240_240","320_240":"RESOLUTION_320_240","480_360":"RESOLUTION_480_360","640_360":"RESOLUTION_640_360","480_480":"RESOLUTION_480_480","640_480":"RESOLUTION_640_480","720_480":"RESOLUTION_720_480","1280_720":"RESOLUTION_1280_720","1920_1080":"RESOLUTION_1920_1080"},rn={RESOLUTION_176_132:{width:176,height:132,maxBitRate:150,minBitRate:80},RESOLUTION_256_144:{width:256,height:144,maxBitRate:240,minBitRate:120},RESOLUTION_320_180:{width:320,height:180,maxBitRate:280,minBitRate:120},RESOLUTION_240_240:{width:240,height:240,maxBitRate:280,minBitRate:120},RESOLUTION_320_240:{width:320,height:240,maxBitRate:400,minBitRate:120},RESOLUTION_480_360:{width:480,height:360,maxBitRate:650,minBitRate:150},RESOLUTION_640_360:{width:640,height:360,maxBitRate:800,minBitRate:180},RESOLUTION_480_480:{width:480,height:480,maxBitRate:800,minBitRate:180},RESOLUTION_640_480:{width:640,height:480,maxBitRate:900,minBitRate:200},RESOLUTION_720_480:{width:720,height:480,maxBitRate:1e3,minBitRate:200},RESOLUTION_1280_720:{width:1280,height:720,maxBitRate:2200,minBitRate:250},RESOLUTION_1920_1080:{width:1920,height:1080,maxBitRate:4e3,minBitRate:400}},on={10:1,15:1,24:1.5,30:1.5},sn={10:10,15:15,24:24,30:30},an=N.Storage,cn=function(){var e=st,t=an.get(e);return t||(t=N.getUUID22(),an.set(e,t)),t},un=function(e,t){var n=!1,r="";if(N.isArray(t)||(t=[t]),!N.isObject(e))throw new Error("check(data, rules): data must be an object");return N.forEach(t,(function(t){var o=t.indexOf(".")>-1;if(!o&&(n=N.isUndefined(e[t])))return r=t;if(o){var i=t.split("."),s=c(i,2),a=s[0],u=s[1],l=e[a];if(n=N.isUndefined(l))return r=a;N.isArray(l)||(l=[l]),N.forEach(l,(function(e){var t=e[u];if(n=N.isUndefined(t))return r=u}))}})),{isIllegal:n,name:r}},ln=function(e){var t=Re.Inner.PARAMTER_ILLEGAL,n=t.msg;return n=N.tplEngine(n,{name:e}),N.extend(t,{msg:n})},dn=function(e,t,n){n=n||{};var r=e.getRoomId(),o=e.getRTCToken(),i=e.getClientSessionId(),s=e.getUserId(),a=e.getAppInfo().appKey,c=N.getBrowser(),u={"App-Key":a,RoomId:r,Token:o,ClientType:N.tplEngine("web|{name}|{version}",c),ClientVersion:"3.2.5","Client-Session-Id":i},l=Qe.LIVE;return t.setUserId&&(u.UserId=s),t.mode===l&&(u.RoomType=l),u=N.extend(u,n)},fn=function(e,t){var n=e.getAppInfo().appKey,r=N.getBrowser(),o=N.tplEngine("web|{name}|{version}",r),i=Qe.LIVE,s=e.getUserId(),a={"App-Key":n,RoomType:i,ClientType:o,ClientVersion:"3.2.5",UserId:s,RoomId:s};return t&&(a.Token=t),a},pn=function(e,t){var n=e.id,r=e.uris;N.isString(r)&&(r=N.parse(r));var o=[e];r&&(o=N.uniq(r,(function(e){var t=e.tag,n=e.mediaType,o=e.state,i=e.streamId||e.msid,s=N.filter(r,(function(e){var t=e.streamId||e.msid;return N.isEqual(t,i)}));return{key:[i].join("_"),value:{tag:t,uris:s,mediaType:n,state:o}}}))),N.forEach(o,(function(e){t({id:n,stream:e})}))},gn=function(e,t){var n=e.stream,r=n.mediaType,o=n.state,i=N.tplEngine("{type}_{state}",{type:r,state:o});return t(function(){var e={},t="{type}_{state}",n=N.tplEngine(t,{type:Te.VIDEO,state:Se.DISBALE});return e[n]=k,e[n=N.tplEngine(t,{type:Te.VIDEO,state:Se.ENABLE})]=D,e[n=N.tplEngine(t,{type:Te.AUDIO,state:Se.DISBALE})]=x,e[n=N.tplEngine(t,{type:Te.AUDIO,state:Se.ENABLE})]=B,e}()[i],e)},hn=function(){return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)},mn=function(e){return N.isUndefined(e)||N.isEmpty(e)},vn=function(e){var t=e.option.mode,n=e.getLiveRole();return t===Qe.LIVE&&n===Xe.AUDIENCE},yn=function(e,t){return t===Xe.AUDIENCE&&e===Xe.ANCHOR},Cn=function(e){var t=e.id,n=e.stream;N.isArray(n)||(n=[n]);var r=[];return N.forEach(n,(function(e){var n=e.tag,o=function(e){var t=[{kind:"video",type:Te.VIDEO},{kind:"audio",type:Te.AUDIO}];return N.isEqual(e,Te.AUDIO_AND_VIDEO)?t:N.filter(t,(function(t){return N.isEqual(t.type,e)}))}(e.type);N.forEach(o,(function(e){var o=e.kind,i=N.tplEngine("{id}_{tag}_{kind}",{id:t,tag:n,kind:o});r.push(i)}))})),r},Rn=function(e){e=e||"";var t=N.isContain(e,"://"),n="";if(N.isEqual(location.protocol,"https:")){if(n=ct,t){var r=e.indexOf("://")+"://".length;e=e.substring(r)}}else t||(n=at);return N.tplEngine("{protocol}{domain}",{protocol:n,domain:e})},Tn=(t=new N.Observer,n=function(e,n,r){var o={level:e,tag:n,meta:r,time:(new Date).getTime(),platform:"web"};t.emit(o)},{warn:function(e,t){return n(He,e,t)},error:function(e,t){return n(Fe,e,t)},info:function(e,t){return n(je,e,t)},log:function(e,t){return n(Ve,e,t)},watch:function(e,n){t.add(e,n)}}),In=function(){var e=void 0,t=void 0,n=!1,r=function(t,n,r){e.writeLog({level:t,tag:n,content:r,type:"RTC"})};return{init:function(r){r.Logger&&r.LoggerLevel&&(n=!0,e=r.Logger,t=r.LoggerLevel)},fatal:function(e,o){return n&&r(t.F,e,o)},error:function(e,o){return n&&r(t.E,e,o)},warn:function(e,o){return n&&r(t.W,e,o)},info:function(e,o){return n&&r(t.I,e,o)},debug:function(e,o){return n&&r(t.D,e,o)}}}(),Sn=function(){function e(t){o(this,e);var n=(t||"").id,r=n.length,i=this.getClient();if(!Je.test(n)||r>64){var s=Re.Inner;return i.emit(j,s.ROOM_ID_IS_ILLEGAL)}N.forEach(he,(function(e){var n=e,r=n.name,o=n.type;i.on(r,(function(n,r){switch((e=t[o]||N.noop)(r,n),Tn.log(Ne,{event:o,user:r}),o){case"joined":In.info(en,r);break;case"left":In.info(tn,r)}}))})),N.extend(this,{option:t,client:i,room:{id:n}})}return i(e,[{key:"join",value:function(e){In.info(ut,{user:e});var t=un(e,["id"]),n=t.isIllegal,r=t.name;if(n){var o=ln(r);return In.warn(dt,{desc:o}),N.Defer.reject(o)}var i=this.room,s=this.client;return N.extend(i,{user:e}),In.info(lt,{user:e}),s.exec({event:K,type:"room",args:[i]})}},{key:"leave",value:function(){var e=this.room,t=this.client;return In.info(yt,{roomId:e.id,uid:e.user.id}),t.emit("leave-by-self"),t.exec({event:J,type:"room",args:[e]})}},{key:"get",value:function(){var e=this.room;return this.client.exec({event:W,type:"room",args:[e]})}},{key:"getSessionId",value:function(){var e=this.room;return this.client.exec({event:Y,type:"room",args:[e]})}},{key:"getStats",value:function(){var e=this.room;return this.client.exec({event:Q,type:"room",args:[e]}).then((function(e){var t={};for(var n in e){var r=JSON.parse(e[n].uris||"[]");t[n]=r.map((function(e){return{mediaType:e.mediaType,state:e.state,tag:e.tag}}))}return Promise.resolve(t)}))}}]),e}();function En(e){return{disable:function(t){var n=un(t,["id","stream.tag"]),r=n.isIllegal,o=n.name;if(r){var i=ln(o);return N.Defer.reject(i)}return e.exec({event:se,type:"stream",args:[t]})},enable:function(t){var n=un(t,["id","stream.tag"]),r=n.isIllegal,o=n.name;if(r){var i=ln(o);return N.Defer.reject(i)}return e.exec({event:ae,type:"stream",args:[t]})}}}function Mn(e){return{mute:function(t){var n=un(t,["id","stream.tag"]),r=n.isIllegal,o=n.name;if(r){var i=ln(o);return N.Defer.reject(i)}return e.exec({event:oe,type:"stream",args:[t]})},unmute:function(t){var n=un(t,["id","stream.tag"]),r=n.isIllegal,o=n.name;if(r){var i=ln(o);return N.Defer.reject(i)}return e.exec({event:ie,type:"stream",args:[t]})}}}var _n=function(){function e(t){o(this,e);var n=this.getClient();N.forEach(me,(function(e){var r=e,o=r.name,i=r.type;n.on(o,(function(n,r){(e=t[i]||N.noop)(r,n),Tn.log(Ae,{event:i,user:r})}))}));var r={},i=[];n.on("leave-by-self",(function(){i.length=0,r={}})),n.extendOption(t),N.extend(this,{option:t,client:n,video:new En(n),audio:new Mn(n),tmpConf:r,publishUrls:i})}return i(e,[{key:"publish",value:function(e){In.info(Mt,{user:e});var t=un(e,["id","stream.tag","stream.mediaStream","stream.type"]),n=t.isIllegal,r=t.name;if(n){var o=ln(r);return In.warn(_t,{desc:o}),N.Defer.reject(o)}return this.client.exec({event:z,type:"stream",args:[e]})}},{key:"unpublish",value:function(e){In.info(bt,{user:e});var t=un(e,["id","stream.tag","stream.type"]),n=t.isIllegal,r=t.name;if(n){var o=ln(r);return In.warn(Ot,{desc:o}),N.Defer.reject(o)}return this.client.exec({event:$,type:"stream",args:[e]})}},{key:"subscribe",value:function(e){var t=this.client,n=t.rongRTC,r=void 0,o=void 0,i=void 0;vn(n)?(r=un(e,["liveUrl"]),o=Ht,i=Ft):(r=un(e,["id","stream.tag","stream.type"]),o=Pt,i=Lt),In.info(o,{user:e});var s=r,a=s.isIllegal,c=s.name;if(a){var u=ln(c);return In.warn(i,{desc:u}),N.Defer.reject(u)}return t.exec({event:Z,type:"stream",args:[e]})}},{key:"unsubscribe",value:function(e){var t=this.client,n=t.rongRTC,r=void 0,o=void 0,i=void 0;vn(n)?(r=un(e,[]),o=Jt,i=Wt):(r=un(e,["id","stream.tag","stream.type"]),o=Ut,i=kt),In.info(o,{user:e});var s=r,a=s.isIllegal,c=s.name;if(a){var u=ln(c);return In.warn(i,{desc:u}),N.Defer.reject(u)}return t.exec({event:ee,type:"stream",args:[e]})}},{key:"resize",value:function(e){var t=un(e,["id","stream.tag"]),n=t.isIllegal,r=t.name;if(n){var o=ln(r);return N.Defer.reject(o)}return this.client.exec({event:te,type:"stream",args:[e]})}},{key:"addPublishStreamUrl",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];0!==n.length&&(n.forEach((function(t){/^rtmp:\/\//.test(t)&&(e.publishUrls.includes(t)||e.publishUrls.push(t))})),this.setMixConfig(this.tmpConf))}},{key:"removePublishStreamUrl",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];0!==n.length&&(n.forEach((function(t){var n=e.publishUrls.indexOf(t);n>=0&&e.publishUrls.splice(n,1)})),this.setMixConfig(this.tmpConf))}},{key:"setMixConfig",value:function(e){var t=this.client,n=t.rongRTC,r=n.option.mode,o=n.getLiveRole()===Xe.ANCHOR;if(r!==Qe.LIVE)return N.Defer.reject(Re.Inner.SET_LIVE_CONFIG_MODE_ERROR);if(!o)return N.Defer.reject(Re.Inner.SET_LIVE_CONFIG_ROLE_ERROR);var i=un(e,["layoutMode"]),s=i.isIllegal,a=i.name;if(s){var c=ln(a);return N.Defer.reject(c)}if(e.layoutMode===$e.CUSTOMIZE){var u=["userId","streamId","x","y","width","height"];N.assert(e.customLayout,"èªå®ä¹å¸å±éè¦æä¾æç¡®ç customLayout å®ä¹")&&N.assert(e.customLayout.video instanceof Array,"customLayout.video å¿é¡»æ¯æ°ç»")&&N.assert(e.customLayout.video.every((function(e){return!un(e,u).isIllegal})),"customLayout.video ä¸­çæ¯ä¸ªåç´ ä¸­å¿é¡»åå« "+u.join("ã")+" å±æ§")}return this.tmpConf=e,t.exec({event:re,type:"stream",args:[e,this.publishUrls]})}},{key:"get",value:function(e){return this.client.exec({event:ne,type:"stream",args:[e]})}},{key:"publishDefault",value:function(e){return this.client.exec({event:X,type:"stream",args:[e]})}}]),e}(),bn=function(){function e(){o(this,e),this.events={},this.onceEvents={}}return i(e,[{key:"on",value:function(e,t){var n=this.events[e]||[];n.push(t),this.events[e]=n}},{key:"off",value:function(e,t){if(t){var n=this.events[e]||[];N.forEach(n,(function(e,r){N.isEqual(e,t)&&n.splice(r,1)}),{isReverse:!0})}else delete this.events[e]}},{key:"emit",value:function(e,t,n){var r=this.events[e];N.forEach(r,(function(e){e(n,t)})),(this.onceEvents[e]||N.noop)(n,t),delete this.onceEvents[e]}},{key:"once",value:function(e,t){this.onceEvents[e]=t}},{key:"teardown",value:function(){for(var e in this.events)this.off(e);for(var t in this.onceEvents)delete this.onceEvents[t]}}]),e}(),On="p_stream_added",Nn="p_stream_removed",An="p_stream_received",wn="p_ice_changed",Pn="p_track_received",Ln="p_signaling_state_change",Un="failed",kn="disconnected",Dn="closed",xn="common_joined",Bn="common_left",jn="common_error",Vn="common_consume",Hn="common_request_consume",Fn="common_connected",qn="common_peerconn_created",Gn="common_peerconn_destroyed",Kn="common_published_stream",Jn="common_send_report",Wn="common_track_modify",Yn="common_set_uris",Qn="common_change_role",zn=function(){function e(t){o(this,e),t=t||{};var n={url:"https://cdn.ronghub.com/detecting",timeout:1500,max:30};N.extend(n,t),N.extend(this,{option:n})}return i(e,[{key:"detect",value:function(e){var t=this,n=t.detecting,r=t.option;if(!n){N.extend(t,{detecting:!0});var o=r.url,i=r.timeout,s=r.max,a=1,c=!1;!function n(){a=a+=1,N.request(o).then((function(){return e(!0)}),(function(r){var o=r.status;return N.isEqual(o,404)?(N.extend(t,{detecting:!1}),e(c=!0)):N.isEqual(s,a)?e(c):void setTimeout((function(){n()}),i)}))}()}}}]),e}(),Xn="/exchange",$n="/exchange",Zn="/exchange",er="/exchange",tr="/subscribe",nr="/subscribe",rr="/broadcast/subscribe",or="/server/mcu/config",ir="/broadcast/exit",sr="/exit",ar={urls:[],errorUrls:[],clusterIdUrl:"",timeout:1e4},cr=new N.Prosumer,ur=new bn,lr=function(e){!N.isEmpty(e)&&N.isArray(e)&&(e=N.map(e,(function(e){return Rn(e)})),ar.urls=N.merge(ar.urls,e,{isReverse:!0}))},dr=function e(t){var n=t.urls&&t.urls.length>0?t.urls[0]:function(){var e=ar.errorUrls,t=ar.urls,n=ar.clusterIdUrl;if(n&&!N.isInclude(e,n))return/(http|https):\/\/([\w.]+\/?)\S*/.test(n)?n:"https://"+n;var r=N.filter(N.clone(t),(function(t){return!N.isInclude(e,t)}));return N.isEmpty(r)?null:r[0]}();if(N.isEmpty(n))return ar.errorUrls.length=0,N.Defer.reject(Re.Inner.NO_AUDIO_AND_VIDEO_SERVICE);var r=t.path,o=t.body,i=N.tplEngine("{domain}{path}",{domain:n,path:r}),s=N.extend(t.headers||{},{"Content-Type":"application/json;charset=UTF-8","Request-Id":Date.now().toString()});return N.assert(!!s.Token,"ä¸ MediaServer äº¤äºå¿é¡»æºå¸¦ Token ä¿¡æ¯"),N.request(i,{method:"POST",timeout:ar.timeout,body:JSON.stringify(o),headers:s}).then((function(e){return N.isEqual(e.resultCode,1e4)?e:N.Defer.reject(e)}),(function(r){var o=r.status;return N.isInclude([403],o)?N.Defer.reject(r):(function(e){ar.errorUrls.push(e)}(n),e(t))}))};ur.on(Hn,(function(){cr.consume((function(e,t){var n=e.option,r=e.resolve,o=e.reject;dr(n).then((function(e){r(e),t()}),(function(e){o(e),t()}))}))}));var fr=function(e){var t=(e=e||{}).urls;N.isEmpty(t)||(lr(t),delete e.urls),N.extend(ar,e)},pr=function(){return ar},gr=function(e){return N.deferred((function(t,n){cr.produce({option:e,resolve:t,reject:n}),ur.emit(Hn)}))},hr=lr,mr=function(e){lr([e])},vr=function(e){N.isArray(e)||(e=[e]);var t=!0;return N.forEach(e,(function(e){var n=Rn(e);N.isInclude(ar.urls,n)||(t=!1)})),t},yr=function(e){ar.clusterIdUrl=e},Cr=void 0,Rr=function(e){return e.replace(/\s+\r\n/g,"\r\n")},Tr=function(e){function t(e){o(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));!function(e){Cr=e}(n);var r=n;r.bandWidthCount=0;var i=new RTCPeerConnection({sdpSemantics:"plan-b",iceServers:[]});N.extend(r,{option:e});var s={onaddstream:function(e){var t=e.stream;r.emit(On,t)},onremovestream:function(e){var t=e.stream;r.emit(Nn,t)},ontrack:function(e){var t=e.streams;r.emit(Pn,t)},ondatachannel:function(e){r.emit(An,e)},oniceconnectionstatechange:function(){var e=i.iceConnectionState;N.extend(r,{state:e}),r.emit(wn,e),Tn.log(be,{state:e})},onsignalingstatechange:function(){var e=i.getRemoteStreams();r.emit(Ln,e)}};return N.forEach(s,(function(e,t){i[t]=e})),N.extend(r,{pc:i}),n}return s(t,e),i(t,[{key:"addStream",value:function(e){var t=this.pc,n=e.stream;return N.isArray(n)||(n=[n]),N.forEach(n,(function(e){var n=e.mediaStream;t.addStream(n)})),this.createOffer(e)}},{key:"removeStream",value:function(e){var t=this.pc,n=e.stream;return N.isArray(n)||(n=[n]),N.forEach(n,(function(e){var n=e.mediaStream;t.removeStream(n)})),this.createOffer(e)}},{key:"setOffer",value:function(e){var t=this.pc;return e.sdp=Rr(e.sdp),t.setLocalDescription(e)}},{key:"setAnwser",value:function(e){var t=this.pc;return(e=this.setBitrate(e)).sdp=Rr(e.sdp),t.setRemoteDescription(new RTCSessionDescription(e))}},{key:"setAnwserOnly",value:function(e){var t=this.pc;return e.sdp=Rr(e.sdp),t.setRemoteDescription(new RTCSessionDescription(e))}},{key:"setRemoteAnwser",value:function(e){var t=this.pc;return e.sdp=Rr(e.sdp),t.setRemoteDescription(new RTCSessionDescription(e)).then((function(){return t.createAnswer().then((function(e){return console.log("ASWER",e.sdp),t.setLocalDescription(e)}))}))}},{key:"setBitrate",value:function(e){var t=this.option.bitrate,n=e.sdp,r=n.split("\n"),o=function(e){for(var t=null,n=0;n<r.length;n++){var o=r[n];if(N.isInclude(o,e)){t=n;break}}return t},i=o("a=mid:video");if(N.isNull(i))return e;r[i]=[r[i],"b=AS:"+t.max].join("\n");var s=o("m=video");if(N.isNull(s))return e;var a=o("a=fmtp:"+r[s].split(" ")[3]);if(N.isNull(a))return e;this.bandWidthCount++,t=JSON.parse(JSON.stringify(t)),this.bandWidthCount%2==0&&(t.min=t.min+1);var c=";x-google-min-bitrate="+t.min+";x-google-max-bitrate="+t.max;return N.isNumber(t.start)&&(c+=";x-google-start-bitrate="+t.start),r[a]=[r[a].replace(/[\r\n]+$/,""),c].join(""),n=r.join("\n"),N.extend(e,{sdp:n}),e}},{key:"close",value:function(){var e=this.pc;this.bandWidthCount=0,e.close(),this.pc=null,delete this.pc}},{key:"isClosed",value:function(){return!this.pc}},{key:"getOption",value:function(){return{iceRestart:!0,offerToReceiveAudio:!0,offerToReceiveVideo:!0}}},{key:"isNegotiate",value:function(){var e=this.state;return N.isEqual(e,Un)||N.isEqual(e,kn)||N.isEqual(e,Dn)}},{key:"createOffer",value:function(e){var t=this,n=t.pc,r=e.stream;N.isArray(r)||(r=[r]);var o=t.getOption();return N.deferred((function(i,s){n.createOffer((function(n){N.forEach(r,(function(r){var o=r.mediaStream,i=r.size,s=t.getStreamId(e,i),a=o.id,c=n.sdp;c=c.replace(new RegExp(a,"g"),s),N.extend(n,{sdp:c})})),n=t.renameCodec(n),N.extend(t,{desc:n}),i(n)}),(function(e){s(e)}),o)}))}},{key:"getOffer",value:function(e){var t=this,n=t.pc,r=t.getOption();return n.createOffer(r).then((function(n){return n=t.renameCodec(n),e&&e(n),n}))}},{key:"renameCodec",value:function(e){var t=e.sdp,n=[{name:"H264/90000",code:98,rtx:99,value:["a=rtpmap:98 H264/90000","a=rtcp-fb:98 goog-remb","a=rtcp-fb:98 transport-cc","a=rtcp-fb:98 ccm fir","a=rtcp-fb:98 nack","a=rtcp-fb:98 nack pli","a=fmtp:98 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f","a=rtpmap:99 rtx/90000","a=fmtp:99 apt=98"].join("\r\n")},{name:"VP8/90000",code:96,rtx:97,value:["a=rtpmap:96 VP8/90000","a=rtcp-fb:96 ccm fir","a=rtcp-fb:96 nack","a=rtcp-fb:96 nack pli","a=rtcp-fb:96 goog-remb","a=rtcp-fb:96 transport-cc","a=rtpmap:97 rtx/90000","a=fmtp:97 apt=96"].join("\r\n")},{name:"red/90000",rtx:101,code:100,value:["a=rtpmap:100 red/90000","a=rtpmap:101 rtx/90000","a=fmtp:101 apt=100"].join("\r\n")},{name:"ulpfec/90000",code:127,value:"a=rtpmap:127 ulpfec/90000"},{name:"flexfec-03/90000",code:125,value:["a=rtpmap:125 flexfec-03/90000","a=rtcp-fb:125 transport-cc","a=rtcp-fb:125 goog-remb","a=fmtp:125 repair-window=10000000"].join("\r\n")}],r=function(e){var n=t.match(/m=video\s+[\w\s/]+/)[0].split(" ");return n.length=e,n}(3),o=t.indexOf("m=video"),i=t.indexOf("a=ssrc-group");N.isEqual(i,-1)&&(i=t.length);var s=t.substring(o,i),a=s.split("\r\n"),c={};N.forEach(n,(function(e){var t=e.name;N.forEach(a,(function(n){N.isInclude(n,t)&&(c[t]=e)}))}));var u="";N.forEach(c,(function(e){var t=e.code,n=e.value,o=e.rtx;u+=n+"\r\n",r.push(t),o&&r.push(o)})),(s=s.split("\r\n")).shift();var l=(s=s.join("\r\n")).indexOf("a=rtpmap"),d=t.substring(0,o),f=s.substring(0,l),p=t.substring(i,t.length);return t=d+r.join(" ")+"\r\n"+f+u+p,N.extend(e,{sdp:t}),e}},{key:"getStreamRatio",value:function(e){var t={};return N.forEach(e,(function(e){var n=e.id,r=e.mediaStream,o=t[n]||[],i=r.getVideoTracks()[0],s=Ie.MAX;if(!N.isUndefined(i)){var a=i.getConstraints(),c=a.height,u=a.width,l=i.id;c=c||0,u=u||0,N.isInclude(n,"tiny")&&(s=Ie.MIN);var d=N.tplEngine("{width}x{height}",{height:c,width:u});o.push({simulcast:s,resolution:d,videoTrackId:l}),t[n]=o}})),t}},{key:"getStreamId",value:function(e,t){var n="{userId}_{tag}",r=e.id,o=e.stream;N.isArray(o)||(o=[o]);var i=c(o,1)[0].tag;return N.isEqual(t,Ie.MIN)&&(n="{userId}_{tag}_{suffix}"),mn(i)?r:N.tplEngine(n,{userId:r,tag:i,suffix:"tiny"})}},{key:"getTagByStreamId",value:function(e){var t=e.split("_");return t[t.length-1]}},{key:"getStreamSymbolById",value:function(e){var t=e.split("_");if(N.isEqual(t.length,1))return t.push(""),t;var n=t.pop();return[t.join("_"),n]}},{key:"getStats",value:function(e){return this.pc.getStats((function(t){var n=[];t.result().forEach((function(e){var t={};e.names().forEach((function(n){t[n]=e.stat(n)})),N.extend(t,e),n.push(t)})),e(n)}))}}]),t}(bn);Tr.getInstance=function(){return Cr};var Ir=function(){function e(t,n){o(this,e);var r=n.detect;N.extend(this,{option:n,im:t,rtcToken:null,clientId:cn()}),this.network=new zn(r),this.SubPromiseCache={},this.SubLiveUrlsCache=null,this.SubStreamCache=null,this.setPC()}return i(e,[{key:"getRTCToken",value:function(){var e=this.im,t=this.rtcToken;return t?N.Defer.resolve(t):e.getRTCTokenAsyn(e.getUserId())}},{key:"setPC",value:function(){var e=this;if(!e.pc||e.pc.isClosed()){e.pc=new Tr(e.option),e.im.emit(qn,e.pc);var t=e.pc,n=e.im,r=e.network;t.on(On,(function(t,r){if(t)throw t;e.SubPromiseCache.resolve({mediaStream:r}),e.SubStreamCache=r;var o=r.id,i=o.lastIndexOf("_");o=o.substring(i+1,o.length);var s={id:n.getUserId(),stream:{mediaStream:r,type:0,tag:o}},a=Cn(s);n.emit(Jn,{type:rt,name:z,content:{trackIds:a}})})),t.on(Pn,(function(t,n){if(t)throw t;N.forEach(n,(function(t){e.SubPromiseCache.resolve({mediaStream:t})}))})),t.on(Ln,(function(t,n){if(t)throw t;N.forEach(n,(function(t){e.SubPromiseCache.resolve({mediaStream:t})}))})),t.on(wn,(function(){t.isNegotiate()&&r.detect((function(t){if(t)e.reconnect();else{var r=Re.Inner;n.emit(jn,r.NETWORK_UNAVAILABLE)}}))}))}}},{key:"subscribe",value:function(e,t){var n=this,r=n.pc,o=n.im,i=e.liveUrl,s=e.type,a=e.size;return N.deferred((function(c,u){return n.getRTCToken().then((function(l){var d=l.rtcToken;n.SubPromiseCache={resolve:c,reject:u},r.getOffer().then((function(c){var u=rr,l=fn(o,d),f={path:u,body:{liveUrl:i,sdp:c,mediaType:s,simulcast:a},headers:l};Tn.log(Pe,{msg:"subscribe:request",room:e,option:f}),In.info(qt,{room:e,option:f}),gr(f).then((function(s){var a=s.sdp,u=s.clusterId;u&&yr(u),r.setOffer(c).then((function(){n.isSubscribed()?r.setAnwserOnly(a):r.setAnwser(a)})),N.extend(o,{room:{id:s.roomId}}),o.emit(Jn,{type:nt,name:Z,content:{}}),Tn.log(Pe,{msg:"subscribe:response:stream:arriving",room:e,response:s}),In.info(Gt,{room:e,response:s}),n.setSubLiveUrl(i),t&&t()}),(function(t){Tn.log(Pe,{msg:"subscribe:response:error",room:e,error:t}),In.info(Kt,{room:e,error:t}),n.SubPromiseCache.reject(t)}))}))}),(function(e){return Tn.log(Pe,{msg:"getrtctoken:error",error:e}),e}))}))}},{key:"unsubscribe",value:function(){var e=this,t=e.pc,n=e.im,r=e.getSubLiveUrl();return e.getRTCToken().then((function(o){var i=o.rtcToken;return t.getOffer().then((function(t){var o=ir,s=fn(n,i),a={path:o,body:{sdp:t,liveUrl:r},headers:s};Tn.log(Pe,{msg:"unsubscribe:request",option:a}),In.info(Yt,{option:a}),gr(a).then((function(t){Tn.log(Pe,{msg:"unsubscribe:request:success",response:t}),In.info(Qt,{response:t}),e.clearSubLiveUrl(),e.SubStreamCache=null}),(function(e){return Tn.log(Pe,{msg:"unsubscribe:request:error",error:e}),In.error(zt,{error:e}),e}))}))}),(function(e){return Tn.log(Pe,{msg:"getrtctoken:error",error:e}),e}))}},{key:"setSubLiveUrl",value:function(e){this.SubLiveUrlsCache=e}},{key:"getSubLiveUrl",value:function(){return this.SubLiveUrlsCache}},{key:"clearSubLiveUrl",value:function(){this.SubLiveUrlsCache=null}},{key:"isSubscribed",value:function(){return!!this.SubLiveUrlsCache}},{key:"reconnect",value:function(){var e=this.getSubLiveUrl();this.clearSubLiveUrl(),this.subscribe({liveUrl:e})}},{key:"destroy",value:function(){var e=this.pc,t=this.im;e&&(e.close(),t.emit(Gn))}}]),e}(),Sr=function(e){var t=e.RongIMLib.RongIMClient,n=e.RongIMLib,r=t.getInstance(),o=function(e){return!!t.getInstance()[e]||(Tn.warn(ke,{msg:"Low version IM SDK is not supported, please update IM SDK"}),!1)},i=function(){var e=-1;try{e=t.getInstance().getCurrentConnectionStatus()}catch(e){Tn.error(ke,{content:e,pos:"new RongRTC"})}return e};return{CONNECTION_STATUS:n.ConnectionStatus,isConnected:function(){var e=i();return N.isEqual(e,n.ConnectionStatus.CONNECTED)},statusWatch:t.statusWatch,messageWatch:function(e){e=e||N.noop,t.messageWatch((function(n){var r=n.messageType,o=N.isEqual(t.MessageType.UnknownMessage,r),i=N.parse(N.toJSON(n)),s={};s=o?i.content.message.content:i.content,N.extend(i,{content:s}),i={name:i.objectName,uId:i.messageUId,senderId:i.senderUserId,content:i.content},e(i)}))},joinRTCRoom:function(e){return N.deferred((function(t,n){r.joinRTCRoom(e,{onSuccess:t,onError:n})}))},quitRTCRoom:function(e){return N.deferred((function(t,n){r.quitRTCRoom(e,{onSuccess:t,onError:n})}))},getRTCRoomInfo:function(e){return N.deferred((function(t,n){r.getRTCRoomInfo(e,{onSuccess:t,onError:n})}))},getRTCUserInfoList:function(e){return N.deferred((function(t,n){r.getRTCUserInfoList(e,{onSuccess:t,onError:n})}))},getRTCToken:function(e){return N.deferred((function(t,n){r.getRTCToken(e,{onSuccess:t,onError:n})}))},getNavi:function(){return r.getNavi()},getCurrentUserId:function(){return r.getCurrentUserId()},getCurrentConnectionStatus:i,setRTCUserInfo:function(e,t){return N.deferred((function(n,o){r.setRTCUserInfo(e,t,{onSuccess:n,onError:o})}))},removeRTCUserInfo:function(e,t){return N.deferred((function(n,o){r.removeRTCUserInfo(e,t,{onSuccess:n,onError:o})}))},setRTCUserData:function(e,t,n,o,i){return N.deferred((function(s,a){r.setRTCUserData(e,t,n,o,{onSuccess:s,onError:a},i)}))},setRTCUserTotalRes:function(e,t,n,o){return N.deferred((function(i,s){r.setRTCUserTotalRes(e,t,n,o,{onSuccess:i,onError:s})}))},getRTCUserData:function(e,t,n){return N.deferred((function(o,i){r.getRTCUserData(e,t,n,{onSuccess:o,onError:i})}))},removeRTCUserData:function(e,t,n,o){return N.deferred((function(i,s){r.removeRTCUserData(e,t,n,{onSuccess:i,onError:s},o)}))},setRTCRoomData:function(e,t,n,o,i){return N.deferred((function(s,a){r.setRTCRoomData(e,t,n,o,{onSuccess:s,onError:a},i)}))},getRTCRoomData:function(e,t,n){return N.deferred((function(o,i){r.getRTCRoomData(e,t,n,{onSuccess:o,onError:i})}))},removeRTCRoomData:function(e,t,n,o){return N.deferred((function(o,i){r.removeRTCRoomData(e,t,n,{onSuccess:o,onError:i})}),o)},setRTCState:function(e,t){return o("setRTCState")?N.deferred((function(n,o){r.setRTCState(e,t,{onSuccess:n,onError:o})})):""},getRTCUserList:function(e){return N.deferred((function(t,n){r.getRTCUserList(e,{onSuccess:t,onError:n})}))},getAppInfo:function(){return{appKey:r.getAppInfo().appKey}},RTCPing:function(e){return N.deferred((function(t,n){r.RTCPing(e,{onSuccess:t,onError:n})}))},getIMVersion:function(){return o("getSDKInfo")&&t.getInstance().getSDKInfo().version||""},isSupportRTC:function(){var e=!1;return N.isFunction(t.prototype.RTCPing)&&(e=!0),e},sendMessage:function(e,o){var i=e.name,s=e.content;!t.RegisterMessage[i]&&function(e,r){var o=new n.MessageTag(!1,!1),i=r.content,s=N.map(N.toArray(i),(function(e){return e[0]}));t.registerMessageType(e,e,o,s)}(i,e);var a=new t.RegisterMessage[i](s);return N.deferred((function(e,t){r.sendMessage(12,o,a,{onSuccess:e,onError:t})}))}}},Er=function(e){return function(e){return e.RongIMLib.SDK_VERSION}(e)?function(e){var t=e.RongIMLib,n=t.RongIMClient?t.RongIMClient.getIMv3():t.getInstance(),r=t.CONNECTION_STATUS;if(!n.rtcInnerUnwatch||!n.rtcInnerWatch)throw new Error("Please upgrade RongIMLib version");return{CONNECTION_STATUS:r,isConnected:function(){var e=n.getConnectionStatus();return N.isEqual(e,r.CONNECTED)},statusWatch:function(e){n.rtcInnerWatch({status:function(t){var n=t.status;e(n)}})},messageWatch:function(e){e=e||N.noop,n.rtcInnerWatch({message:function(n){var r=n.message,o=r.messageType,i=r.type;N.isEqual(i,t.CONVERSATION_TYPE.RTC_ROOM)&&e({name:o,uId:r.messageUId,senderId:r.senderUserId,content:r.content})}})},joinRTCRoom:function(e){return new n.RTC(e).join()},quitRTCRoom:function(e){return new n.RTC(e).quit()},getRTCRoomInfo:function(e){return new n.RTC(e).getRoomInfo()},getRTCUserInfoList:function(e){return new n.RTC(e).getUserInfoList()},getRTCToken:function(e){return new n.RTC(e).getToken()},getNavi:function(){return n.getAppInfo().navi},getCurrentUserId:function(){return n.getConnectionUserId()},getCurrentConnectionStatus:function(){return n.getConnectionStatus()},setRTCUserInfo:function(e,t){return new n.RTC(e).setUserInfo(t)},removeRTCUserInfo:function(e,t){return new n.RTC(e).removeUserInfo(t)},setRTCUserData:function(e,t,r,o,i){return new n.RTC({id:e}).setUserData(t,r,o,i)},setRTCUserTotalRes:function(e,t,r,o){return new n.RTC({id:e}).setRTCUserData(t,r,o)},getRTCUserData:function(e,t,r){return new n.RTC({id:e}).getUserData(t,r)},removeRTCUserData:function(e,t,r,o){return new n.RTC({id:e}).removeUserData(t,r,o)},setRTCRoomData:function(e,t,r,o,i){return new n.RTC({id:e}).setRoomData(t,r,o,i)},getRTCRoomData:function(e,t,r){return new n.RTC({id:e}).getRoomData(t,r)},removeRTCRoomData:function(e,t,r,o){return new n.RTC({id:e}).removeRoomData(t,r,o)},setRTCState:function(e,t){return new n.RTC(e).setState(t)},getRTCUserList:function(e){return new n.RTC(e).getUserList()},getAppInfo:function(){return{appKey:n.getAppInfo().appkey}},RTCPing:function(e){return new n.RTC(e).ping()},getIMVersion:function(){return t.SDK_VERSION},isSupportRTC:function(){var e=!1;return n.RTC&&(e=!0),e},sendMessage:function(e,t){var r=e.name,o=e.content;return new n.RTC({id:t}).send({messageType:r,content:o})}}}(e):Sr(e)},Mr="RTCPublishResourceMessage",_r="RTCUnpublishResourceMessage",br="RTCModifyResourceMessage",Or="RTCUserChangeMessage",Nr="RTCRoomDataNotifyMessage",Ar="RTCUserDataNotifyMessage",wr="RTCUserKickMessage",Pr="TotalContentResources",Lr="RCRTC:PublishResource",Ur="RCRTC:UnpublishResource",kr="RCRTC:ModifyResource",Dr="RCRTC:state",xr="RCRTC:RoomNtf",Br="RCRTC:UserNtf",jr="RCRTC:kick",Vr="RCRTC:TotalContentResources",Hr={TIME:1e4},Fr=function(e){return Re[e]||{code:e}},qr=function(e){function t(e){o(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));n.uris=[],n.otherUris={};var r=new N.Timer({timeout:Hr.TIME}),i=N.Cache(),s=n;N.extend(s,{timer:r,isJoinRoom:!1,clientSessionId:"",v2Users:i,option:e});var c=Er(e),l=c.CONNECTION_STATUS,d=function(){s.isJoinRoom&&s.rePing();var e=s.getMSUrl(),t=s.getRequestTimeout();!vr(e)&&hr(e),fr({timeout:t})},f=c.getCurrentConnectionStatus();return N.extend(s,{connectState:f,im:c}),c.isConnected()&&d(),c.statusWatch=c.statusWatch||N.noop,c.statusWatch((function(e){switch(e){case l.CONNECTED:d(),s.emit(Fn)}N.extend(s,{connectState:e})})),c.messageWatch=c.messageWatch||N.noop,c.messageWatch((function e(t){var r=t.name,o=t.senderId,a=t.content,c=a.uris,l=a.users,d=a.ignore,f=t.uId;if(!0!==d){if(r===Vr){Tn.log(ke,{msg:"receive:message",message:t});var p=n.otherUris[o]||(n.otherUris[o]=[]);if(0===p.length)return n.otherUris[o]=c,void e({name:Lr,senderId:o,content:{uris:c},uId:f});var g=function(e,t){var n=[],r=[],o=[];return t.forEach((function(t){for(var o=t.mediaType,i=t.msid,s=t.state,a=t.uri,c=e.length-1;c>=0;c-=1){var u=e[c],l=u.mediaType,d=u.msid,f=u.state,p=u.uri;if(l===o&&d===i)return a!==p?n.push(t):f!==s&&r.push(t),void e.splice(c,1)}n.push(t)})),o.push.apply(o,u(e)),{published:n,modified:r,unpublished:o}}(p.slice(),c.slice()),h=g.published,m=g.modified,v=g.unpublished;return n.otherUris[o]=c,h.length>0&&e({name:Lr,senderId:o,content:{uris:h},uId:f}),v.length>0&&e({name:Ur,senderId:o,content:{uris:v},uId:f}),void(m.length>0&&e({name:kr,senderId:o,content:{uris:m},uId:f}))}var y={id:o};switch(N.isArray(c)&&(c=N.map(c,(function(e){var t=e.tag;return mn(t)&&N.extend(e,{tag:""}),e}))),r){case Dr:!function(e){N.forEach(e,(function(e){var t=e.userId,r=e.state;switch(+r){case Ee:s.emit(A,{id:t});break;case Me:case _e:Tn.log(Ne,{msg:"room:member:left",user:e}),delete n.otherUris[t],s.emit(w,{id:t});break;default:Tn.warn("UserState: unkown state "+r)}}))}(l);break;case jr:s.emit(P,{msg:Re.Inner.ROOM_USER_KICK});break;case Lr:y={id:o,uris:c},N.isInclude(o,"_")&&i.set(o,!0),pn(y,(function(e){s.emit(L,e)}));break;case Ur:pn(y={id:o,uris:c},(function(e){s.emit(U,e)}));break;case kr:pn(y={id:o,uris:c},(function(e){gn(e,(function(e,t){s.emit(e,t)}))}));break;default:s.emit(F,t)}}else Tn.log(ke,{msg:"receive:message",ignore:d,message:t})})),n}return s(t,e),i(t,[{key:"isConnected",value:function(){return this.im.isConnected()}},{key:"joinRoom",value:function(e){var t=this,n=t.im;return N.extend(t,{room:e,isJoinRoom:!0,clientSessionId:N.getUUID()}),In.info(ht,{room:e}),n.joinRTCRoom(e).then((function(n){var r=n.users,o=n.token,i=n.sessionId;t.rtcPing(e);var s=t.getUser().id,a=t.otherUris={},c=N.clone(r);return Tn.log(ke,{msg:"join:room:inner:success",users:c}),N.forEach(c,(function(e,n){if(e=e||{},N.isEqual(s,n))delete r[n];else{var o=r[n],i=o.uris;t.v2Users.set(n,!0),N.isUndefined(i)||(i=N.isString(i)?N.parse(i):i,N.extend(o,{uris:i})),a[n]=i}})),N.extend(e,{rtcToken:o,users:r,sessionId:i}),t.emit(xn,e),In.info(mt,{roomId:e.id,users:r,rtcToken:o,sessionId:i}),r})).catch((function(t){return In.warn(vt,{roomId:e.id,code:t}),N.Defer.reject(Fr(t))}))}},{key:"leaveRoom",value:function(){this.otherUris={},this.uris.length=[];var e=this.im,t=this.room;return this.timer.pause(),N.extend(this,{isJoinRoom:!1,clientSessionId:""}),this.emit(Bn,t),e.quitRTCRoom(t).catch((function(e){return N.Defer.reject(Fr(e))}))}},{key:"getRoom",value:function(){var e=this.im,t=this.room;return e.getRTCRoomInfo(t).catch((function(e){return N.Defer.reject(Fr(e))}))}},{key:"getUsers",value:function(){var e=this.im,t=this.room;return e.getRTCUserInfoList(t).catch((function(e){return N.Defer.reject(Fr(e))}))}},{key:"getRTCToken",value:function(){return this.room.rtcToken}},{key:"getRTCTokenAsyn",value:function(e){var t=this.im,n=this.option,r=n.mode,o=n.liveType;return t.getRTCToken({id:e,mode:r,broadcastType:o}).then((function(e){return In.info(jt,{result:e}),e})).catch((function(e){return In.info(Vt,{error:e,desc:"get rtc token asyn"}),N.Defer.reject(e)}))}},{key:"getRoomId",value:function(){return this.room.id}},{key:"getClientSessionId",value:function(){return this.clientSessionId}},{key:"getSessionId",value:function(){return this.room.sessionId}},{key:"getNaviRTCInfo",value:function(){var e=this.im.getNavi().voipCallInfo;e=e||'{"callEngine": [{}]}';var t=(e=N.parse(e)).callEngine;return N.filter(t,(function(e){return 4===e.engineType}))[0]||{}}},{key:"getRequestTimeout",value:function(){var e=this.getNaviRTCInfo().timeOut;return e&&N.isNumber(e)?e*=1e3:e=1e4,e}},{key:"getMSUrl",value:function(){var e=this.getNaviRTCInfo(),t=e.backupMediaServer,n=e.mediaServer;return N.isUndefined(t)&&(t=[]),N.isString(t)&&(t=t.split(",")),N.isUndefined(n)||t.unshift(n),t=N.filter(t,(function(e){return function(e){return!!N.isEqual(location.protocol,"http:")||(!N.isContain(e,"://")||e.substring(0,e.indexOf("://")+"://".length)===ct)}(e)}))}},{key:"getUser",value:function(){return this.room.user}},{key:"getUserId",value:function(){return this.im.getCurrentUserId()}},{key:"setUserInfo",value:function(e,t){var n=this.room,r=this.im,o={key:e,value:t=N.toJSON(t)};return r.setRTCUserInfo(n,o)}},{key:"removeUserInfo",value:function(e){var t=this.room,n={keys:e};return this.im.removeRTCUserInfo(t,n)}},{key:"setUserData",value:function(e,t,n,r){var o=this.room.id,i=this.im;t=N.toJSON(t),Tn.log(we,{msg:"setUserData:before",roomId:o,value:t,message:r});var s,a,c=r.name,u=JSON.parse(r.content);u.ignore=!0,r.content=JSON.stringify(u),c===Ur?this.uris=(s=this.uris,a=u.uris,s.filter((function(e){return a.every((function(t){var n=t.msid,r=t.mediaType;return n!==e.msid||r!==e.mediaType}))}))):r.name===Lr?this.uris=function(e,t){return t.forEach((function(t){var n=t.msid,r=t.mediaType;e.some((function(e){return e.msid===n&&r===e.mediaType}))||e.push(t)})),e}(this.uris,u.uris):r.name===kr&&(this.uris=function(e,t){return t.forEach((function(t){for(var n=t.msid,r=t.mediaType,o=t.state,i=e.length-1;i>=0;i-=1){var s=e[i];if(n===s.msid&&r===s.mediaType){s.state=o;break}}})),e}(this.uris,u.uris));var l=JSON.stringify(this.uris);return i.setRTCUserTotalRes(o,r,l,Vr)}},{key:"getUserData",value:function(e,t){var n=this.room.id,r=this.im;return N.isArray(e)||(e=[e]),r.getRTCUserData(n,e,t)}},{key:"removeUserData",value:function(e,t,n){var r=this.room.id,o=this.im;return N.isArray(e)||(e=[e]),o.removeRTCUserData(r,e,t,n)}},{key:"setRoomData",value:function(e,t,n,r){var o=this.room.id;return this.im.setRTCRoomData(o,e,t,n,r)}},{key:"getRoomData",value:function(e,t){var n=this.room.id,r=this.im;return N.isArray(e)||(e=[e]),r.getRTCRoomData(n,e,t)}},{key:"removeRoomData",value:function(e,t,n){var r=this.room.id,o=this.im;return N.isArray(e)||(e=[e]),o.removeRTCRoomData(r,e,t,n)}},{key:"getExistUsers",value:function(){var e=this.im,t=this.room;return e.getRTCUserList(t).catch((function(e){return N.Defer.reject(Fr(e))}))}},{key:"sendMessage",value:function(e){var t=this.im,n=this.room;return Tn.log(ke,{msg:"send:before",message:e}),t.sendMessage(e,n.id).then((function(){return Tn.log(ke,{msg:"send:after",message:e}),n})).catch((function(e){return Tn.log(ke,{msg:"send:after",error:e}),N.Defer.reject(e)}))}},{key:"getMessage",value:function(e,t){return{name:function(e){switch(e){case Mr:return Lr;case _r:return Ur;case br:return kr;case Or:return Dr;case Nr:return xr;case Ar:return Br;case wr:return jr;case Pr:return Vr}}(e),content:t=N.toJSON(t)}}},{key:"isIMReady",value:function(){var e=this.im;return this.connectState===e.CONNECTION_STATUS.CONNECTED}},{key:"getAppInfo",value:function(){return this.im.getAppInfo()}},{key:"isJoined",value:function(){return this.isJoinRoom}},{key:"isSupportRTC",value:function(){return this.im.isSupportRTC()}},{key:"rePing",value:function(){var e=this.timer,t=this.getRoomId();N.isUndefined(t)||(e.pause(),this.rtcPing({id:t}))}},{key:"rtcPing",value:function(e){var t=this,n=t.im,r=t.timer,o=0,i=!1,s=function(){o=0,i=!1},a=function(){o+=1},c=Re.Inner;r.resume((function(){if(o>4)return r.pause(),N.extend(t,{isJoinRoom:!1,clientSessionId:""}),n.isJoinedRTCRoom=!1,t.emit(Bn),t.emit(jn,c.SOCKET_UNAVAILABLE);i&&a(),i=!0,n.RTCPing(e).then((function(){s()})).catch((function(e){Tn.error(ke,{msg:"RTC Ping Error"+e})}))}),!0)}},{key:"getIMVersion",value:function(){return this.im.getIMVersion()}},{key:"setRTCState",value:function(e){var t=this.im,n=this.room;return t.setRTCState(n,e)}}]),t}(bn),Gr="room_users",Kr=function(e){return navigator.mediaDevices.getUserMedia(e).then((function(e){return{mediaStream:e}}))},Jr=function(e){N.isEmpty(e)&&(e={video:!0,audio:!0});var t=e.video;return N.isObject(t)&&(t=!N.isEmpty(t.resolution)&&N.isObject(rn[t.resolution])?N.extend(t,rn[t.resolution]):N.extend(t,We)),N.isBoolean(t)&&t&&(t=We),N.extend(e,{video:t}),Kr(e)},Wr={switchCahce:{},set:function(e,t){switch(e){case Te.AUDIO:this.switchCahce.audio=t;break;case Te.VIDEO:this.switchCahce.video=t}},get:function(){return this.switchCahce},clear:function(){this.switchCahce={}}},Yr=function(){function e(t,n){o(this,e);var r=this;r.StreamCache=N.Cache(),r.DataCache=N.Cache(),r.SubPromiseCache=N.Cache(),r.PubResourceCache=N.Cache(),r.PublishStreamCache=N.Cache(),r.subCache=N.Cache();var i=n.detect;N.extend(r,{option:n,im:t}),r.network=new zn(i),r.User=function(e){return{SET_USERINFO:"uris",set:function(t,n,r,o){return e.setUserData(t,n,r,o)}}}(t),r.SubscribeCache={get:function(e){return r.subCache.get(e)},set:function(e,t){return r.subCache.set(e,t)},getKeys:function(){return r.subCache.getKeys()},remove:function(e){var t=r.pc,n=e.id,o=e.stream||{},i=N.isUndefined(o.type)?Te.AUDIO_AND_VIDEO:o.type,s=t.getStreamId(e),a=r.subCache.get(n)||[];a=N.filter(a,(function(e){var t=e.msid,n=e.type,r=N.isEqual(s,t),o=N.isEqual(n,i)||N.isEqual(i,Te.AUDIO_AND_VIDEO);return!(r&&o)})),r.subCache.set(n,a)},clear:function(){r.subCache.clear()},setState:function(e,t){var n=t=t||{},o=n.type,i=n.state,s=r.SubscribeCache.get(e);N.forEach(s,(function(e,t){var n=e.type;N.isEqual(o,n)&&(s[t].state=i)}))}},r.setPC(),t.on(Fn,(function(){r.DataCache.get(Gr)&&r.compare()})),t.on(L,(function(e,n){if(e)throw e;var o=n.stream;t.emit(Yn,o.uris),r.dispatchStreamEvent(n,(function(e,t){r.DataCache.set(e,t)}))})),t.on(Bn,(function(){var e=r.StreamCache,t=r.pc,n=e.getKeys();N.forEach(n,(function(t){var n=e.get(t).getTracks();N.forEach(n,(function(e){e.stop()}))})),r.clear(),t&&t.close()})),t.on(xn,(function(e,t){if(e)throw e;r.setPC();var n=t.users;r.usersHandler(n),Tn.log(Ne,{msg:"join successfully",room:t})})),t.on(w,(function(e,t){if(e)throw e;var n=r.getUsersById(t);N.forEach(n,(function(e){r.unsubscribe(e)}))})),t.on(U,(function(e,t){if(e)throw e;r.dispatchStreamEvent(t,(function(e){r.DataCache.remove(e)})),r.unsubscribe(t)})),t.on(k,(function(e,t){var n=r.pc,o=r.StreamCache,i=n.getStreamId(t),s=o.get(i);if(r.SubscribeCache.setState(t.id,{type:Te.VIDEO,state:Se.DISBALE}),s){var a=s.getVideoTracks();N.forEach(a,(function(e){e.enabled=!1}))}})),t.on(D,(function(e,t){var n=r.pc,o=r.StreamCache,i=n.getStreamId(t),s=o.get(i);if(r.SubscribeCache.setState(t.id,{type:Te.VIDEO,state:Se.ENABLE}),s){var a=s.getVideoTracks();N.forEach(a,(function(e){e.enabled=!0}))}})),t.on(x,(function(e,t){r.SubscribeCache.setState(t.id,{type:Te.AUDIO,state:Se.DISABLE})})),t.on(B,(function(e,t){r.SubscribeCache.setState(t.id,{type:Te.AUDIO,state:Se.ENABLE})}))}return i(e,[{key:"setPC",value:function(){var e=this;if(!e.pc||e.pc.isClosed()){e.pc=new Tr(e.option),e.im.emit(qn,e.pc);var t=e.pc,n=e.im,r=e.network,o=e.StreamCache,i=e.SubscribeCache,s=e.SubPromiseCache,a=function(t){var r=t.id;o.set(r,t);var a=e.getStreamUser(t),c=i.get(a.id)||[];N.forEach(c,(function(e){var n=e.state,r=e.type,o=N.isEqual(Te.VIDEO,r),i=N.isEqual(n,Se.DISBALE),s=N.isEqual(t.id,e.msid);if(o&&i&&s){var a=t.getVideoTracks();N.forEach(a,(function(e){e.enabled=!1}))}})),n.emit(Kn,{mediaStream:t,user:a});var u=e.getSubPromiseUId(a),l=s.get(u);if(N.isUndefined(l))return Tn.log(Ae,{msg:"stream added-part",user:a,tracks:t.getTracks()});Tn.log(Ae,{msg:"stream added",user:a,tracks:t.getTracks()}),l.resolve(a)};t.on(On,(function(e,t){if(e)throw e;a(t)})),t.on(Nn,(function(e,t){if(e)throw e;var n=t.id;o.remove(n)})),t.on(Pn,(function(e,t){if(e)throw e;N.isArray(t)&&N.forEach(t,a)})),t.on(Ln,(function(e,t){if(e)throw e;N.isArray(t)&&N.forEach(t,a)})),t.on(wn,(function(){t.isNegotiate()&&n.isJoined()&&r.detect((function(t){if(t)e.reconnect();else{var r=Re.Inner;n.emit(jn,r.NETWORK_UNAVAILABLE)}}))}))}}},{key:"clear",value:function(){this.DataCache.clear(),this.SubPromiseCache.clear(),this.PubResourceCache.clear(),this.StreamCache.clear(),this.SubscribeCache.clear(),this.PublishStreamCache.clear()}},{key:"getUsersById",value:function(e){var t=this.SubscribeCache,n=e.id,r=t.get(n),o={},i={};N.forEach(r,(function(e){var t=e.msid,n=e.tag,r=e.type;o[t]=n;var s=i[t]||[];s.push(r),i[t]=s}));var s=[];return N.forEach(o,(function(e,t){var r=i[t]||[],o=i[0];o=N.isEqual(r.length,2)?Te.AUDIO_AND_VIDEO:o,s.push({id:n,stream:{tag:e,type:o}})})),s}},{key:"getStreamUser",value:function(e){var t=this.im,n=this.pc,r=this.DataCache,o=e.id,i=t.v2Users.get(o),s=Te.NODE,a=void 0,u=void 0;if(i)a=o,u="";else{var l=n.getStreamSymbolById(o),d=c(l,2);a=d[0],u=d[1],mn(u)&&(u="")}var f=e.getVideoTracks(),p=e.getAudioTracks(),g=N.isEmpty(f),h=N.isEmpty(p),m="{id}_{type}",v=N.tplEngine(m,{id:o,type:Te.VIDEO}),y=N.tplEngine(m,{id:o,type:Te.AUDIO}),C=r.get(v),R=r.get(y);g=g||N.isEmpty(C),h=h||N.isEmpty(R),g&&(s=Te.AUDIO),h&&(s=Te.VIDEO);var T=!0,I=!0;return h||g||(s=Te.AUDIO_AND_VIDEO,N.isEqual(C.state,Se.DISBALE)?T=!1:N.isEqual(R.state,Se.DISBALE)&&(I=!1)),{id:a,stream:{tag:u,type:s,mediaStream:e,enable:{video:T,audio:I}}}}},{key:"getSubPromiseUId",value:function(e){var t=e.id,n=e.stream.tag;return N.tplEngine("{id}_{tag}",{id:t,tag:n})}},{key:"getUId",value:function(e,t){t=t||"{userId}_{tag}_{type}";var n=e.id,r=e.stream,o=r.tag,i=r.type;return N.isEmpty(o)&&(t="{userId}_{type}"),N.tplEngine(t,{userId:n,tag:o,type:i})}},{key:"getSubs",value:function(){var e=this.SubscribeCache,t=[],n=e.getKeys();return N.forEach(n,(function(n){var r=e.get(n);N.forEach(r,(function(e){t.push(e)}))})),t}},{key:"getBody",value:function(e){var t,n=this.pc,r=this.PublishStreamCache,o=this.getSubs(),i=r.getKeys();t=N.map(i,(function(e){return{id:e,mediaStream:r.get(e)}}));var s=n.getStreamRatio(t),a={subscribeList:o,resolutionInfo:s,extend:function(e){var t=[];for(var n in e){var r={trackId:e[n][0].videoTrackId};delete r.videoTrackId,delete e[n][0].videoTrackId,N.extend(r,e[n][0]),t.push(r)}return JSON.stringify({resolutionInfo:t})}(s)};return e?(N.extend(a,{sdp:e}),N.Defer.resolve(a)):n.getOffer().then((function(e){return N.extend(a,{sdp:e}),a}))}},{key:"negotiate",value:function(e,t){var n=this.pc;n.setOffer(e);var r=t.sdp;n.setAnwser(r)}},{key:"getDeviceSwitchState",value:function(e,t){var n=Wr.get(),r=Se.ENABLE;return/RongCloudRTC/.test(e)&&(t===Te.AUDIO?r=n.audio:t===Te.VIDEO&&(r=n.video)),r}},{key:"getUris",value:function(e){var t=this,n=this.pc;return N.map(e,(function(e){var r=e.msid,o=e.mediaType,i=n.getTagByStreamId(r);return N.extend(e,{tag:i,state:t.getDeviceSwitchState(i,o)}),e}))}},{key:"getTrackState",value:function(e){N.isArray(e)||(e=[e]);var t={};return N.forEach(e,(function(e){var n=e.mediaStream,r=n.streamId,o=n.getVideoTracks(),i=n.getAudioTracks(),s=function(e){return N.isEqual(e.enabled,!1)},a=Se.ENABLE;N.some(o,s)&&(a=Se.DISBALE);var c=Se.ENABLE;N.some(i,s)&&(c=Se.DISBALE),t[r]={video:a,audio:c}})),t}},{key:"dispatchStreamEvent",value:function(e,t){var n=this,r=e.id,o=e.stream.uris;N.forEach(o,(function(e){var o=e.tag,i=e.mediaType,s=n.getUId({id:r,stream:{tag:o,type:i}});t(s,e)}))}},{key:"updateTrackState",value:function(e,t,n){var r=e.stream,o=this.getTrackState(r),i=function(e){N.forEach(o,(function(t,n){var r=t.audio,o=t.video;N.map(e,(function(e){var t=N.isEqual(e.msid,n);return t&&N.isEqual(e.mediaType,Te.VIDEO)&&N.extend(e,{state:o}),t&&N.isEqual(e.mediaType,Te.AUDIO)&&N.extend(e,{state:r}),e}))}))};return i(t),i(n),{sendUris:t,uris:n}}},{key:"appendStreamId",value:function(e){var t=this.pc,n=e.id,r=e.stream;N.isArray(r)||(r=[r]),N.map(r,(function(e){var r=t.getStreamId({id:n,stream:e}),o=e.mediaStream;N.extend(o,{streamId:r})}))}},{key:"usersHandler",value:function(e){var t=this,n=t.DataCache,r=t.im;n.set(Gr,e);var o=r.getUser().id;N.forEach(e,(function(e,i){var s=e.uris;if(N.isUndefined(s))Tn.log(we,{msg:"user exist, uris is empty",user:{id:i}});else{if(N.isEqual(o,i)){var a=c(s,1)[0];if(N.isUndefined(a))return;var u=a.mediaType,l=a.tag;u=N.isEqual(s.length,1)?u:Te.AUDIO_AND_VIDEO;var d={id:i,stream:{tag:l,type:u}};return t.unpublish(d)}N.forEach(s,(function(e){var r=e.mediaType,o=e.tag,s=t.getUId({id:i,stream:{type:r,tag:o}});n.set(s,e)}));var f=N.uniq(s,(function(e){var t=e.tag,n=e.msid||e.streamId;return mn(t)&&(t=""),{key:[n].join("_"),value:{tag:t}}}));N.forEach(f,(function(e){var t=e.tag,n=N.filter(s,(function(e){var n=e.msid;return N.isInclude(n,t)}));setTimeout((function(){r.emit(L,{id:i,stream:{tag:t,uris:n}})}))}))}}))}},{key:"setOptionBitrate",value:function(e,t){var n=this.option.bitrate;n.max+=e,n.min+=t,n.start=.7*n.max,n.max=n.max>rn.RESOLUTION_176_132.maxBitRate?n.max:rn.RESOLUTION_176_132.maxBitRate,n.min=n.min>rn.RESOLUTION_176_132.minBitRate?n.min:rn.RESOLUTION_176_132.minBitRate,n.start=n.start>.7*n.max?n.start:.7*n.max}},{key:"setBitrate",value:function(e,t){var n=this,r=e.stream;N.isArray(r)||(r=[r]),N.forEach(r,(function(e){var r=e.bitrate,o=e.mediaStream,i={},s=0,a=0;N.isEmpty(o.getVideoTracks())||(i=o.getVideoTracks()[0].getConstraints());var c="RESOLUTION_"+i.width+"_"+i.height,u=rn[c];if(N.isEmpty(u)&&(u=rn.RESOLUTION_640_480),!N.isEmpty(r))return s=r.max||u.maxBitRate,a=r.min||u.minBitRate,void n.setOptionBitrate(s,a);if(!N.isEmpty(u)&&N.isObject(u)){var l=on[i.frameRate]||1;s=u.maxBitRate*l*t,a=u.minBitRate*l*t,n.setOptionBitrate(s,a)}}))}},{key:"exchangeHandler",value:function(e,t,n,r){var o=this.pc,i=this.im,s=this.PubResourceCache,a=this.User,c=e.publishList,u=e.sdp;o.setOffer(r),o.setAnwser(u),Tn.log(we,{msg:"exchangeHandler set sdp"});var l=this.getUris(c);this.appendStreamId(t);var d=function(e){var n=t.id,r=s.get(n)||[];N.isEqual(e,Mr)&&(r=l);var i=o.getStreamId(t),a=N.filter(r,(function(e){return function(e){var t=e.msid;return N.isEqual(t,i)}(e)}));return N.isEmpty(a)?l:a}(n);this.updateTrackState(t,d,l);var f={uris:d},p=i.getMessage(n,f);return a.set(a.SET_USERINFO,l,!0,p),s.set(t.id,l)}},{key:"compare",value:function(){var e=this.im,t=this.pc,n=this.DataCache,r=function(e){var t={};return N.forEach(e,(function(e){var n=e.uris;N.forEach(n,(function(e){var n=e.msid,r=t[n]||[];r.push(e),t[n]=r}))})),t},o=function(t,n,r,o){pn({id:n,uris:r},(function(n){if(N.isFunction(o))return o(n);e.emit(t,n)}))};e.getUsers().then((function(i){N.forEach(i,(function(e){var t=e.uris;t=N.parse(t),N.extend(e,{uris:t})}));var s=n.get(Gr);!function(t,n){var r=N.clone(t),o=N.toArray(n),i=e.getUser().id;N.forEach(o,(function(n){var o=c(n,1)[0],s=o in t,a=N.isEqual(i,o);Tn.log(we,{msg:"stream:compareuser",currentUserId:i,remoteUserId:o,isInclude:s,localUsers:t}),s?delete r[o]:a||e.emit(A,{id:o})})),r=N.toArray(r),N.forEach(r,(function(t){var n=c(t,1)[0];e.emit(w,{id:n})}))}(s,i),function(n,i){n=r(n),i=r(i);var s=N.clone(n);N.forEach(i,(function(r,i){var a=i in n,u=t.getStreamSymbolById(i),l=c(u,1)[0],d=e.getUser().id,f=N.isEqual(d,l);if(a){delete s[i];var p=N.toJSON(r),g=n[i],h=N.toJSON(g);N.isEqual(p,h)||o("",l,r,(function(t){gn(t,(function(t,n){e.emit(t,n)}))}))}else f||o(L,l,r)})),N.forEach(s,(function(e,n){var r=t.getStreamSymbolById(n),i=c(r,1)[0];o(U,i,e)}))}(s,i),n.set(Gr,i)}))}},{key:"reconnect",value:function(){var e=this,t=e.im,n=e.option,r=t.getRoomId();e.getBody().then((function(o){var i=N.tplEngine(er,{roomId:r});Tn.log(we,{msg:"publish:reconnect:request",roomId:r,body:o});var s=dn(t,n),a=o.sdp;return gr({path:i,body:o,headers:s}).then((function(t){Tn.log(we,{msg:"publish:reconnect:response",roomId:r,response:t}),e.negotiate(a,t)}),(function(e){return Tn.log(we,{msg:"publish:reconnect:response",roomId:r,error:e}),e}))}))}},{key:"isTrackExist",value:function(e,t){var n=this,r=n.DataCache,o=e.id,i=e.stream.tag,s=!1;return N.forEach(t,(function(e){var t={id:o,stream:{tag:i,type:e}},a=n.getUId(t),c=(r.get(a)||{}).uri;N.isUndefined(c)&&(s=!0)})),s}},{key:"publish",value:function(e){var t=this,n=t.pc,r=t.im,o=t.PublishStreamCache,i=t.StreamCache,s=t.option,a=e.stream;N.isArray(a)||(a=[a]);var c=e.id;N.forEach(a,(function(t){var s=t.mediaStream,a=t.size,u=n.getStreamId({id:c,stream:t},a);i.set(u,s),o.set(u,s),N.isUndefined(s)||r.emit(Kn,{mediaStream:s,user:e})}));var u=Cn(e);r.emit(Jn,{type:rt,name:z,content:{trackIds:u}}),n.addStream(e);var l=r.getRoomId();return N.deferred((function(o,i){n.createOffer(e).then((function(n){return t.getBody(n).then((function(a){var c=N.tplEngine(Xn,{roomId:l});Tn.log(we,{msg:"publish:request",roomId:l,user:e,body:a});var u=dn(r,s);return In.info(Nt,{url:c,roomId:l,body:a}),gr({path:c,body:a,headers:u}).then((function(i){var s=i.publishList,a=i.urls,c=i.clusterId;t.setBitrate(e,1);var u,d,f={};a=a||{},N.isArray(s)&&r.emit(Yn,s),Tn.log(we,{msg:"publish:response",roomId:l,user:e,response:i}),In.info(At,{roomId:l,response:i}),t.exchangeHandler(i,e,Mr,n),f=N.extend(f,a),c&&yr(c),a.configUrl&&fr({mcuUrls:[(u=a.configUrl,d=location.protocol,N.tplEngine("{protocol}//{configUrl}",{protocol:d,configUrl:u}))]}),o(f)}),(function(t){Tn.log(we,{msg:"publish:response:error",roomId:l,user:e,error:t}),In.error(wt,{roomId:l,error:t}),i(t)}))}))}))}))}},{key:"unpublish",value:function(e){var t=this,n=t.im,r=t.pc,o=t.option,i=t.StreamCache,s=t.PublishStreamCache;e=N.clone(e);var a=r.getStreamId(e),c=i.get(a);c||(c=new MediaStream);var u=[],l=e.stream,d=N.clone(l),f=e.id;l=N.extend(l,{mediaStream:c}),u.push(l);var p=r.getStreamId({id:f,stream:d},Ie.MIN),g=i.get(p);g&&(d=N.extend(d,{mediaStream:g}),u.push(d)),N.extend(e,{stream:u});var h=n.getRoomId();Tn.log(we,{msg:"unpublish:start",roomId:h,user:e}),N.forEach(u,(function(e){var t=e.mediaStream,n=t.getTracks();N.forEach(n,(function(e){e.stop()}));var r=t.id;s.remove(r)})),i.remove(a);var m=Cn(e);return n.emit(Jn,{type:rt,name:$,content:{trackIds:m}}),r.removeStream(e).then((function(r){return t.getBody().then((function(i){var s=N.tplEngine($n,{roomId:h});Tn.log(we,{msg:"unpublish:request",roomId:h,user:e,body:i});var a=dn(n,o);return In.info(Nt,{url:s,roomId:h,body:i}),gr({path:s,body:i,headers:a}).then((function(n){Tn.log(we,{msg:"unpublish:response",roomId:h,user:e,response:n}),In.info(At,{roomId:h,response:n}),t.setBitrate(e,-1),t.exchangeHandler(n,e,_r,r)}),(function(t){Tn.log(we,{msg:"unpublish:response",roomId:h,user:e,error:t}),In.error(wt,{roomId:h,error:t})}))}))}))}},{key:"publishDefault",value:function(e){var t=this;return Jr(e).then((function(n){var r=n.mediaStream,o={id:e.userId,stream:{tag:"RongCloudRTC",type:e.type,mediaStream:r}};return t.publish(o).then((function(){return N.Defer.resolve({mediaStream:r})}))}),(function(t){return Tn.log(we,{msg:"publishDefault:error",constraints:e,error:t}),N.Defer.reject(t)}))}},{key:"subscribe",value:function(e,t){var n=this,r=n.pc,o=n.im,i=n.option,s=n.SubscribeCache,a=n.SubPromiseCache,c=n.DataCache,u=e.id,l=e.stream,d=l.tag,f=l.type,p=s.get(u)||[],g=[Te.VIDEO,Te.AUDIO];if(N.isEqual(f,Te.AUDIO_AND_VIDEO)||(g=[f]),n.isTrackExist(e,g)){var h=Re.Inner;return N.Defer.reject(h.STREAM_TRACK_NOT_EXIST)}N.forEach(g,(function(e){var t={id:u,stream:{tag:d,type:e}},r=n.getUId(t),o=c.get(r),i=!0;N.forEach(p,(function(t){var n=t.type,r=t.tag;mn(r)&&(d=""),N.isEqual(e,n)&&N.isEqual(d,r)&&(i=!1)})),i&&!N.isUndefined(o)&&(o=N.clone(o),(o=N.rename(o,{mediaType:"type"})).type==Te.VIDEO&&(o.simulcast=Ie.MIN),o.state=Se.ENABLE,p.push(o))}));var m=o.getRoomId(),v=N.tplEngine(er,{roomId:m}),y=!1;(s.getKeys().length>0||n.PublishStreamCache.getKeys().length>0)&&(v=N.tplEngine(tr,{roomId:m}),y=!0),s.set(u,p);var C=Cn(e);return o.emit(Jn,{type:rt,name:Z,content:{trackIds:C}}),N.deferred((function(s,c){var u=n.getSubPromiseUId(e);a.set(u,{resolve:s,reject:c,type:f}),n.getBody().then((function(s){var c=s.sdp,u=dn(o,i),l={path:v,body:s,headers:u};Tn.log(we,{msg:"subscribe:request",roomId:m,reqOption:l}),In.info(Dt,{url:v,roomId:m,reqOption:l}),gr(l).then((function(n){var o=n.sdp,i=n.clusterId;i&&yr(i),y?r.setRemoteAnwser(o).then(t).catch(t):(r.setOffer(c),r.setAnwser(o).then(t).catch(t)),Tn.log(we,{msg:"subscribe:response:stream:not:arrive",roomId:m,user:e,response:n}),In.info(xt,{roomId:m,response:n})}),(function(t){Tn.log(we,{msg:"subscribe:response:error",roomId:m,user:e,error:t}),In.error(Bt,{roomId:m,error:t});var r=n.getSubPromiseUId(e),o=a.get(r);N.isUndefined(o)||o.reject(t)}))}))}))}},{key:"unsubscribe",value:function(e){var t=this.pc,n=this.im,r=this.option,o=this.SubscribeCache;if(N.isNull(t)||!o.get(e.id))return N.Defer.resolve();o.remove(e);var i=n.getRoomId();Tn.log(we,{msg:"unsubscribe:start",roomId:i,user:e});var s=Cn(e);return n.emit(Jn,{type:rt,name:ee,content:{trackIds:s}}),this.getBody().then((function(o){var s=N.tplEngine(nr,{roomId:i});Tn.log(we,{msg:"unsubscribe:request",roomId:i,user:e,body:o}),In.info(Dt,{url:s,roomId:i,body:o});var a=dn(n,r);return gr({path:s,body:o,headers:a}).then((function(n){Tn.log(we,{msg:"unsubscribe:response",roomId:i,user:e,response:n}),In.info(xt,{roomId:i,response:n});var r=n.sdp;return t.setRemoteAnwser(r)}),(function(t){Tn.error(we,{msg:"unsubscribe:response:error",roomId:i,user:e,error:t}),In.error(Bt,{roomId:i,error:t})})).catch((function(t){Tn.error(we,{msg:"unsubscribe:response:error",roomId:i,user:e,error:t})}))}))}},{key:"resize",value:function(e){var t=this.im,n=this.pc,r=this.option,o=this.SubscribeCache,i=e.stream.size,s=e.id,a=o.get(s);if(N.isUndefined(a))return N.Defer.reject(Re.Inner.STREAM_NOT_EXIST);var c=t.getRoomId();return Tn.log(we,{msg:"resize:start",roomId:c,user:e}),this.getBody().then((function(o){var s=n.getStreamId(e),u=N.filter(a,(function(e){var t=e.msid;return N.isEqual(s,t)}))[0];if(!u){var l=Re.Inner.STREAM_NOT_EXIST;return Tn.log(we,{msg:"resize:response",roomId:c,user:e,error:l}),N.Defer.reject(l)}var d=u.msid;N.forEach(o.subscribeList,(function(e){N.isEqual(e.msid,d)&&N.extend(e,{simulcast:i})}));var f=N.tplEngine(Zn,{roomId:c});Tn.log(we,{msg:"resize:request",roomId:c,user:e,body:o});var p=dn(t,r);return gr({path:f,body:o,headers:p}).then((function(t){Tn.log(we,{msg:"resize:response",roomId:c,user:e,response:t})}),(function(t){Tn.log(we,{msg:"resize:response",roomId:c,user:e,error:t})}))}))}},{key:"get",value:function(e){return(e=e||{}).screen?function(e){var t=e.desktopStreamId;if(!t){var n=Re.Inner;return N.Defer.reject(n.STREAM_DESKTOPID_ILLEGAL)}return Kr(e={video:{getDisplayMedia:{chromeMediaSource:"desktop",chromeMediaSourceId:t}}})}(e):Jr(e)}},{key:"setMixConfig",value:function(e,t){var n=this.im,r=this.option,o=pr().mcuUrls||[];if(N.isEmpty(o))return N.Defer.reject(Re.Inner.MUST_PUBLISHED_BEFORE_SETMIXCONFIG);var i=or,s=n.getSessionId(),a=dn(n,r,{SessionId:s});a.AppKey=a["App-Key"],delete a["App-Key"];var c=function(e,t){(e=e||{}).video=e.video||{},e.audio=e.audio||{},e.tinyVideo=e.tinyVideo||{};var n=N.handleObjKeys(e.customLayout,N.humpToLine),r=N.extend(et,{host_user_id:e.hostUserId,host_stream_id:e.hostStreamId,mode:e.layoutMode||$e.SUSPENSION,output:{video:{normal:e.video,tiny:e.tinyVideo,exparams:{renderMode:e.video.renderMode}},audio:e.audio},input:n});return t.length>0&&(r.output.cdn=t.map((function(e){return{pushurl:e}}))),N.clearEselessFields(r)}(e,t);return Tn.log(we,{msg:"setMixConfig:request",headers:a,body:c}),In.info(Xt,{url:i,body:c}),gr({urls:o,path:i,body:c,headers:a}).then((function(e){return Tn.log(we,{msg:"setMixConfig:response",headers:a,body:c,response:e}),In.info($t,{response:e}),e}),(function(e){return Tn.log(we,{msg:"setMixConfig:error",headers:a,body:c,error:e}),In.error(Zt,{error:e}),e}))}},{key:"trackHandler",value:function(e,t,n){var r=e.stream;r=r||{};var o=this.pc,i=this.im,s=this.StreamCache,a=o.getStreamId(e,r.size),c=s.get(a);if(c){t=N.isEqual(t,Te.AUDIO)?"Audio":"Video";var u=c[t=N.tplEngine("get{type}Tracks",{type:t})]();N.forEach(u,(function(e){i.emit(Wn,{id:e.id,isEnable:n}),e.enabled=n}))}}},{key:"getFitUris",value:function(e,t,n){var r=this.PubResourceCache,o=this.pc,i=e.id,s=r.get(i)||[],a=o.getStreamId(e);return s=N.filter(s,(function(e){var r=e.msid,o=e.mediaType,i=N.isEqual(a,r),s=N.isEqual(o,t),c=i&&s;return c&&N.extend(e,{state:n}),c}))}},{key:"saveModify",value:function(e,t,n){var r=this.im,o=this.PubResourceCache,i=this.User,s=this.getFitUris(e,t,n);if(!N.isEmpty(s)){var a=e.id,c=o.get(a),u={uris:s},l=r.getMessage(br,u);i.set(i.SET_USERINFO,c,!0,l)}return N.Defer.resolve()}},{key:"isCurrentUser",value:function(e){var t=this.im.getUser().id;return N.isEqual(e.id,t)}},{key:"modifyTrack",value:function(e,t,n,r){return this.trackHandler(e,t,r),this.isCurrentUser(e)&&(Wr.set(t,n),this.saveModify(e,t,n)),N.Defer.resolve()}},{key:"mute",value:function(e){return this.modifyTrack(e,Te.AUDIO,Se.DISBALE,!1)}},{key:"unmute",value:function(e){return this.modifyTrack(e,Te.AUDIO,Se.ENABLE,!0)}},{key:"enable",value:function(e){return this.modifyTrack(e,Te.VIDEO,Se.ENABLE,!0)}},{key:"disable",value:function(e){return this.modifyTrack(e,Te.VIDEO,Se.DISBALE,!1)}},{key:"destroy",value:function(){var e=this.pc,t=this.im;this.clear(),e&&(e.close(),t.emit(Gn))}}]),e}();function Qr(e,t,n){var r=new N.Prosumer,o=new bn,i=void 0,s=function(){i&&i.destroy(),i=vn(n)?new Ir(e,t):new Yr(e,t)};return s(),e.on(Qn,(function(e,t){var n=t.newRole,r=t.oldRole;yn(n,r)&&s()})),e.on(jn,(function(){i&&i.destroy()})),o.on(Vn,(function(){r.consume((function(e,t){var n,r,o,s,a,c,l,d,f,p,g,h,m=e.event,v=e.args,y=e.resolve,C=e.reject;switch(m){case z:return(n=i).publish.apply(n,u(v)).then((function(e){t(),y(e)})).catch((function(e){t(),C(e)}));case X:return(r=i).publishDefault.apply(r,u(v)).then((function(e){t(),y(e)})).catch((function(e){t(),C(e)}));case $:return(o=i).unpublish.apply(o,u(v)).then((function(e){t(),y(e)})).catch((function(e){t(),C(e)}));case Z:return(s=i).subscribe.apply(s,u(v).concat([function(){t()}])).then((function(e){y(e)})).catch((function(e){t(),C(e)}));case ee:return(a=i).unsubscribe.apply(a,u(v)).then((function(e){t(),y(e)})).catch((function(e){t(),C(e)}));case te:return(c=i).resize.apply(c,u(v)).then((function(e){t(),y(e)})).catch((function(e){t(),C(e)}));case ne:return(l=i).get.apply(l,u(v)).then((function(e){t(),y(e)})).catch((function(e){t(),C(e)}));case oe:return(d=i).mute.apply(d,u(v)).then((function(e){t(),y(e)})).catch((function(e){t(),C(e)}));case ie:return(f=i).unmute.apply(f,u(v)).then((function(e){t(),y(e)})).catch((function(e){t(),C(e)}));case se:return(p=i).disable.apply(p,u(v)).then((function(e){t(),y(e)})).catch((function(e){t(),C(e)}));case ae:return(g=i).enable.apply(g,u(v)).then((function(e){t(),y(e)})).catch((function(e){t(),C(e)}));case re:return(h=i).setMixConfig.apply(h,u(v)).then((function(e){t(),y(e)})).catch((function(e){t(),C(e)}));default:Tn.warn(we,{event:m,msg:"unkown event"})}}))})),{dispatch:function(e,t){return N.deferred((function(n,i){r.produce({event:e,args:t,resolve:n,reject:i}),o.emit(Vn)}))}}}function zr(e,t){var n=function(n){Tn.log(Le,{msg:"join:before",room:n}),In.info(ft,{roomId:n.id,userId:n.user.id});var r=Re.Inner;return e.isJoined()?(Tn.log(Le,{msg:"join:after",extra:"repeate join room"}),In.warn(gt,{desc:"repeate join room",roomId:n.id,userId:n.user.id}),N.Defer.reject(r.ROOM_REPEAT_JOIN)):e.isIMReady()?N.deferred((function(r,o){var i=t.mode,s=t.liveType;N.extend(n,{mode:i,broadcastType:s}),e.joinRoom(n).then((function(t){Tn.log(Le,{msg:"join:after",users:t}),t=N.toArray(t),t=N.map(t,(function(e){var t=c(e,2),n=t[0],r=t[1],o={};return(r&&r.uris?r.uris:[]).forEach((function(e){var t=e.mediaType,n=e.tag,r=e.state;/RongCloudRTC/.test(n)&&(t===Te.AUDIO?o.audio=!!r:t===Te.VIDEO&&(o.video=!!r))})),{id:n,state:o}})),e.emit(Jn,{type:nt,name:K,content:{}}),In.info(pt,{remoteUids:t}),r({users:t})})).catch((function(e){Tn.log(Le,{msg:"join:after:error",room:n,error:e}),In.error(gt,{code:e,desc:"join:after:error",roomId:n.id,userId:n.user.id}),o(e)}))})):(Tn.log(Le,{msg:"im:connected",extra:"IM not connected"}),In.warn(gt,{desc:"IM not connected",roomId:n.id,userId:n.user.id}),N.Defer.reject(r.IM_NOT_CONNECTED))},r=function(){var n=e.getRoomId(),r=e.getUser();Tn.log(Le,{msg:"leave:before",roomId:n,user:r});var o=e.getRTCToken(),i=N.tplEngine(sr,{roomId:n}),s=dn(e,t);N.extend(e,{isJoinRoom:!1});var a=function(t,o){In.info(Ct,{roomId:n,uid:r.id}),e.leaveRoom().then((function(){Tn.log(Le,{msg:"leave:after",roomId:n,user:r}),In.info(Rt,{roomId:n,uid:r.id}),t()}),(function(e){Tn.log(Le,{msg:"leave:im:error",roomId:n,error:e,user:r}),In.warn(Tt,{msg:"leave:im:error",roomId:n,error:e,uid:r.id}),o(e)}))};return N.deferred((function(e,t){In.info(It,{roomId:n,mediaUrl:i}),gr({path:i,headers:s,body:{token:o}}).then((function(){In.warn(St,{roomId:n}),a(e,t)}),(function(o){Tn.log(Le,{msg:"leave:ms:error",roomId:n,error:o,user:r}),In.warn(Et,{msg:"leave:ms:error",roomId:n,error:o,uid:r.id}),a(e,t)}))}))},o=function(){return e.getRoom()},i=function(){return e.getSessionId()},s=function(){return e.getUsers()};return{dispatch:function(e,t){switch(e){case K:return n.apply(void 0,u(t));case J:return r.apply(void 0,u(t));case W:return o.apply(void 0,u(t));case Y:return i.apply(void 0,u(t));case Q:return s.apply(void 0,u(t));default:Tn.warn(Le,{event:e,msg:"unkown event"})}}}}function Xr(e){var t=function(e,t){return t=function(e){return N.isEqual(e,Ke.ROOM)?"Room":"User"}(t),N.tplEngine("{operate}{type}Data",{operate:e,type:t})},n=function(n,r,o,i){var s=t("set",n);return e[s](r,o,!1,i)},r=function(n,r){var o=t("get",n);return e[o](r,!1)},o=function(n,r,o){var i=t("remove",n);return e[i](r,!1,o)};return{dispatch:function(e,t){switch(e){case ce:return n.apply(void 0,u(t));case ue:return r.apply(void 0,u(t));case le:return o.apply(void 0,u(t));default:Tn.warn(Ue,{event:e,msg:"unkown event"})}}}}function $r(e){var t=function(t){return e.sendMessage(t)};return{dispatch:function(e,n){switch(e){case de:return t.apply(void 0,u(n));default:Tn.warn(De,{event:e,msg:"unkown event"})}}}}function Zr(){var e=function(){return navigator.mediaDevices.enumerateDevices()};return{dispatch:function(t,n){switch(t){case fe:return e.apply(void 0,u(n));default:Tn.warn(xe,{event:t,msg:"unkown event"})}}}}function eo(e,t){var n=0,r=(t.stat||{}).frequency||2e3,o=t.mode===Qe.RTC,i=t.liveRole===Xe.AUDIENCE,s={TOTAL_PACAKS_LOST:"total_packs_lost",IS_FIRST:"is_first",PACKAGE_SENT:"package_sent",PACKAGE_RECEIVED:"package_received",PACKAGE_SENT_LOST:"package_sent_lost",PACKAGE_RECEIVED_LOST:"package_received_lost",PACKAGE_SENT_ENUM:{AUDIO:"package_sent_audio",VIDEO:"package_sent_video"},PACKAGE_RECEIVED_ENUM:{AUDIO:"package_received_audio",VIDEO:"package_received_video"},PACKAGE_SENT_LOST_ENUM:{AUDIO:"package_sent_lost_audio",VIDEO:"package_sent_lost_video"},PACKAGE_RECEIVED_LOST_ENUM:{AUDIO:"package_received_lost_audio",VIDEO:"package_received_lost_video"},BYTES_SENT:"bytes_sent",BYTES_RECEIVED:"bytes_received"},a=N.Cache(),c=N.Cache(),u=N.Cache(),l=function(e){return u.get(e)},d=function(e){N.isArray(e)||(e=[e]);var t={1:"video",0:"audio"};N.forEach(e,(function(e){var n=e.uri,r=e.msid,o=e.mediaType,i=(n=N.parse(n)).ssrc,s=t[o],a=N.tplEngine("{msid}_{kind}",{msid:r,kind:s});u.set(i,a)}))};e.on(Yn,(function(e,t){e||d(t)})),e.on(Wn,(function(e,t){if(!e){var n=t.id,r=t.isEnable;c.set(n,r)}}));var f=function(t){if(!hn()&&e.isConnected()){if(!o&&i)return;e.setRTCState(t),Tn.log(Be,t)}},p=function(t){var n=function(e){var t={},n=e.audioOutputLevel||e.audioInputLevel||"-1",o=e.googFrameRateInput||e.googFrameRateOutput||"-1",i=e.id,u=function(e){var t=e.googFrameWidthSent,n=e.googFrameHeightSent,r=e.googFrameHeightReceived,o=e.googFrameWidthReceived,i="{width}x{height}",s=N.tplEngine(i,{height:n,width:t});s=N.isInclude(s,"height")?"-1":s;var a=N.tplEngine(i,{height:r,width:o});return{send:s,receive:a=N.isInclude(a,"height")?"-1":a}}(e),d=e.googTrackId,f=ot,p=c.get(d);(N.isUndefined(p)||p)&&(f=it);var g=N.isInclude(i,"send"),h=u.receive;g&&(h=u.send);var m=function(e){var t=e.bytesSent,n=e.bytesReceived,o=e.googTrackId,i=t||n,s=a.get(o);return a.set(o,i),N.isUndefined(s)?"-1":8*(i-s)/1024/(r/1e3)}(e),v="-1",y="-1",C=function(e){var t=e.packetsSent,n=e.packetsReceived,r=e.packetsLost,o=e.mediaType,i=function(e,t,n,r){var o=Math.abs(e-t),i=Math.abs(n-r);if(0==o)return 100;var s=i/(o+i);return"NaN"===s.toString()?0:(s=s>1?1:s).toFixed(2)},c=o.toUpperCase();return(0,{sender:function(){var e=a.get(s.PACKAGE_SENT_ENUM[c]);a.set(s.PACKAGE_SENT_ENUM[c],t);var n=a.get(s.PACKAGE_SENT_LOST_ENUM[c]);return a.set(s.PACKAGE_SENT_LOST_ENUM[c],r),i(t,e,r,n)},receiver:function(){var e=a.get(s.PACKAGE_RECEIVED_ENUM[c]);a.set(s.PACKAGE_RECEIVED_ENUM[c],n);var t=a.get(s.PACKAGE_RECEIVED_LOST_ENUM[c]);return a.set(s.PACKAGE_RECEIVED_LOST_ENUM[c],r),i(n,e,r,t)}}[g?"sender":"receiver"])()}(e),R=0,T=0;g?(v=m,T=C):(R=C,y=m),N.forEach(["googCodecName","packetsLost","googJitterReceived","googNacksReceived","googPlisReceived","googRtt","googFirsReceived","codecImplementationName","googRenderDelayMs","googJitterSent","googNacksSent","googPlisSent","googFirsSent","mediaType"],(function(n){t[n]=e[n]||"-1"}));var I=e.googTrackId,S=e.ssrc;return I=l(S)||"-1",N.extend(t,{googTrackId:I,audioLevel:n,samplingRate:"-1",frameRate:o,transferRate:"-1",resolution:h,trackState:f,trackSent:v,trackReceived:y,packLostSentRate:T,packLostReceivedRate:R,isSender:g}),t},o=function(e,n){var r=N.filter(t,(function(t){var n=t.type;return N.isEqual(n,e)}));return n?r:r[0]},i=o("ssrc",!0),u=o("VideoBwe"),d=o("localcandidate"),f=o("googCandidatePair");i=N.map(i,(function(e){return n(e)}));var p=f=function(e){var t=e=e||{},n=t.bytesReceived,o=t.bytesSent,i=t.googLocalAddress,c=a.get(s.BYTES_SENT),u=a.get(s.BYTES_RECEIVED),l="-1",d="-1";return c&&(l=8*(o-c)/1024/(r/1e3)),u&&(d=8*(n-u)/1024/(r/1e3)),a.set(s.BYTES_SENT,o),a.set(s.BYTES_RECEIVED,n),{totalSend:l,totalReceive:d,localAddress:i}}(f),g=p.totalSend,h=p.totalReceive,m=p.localAddress,v=0;if(N.forEach(i,(function(e){var t=e.packetsLost;t=Number(t),N.isEqual(t,"-1")||(v+=t)})),N.isUndefined(d))return{};var y=d.networkType,C=d.stunKeepaliveRttTotal,R={networkType:y,rtt:C,receiveBand:u.googAvailableReceiveBandwidth,localAddress:m,sendBand:u.googAvailableSendBandwidth,packetsLost:v,deviceId:e.getUserId()},T=[],I=[],S=[],E=[];N.forEach(i,(function(e){var t=e.isSender,n=e.trackSent;if(t){if("0.00"!=n){var r=function(e){return N.tplEngine(tt.R3_ITEM,e)}(e);T.push(r),I.push(function(e){var t={},n=!0,r=!1,o=void 0;try{for(var i,s=tt.R3_KEYS[Symbol.iterator]();!(n=(i=s.next()).done);n=!0){var a=i.value;t[a]=e[a]}}catch(e){r=!0,o=e}finally{try{!n&&s.return&&s.return()}finally{if(r)throw o}}return t}(e))}}else{var o=function(e){return N.tplEngine(tt.R4_ITEM,e)}(e);S.push(o),E.push(function(e){var t={},n=!0,r=!1,o=void 0;try{for(var i,s=tt.R4_KEYS[Symbol.iterator]();!(n=(i=s.next()).done);n=!0){var a=i.value;t[a]=e[a]}}catch(e){r=!0,o=e}finally{try{!n&&s.return&&s.return()}finally{if(r)throw o}}return t}(e))}}));var M=void 0,_=void 0,b={};if(!N.isEmpty(T)){var O={totalRate:g,tracks:T.join("\n")};N.extend(O,R),M=function(e){return N.tplEngine(tt.R3,e)}(O);var A={totalRate:g,tracks:I};N.extend(A,R),b.sender=A}if(!N.isEmpty(S)){var w={totalRate:h,tracks:S.join("\n")};N.extend(w,R),_=function(e){return N.tplEngine(tt.R4,e)}(w);var P={totalRate:h,tracks:E,rtt:C};b.received=P}return N.isUndefined(a.get(s.IS_FIRST))?(a.set(s.IS_FIRST,!0),{}):{data:{R3:M,R4:_},reports:b}},g=function(){n&&clearInterval(n)},h=function(t){n=setInterval((function(){t.getStats((function(t){var n=p(t);o&&(n.reports=function(e){try{for(var t in e){var n=e[t]||{};n.tracks&&(n.tracks=N.uniq(n.tracks,(function(e){return{key:e.googTrackId,value:e}})),n.tracks=N.filter(n.tracks,(function(e){var t=e.googTrackId;return t&&!N.isEqual(t,"-1")})),e[t].tracks=n.tracks)}}catch(e){}return e}(n.reports)),function(e){N.forEach(e,(function(e){e&&f({report:e})}))}(n.data),n.reports&&e.emit(G,n.reports)}))}),r)},m=Tr.getInstance();m&&h(m),e.on(Bn,(function(){g()})),e.on(qn,(function(e,t){if(e)throw e;hn()||h(t)})),e.on(Gn,(function(e){if(e)throw e;g()})),e.on(Jn,(function(t,n){if(N.isUndefined(t)){var r=n.type,o=n.name,i=n.content.trackIds,s="",a=N.getBrowser();switch(r){case nt:u={rtcVersion:"3.2.5",imVersion:e.getIMVersion(),platform:"Web",pcName:navigator.platform,pcVersion:"-1",browserName:a.name,browserVersion:a.version,deviceId:cn()},s=N.tplEngine(tt.R1,u);break;case rt:var c=function(e){var t="",n="";switch(e){case z:t="publish",n="begin";break;case $:t="publish",n="end";break;case Z:t="subscribe",n="begin";break;case ee:t="subscribe",n="end"}return{type:t,state:n}}(o);s=function(e){return N.tplEngine(tt.R2,e)}({type:c.type,state:c.state,deviceId:cn(),trackIds:i.join("\t")})}N.isEmpty(s)||f({report:s})}var u}))}function to(){return function e(t,n,r){function o(s,a){if(!n[s]){if(!t[s]){if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[s]={exports:{}};t[s][0].call(u.exports,(function(e){return o(t[s][1][e]||e)}),u,u.exports,e,t,n,r)}return n[s].exports}for(var i=!1,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,t,n){var r=(0,e("./adapter_factory.js").adapterFactory)({window:window});t.exports=r},{"./adapter_factory.js":2}],2:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.adapterFactory=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.window,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{shimChrome:!0,shimFirefox:!0,shimEdge:!0,shimSafari:!0},u=r.log,l=r.detectBrowser(t),d={browserDetails:l,commonShim:c,extractVersion:r.extractVersion,disableLog:r.disableLog,disableWarnings:r.disableWarnings};switch(l.browser){case"chrome":if(!o||!o.shimPeerConnection||!n.shimChrome)return u("Chrome shim is not included in this adapter release."),d;u("adapter.js shimming chrome."),d.browserShim=o,o.shimGetUserMedia(t),o.shimMediaStream(t),o.shimPeerConnection(t),o.shimOnTrack(t),o.shimAddTrackRemoveTrack(t),o.shimGetSendersWithDtmf(t),o.shimSenderReceiverGetStats(t),o.fixNegotiationNeeded(t),c.shimRTCIceCandidate(t),c.shimConnectionState(t),c.shimMaxMessageSize(t),c.shimSendThrowTypeError(t);break;case"firefox":if(!s||!s.shimPeerConnection||!n.shimFirefox)return u("Firefox shim is not included in this adapter release."),d;u("adapter.js shimming firefox."),d.browserShim=s,s.shimGetUserMedia(t),s.shimPeerConnection(t),s.shimOnTrack(t),s.shimRemoveStream(t),s.shimSenderGetStats(t),s.shimReceiverGetStats(t),s.shimRTCDataChannel(t),c.shimRTCIceCandidate(t),c.shimConnectionState(t),c.shimMaxMessageSize(t),c.shimSendThrowTypeError(t);break;case"edge":if(!i||!i.shimPeerConnection||!n.shimEdge)return u("MS edge shim is not included in this adapter release."),d;u("adapter.js shimming edge."),d.browserShim=i,i.shimGetUserMedia(t),i.shimGetDisplayMedia(t),i.shimPeerConnection(t),i.shimReplaceTrack(t),c.shimMaxMessageSize(t),c.shimSendThrowTypeError(t);break;case"safari":if(!a||!n.shimSafari)return u("Safari shim is not included in this adapter release."),d;u("adapter.js shimming safari."),d.browserShim=a,a.shimRTCIceServerUrls(t),a.shimCreateOfferLegacy(t),a.shimCallbacksAPI(t),a.shimLocalStreamsAPI(t),a.shimRemoteStreamsAPI(t),a.shimTrackEventTransceiver(t),a.shimGetUserMedia(t),c.shimRTCIceCandidate(t),c.shimMaxMessageSize(t),c.shimSendThrowTypeError(t);break;default:u("Unsupported browser!")}return d};var r=u(e("./utils")),o=u(e("./chrome/chrome_shim")),i=u(e("./edge/edge_shim")),s=u(e("./firefox/firefox_shim")),a=u(e("./safari/safari_shim")),c=u(e("./common_shim"));function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}},{"./chrome/chrome_shim":3,"./common_shim":6,"./edge/edge_shim":7,"./firefox/firefox_shim":11,"./safari/safari_shim":14,"./utils":15}],3:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.shimGetDisplayMedia=n.shimGetUserMedia=void 0;var o="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)},i=e("./getusermedia");Object.defineProperty(n,"shimGetUserMedia",{enumerable:!0,get:function(){return i.shimGetUserMedia}});var s=e("./getdisplaymedia");Object.defineProperty(n,"shimGetDisplayMedia",{enumerable:!0,get:function(){return s.shimGetDisplayMedia}}),n.shimMediaStream=function(e){e.MediaStream=e.MediaStream||e.webkitMediaStream},n.shimOnTrack=function(e){if("object"===(void 0===e?"undefined":o(e))&&e.RTCPeerConnection&&!("ontrack"in e.RTCPeerConnection.prototype)){Object.defineProperty(e.RTCPeerConnection.prototype,"ontrack",{get:function(){return this._ontrack},set:function(e){this._ontrack&&this.removeEventListener("track",this._ontrack),this.addEventListener("track",this._ontrack=e)},enumerable:!0,configurable:!0});var t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){var n=this;return this._ontrackpoly||(this._ontrackpoly=function(t){t.stream.addEventListener("addtrack",(function(r){var o=void 0;o=e.RTCPeerConnection.prototype.getReceivers?n.getReceivers().find((function(e){return e.track&&e.track.id===r.track.id})):{track:r.track};var i=new Event("track");i.track=r.track,i.receiver=o,i.transceiver={receiver:o},i.streams=[t.stream],n.dispatchEvent(i)})),t.stream.getTracks().forEach((function(r){var o=void 0;o=e.RTCPeerConnection.prototype.getReceivers?n.getReceivers().find((function(e){return e.track&&e.track.id===r.id})):{track:r};var i=new Event("track");i.track=r,i.receiver=o,i.transceiver={receiver:o},i.streams=[t.stream],n.dispatchEvent(i)}))},this.addEventListener("addstream",this._ontrackpoly)),t.apply(this,arguments)}}else a.wrapPeerConnectionEvent(e,"track",(function(e){return e.transceiver||Object.defineProperty(e,"transceiver",{value:{receiver:e.receiver}}),e}))},n.shimGetSendersWithDtmf=function(e){if("object"===(void 0===e?"undefined":o(e))&&e.RTCPeerConnection&&!("getSenders"in e.RTCPeerConnection.prototype)&&"createDTMFSender"in e.RTCPeerConnection.prototype){var t=function(e,t){return{track:t,get dtmf(){return void 0===this._dtmf&&("audio"===t.kind?this._dtmf=e.createDTMFSender(t):this._dtmf=null),this._dtmf},_pc:e}};if(!e.RTCPeerConnection.prototype.getSenders){e.RTCPeerConnection.prototype.getSenders=function(){return this._senders=this._senders||[],this._senders.slice()};var n=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,r){var o=n.apply(this,arguments);return o||(o=t(this,e),this._senders.push(o)),o};var r=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){r.apply(this,arguments);var t=this._senders.indexOf(e);-1!==t&&this._senders.splice(t,1)}}var i=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){var n=this;this._senders=this._senders||[],i.apply(this,[e]),e.getTracks().forEach((function(e){n._senders.push(t(n,e))}))};var s=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){var t=this;this._senders=this._senders||[],s.apply(this,[e]),e.getTracks().forEach((function(e){var n=t._senders.find((function(t){return t.track===e}));n&&t._senders.splice(t._senders.indexOf(n),1)}))}}else if("object"===(void 0===e?"undefined":o(e))&&e.RTCPeerConnection&&"getSenders"in e.RTCPeerConnection.prototype&&"createDTMFSender"in e.RTCPeerConnection.prototype&&e.RTCRtpSender&&!("dtmf"in e.RTCRtpSender.prototype)){var a=e.RTCPeerConnection.prototype.getSenders;e.RTCPeerConnection.prototype.getSenders=function(){var e=this,t=a.apply(this,[]);return t.forEach((function(t){return t._pc=e})),t},Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get:function(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=this._pc.createDTMFSender(this.track):this._dtmf=null),this._dtmf}})}},n.shimSenderReceiverGetStats=function(e){if("object"===(void 0===e?"undefined":o(e))&&e.RTCPeerConnection&&e.RTCRtpSender&&e.RTCRtpReceiver){if(!("getStats"in e.RTCRtpSender.prototype)){var t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){var e=this,n=t.apply(this,[]);return n.forEach((function(t){return t._pc=e})),n});var n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){var e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){var e=this;return this._pc.getStats().then((function(t){return c(t,e.track,!0)}))}}if(!("getStats"in e.RTCRtpReceiver.prototype)){var r=e.RTCPeerConnection.prototype.getReceivers;r&&(e.RTCPeerConnection.prototype.getReceivers=function(){var e=this,t=r.apply(this,[]);return t.forEach((function(t){return t._pc=e})),t}),a.wrapPeerConnectionEvent(e,"track",(function(e){return e.receiver._pc=e.srcElement,e})),e.RTCRtpReceiver.prototype.getStats=function(){var e=this;return this._pc.getStats().then((function(t){return c(t,e.track,!1)}))}}if("getStats"in e.RTCRtpSender.prototype&&"getStats"in e.RTCRtpReceiver.prototype){var i=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){if(arguments.length>0&&arguments[0]instanceof e.MediaStreamTrack){var t=arguments[0],n=void 0,r=void 0,o=void 0;return this.getSenders().forEach((function(e){e.track===t&&(n?o=!0:n=e)})),this.getReceivers().forEach((function(e){return e.track===t&&(r?o=!0:r=e),e.track===t})),o||n&&r?Promise.reject(new DOMException("There are more than one sender or receiver for the track.","InvalidAccessError")):n?n.getStats():r?r.getStats():Promise.reject(new DOMException("There is no sender or receiver for the track.","InvalidAccessError"))}return i.apply(this,arguments)}}}},n.shimAddTrackRemoveTrackWithNative=function(e){e.RTCPeerConnection.prototype.getLocalStreams=function(){var e=this;return this._shimmedLocalStreams=this._shimmedLocalStreams||{},Object.keys(this._shimmedLocalStreams).map((function(t){return e._shimmedLocalStreams[t][0]}))};var t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,n){if(!n)return t.apply(this,arguments);this._shimmedLocalStreams=this._shimmedLocalStreams||{};var r=t.apply(this,arguments);return this._shimmedLocalStreams[n.id]?-1===this._shimmedLocalStreams[n.id].indexOf(r)&&this._shimmedLocalStreams[n.id].push(r):this._shimmedLocalStreams[n.id]=[n,r],r};var n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){var t=this;this._shimmedLocalStreams=this._shimmedLocalStreams||{},e.getTracks().forEach((function(e){if(t.getSenders().find((function(t){return t.track===e})))throw new DOMException("Track already exists.","InvalidAccessError")}));var r=this.getSenders();n.apply(this,arguments);var o=this.getSenders().filter((function(e){return-1===r.indexOf(e)}));this._shimmedLocalStreams[e.id]=[e].concat(o)};var r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},delete this._shimmedLocalStreams[e.id],r.apply(this,arguments)};var o=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){var t=this;return this._shimmedLocalStreams=this._shimmedLocalStreams||{},e&&Object.keys(this._shimmedLocalStreams).forEach((function(n){var r=t._shimmedLocalStreams[n].indexOf(e);-1!==r&&t._shimmedLocalStreams[n].splice(r,1),1===t._shimmedLocalStreams[n].length&&delete t._shimmedLocalStreams[n]})),o.apply(this,arguments)}},n.shimAddTrackRemoveTrack=function(e){if(e.RTCPeerConnection){var t=a.detectBrowser(e);if(e.RTCPeerConnection.prototype.addTrack&&t.version>=65)return this.shimAddTrackRemoveTrackWithNative(e);var n=e.RTCPeerConnection.prototype.getLocalStreams;e.RTCPeerConnection.prototype.getLocalStreams=function(){var e=this,t=n.apply(this);return this._reverseStreams=this._reverseStreams||{},t.map((function(t){return e._reverseStreams[t.id]}))};var r=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(t){var n=this;if(this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},t.getTracks().forEach((function(e){if(n.getSenders().find((function(t){return t.track===e})))throw new DOMException("Track already exists.","InvalidAccessError")})),!this._reverseStreams[t.id]){var o=new e.MediaStream(t.getTracks());this._streams[t.id]=o,this._reverseStreams[o.id]=t,t=o}r.apply(this,[t])};var o=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},o.apply(this,[this._streams[e.id]||e]),delete this._reverseStreams[this._streams[e.id]?this._streams[e.id].id:e.id],delete this._streams[e.id]},e.RTCPeerConnection.prototype.addTrack=function(t,n){var r=this;if("closed"===this.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");var o=[].slice.call(arguments,1);if(1!==o.length||!o[0].getTracks().find((function(e){return e===t})))throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.","NotSupportedError");var i=this.getSenders().find((function(e){return e.track===t}));if(i)throw new DOMException("Track already exists.","InvalidAccessError");this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{};var s=this._streams[n.id];if(s)s.addTrack(t),Promise.resolve().then((function(){r.dispatchEvent(new Event("negotiationneeded"))}));else{var a=new e.MediaStream([t]);this._streams[n.id]=a,this._reverseStreams[a.id]=n,this.addStream(a)}return this.getSenders().find((function(e){return e.track===t}))},["createOffer","createAnswer"].forEach((function(t){var n=e.RTCPeerConnection.prototype[t];e.RTCPeerConnection.prototype[t]=function(){var e=this,t=arguments,r=arguments.length&&"function"==typeof arguments[0];return r?n.apply(this,[function(n){var r=c(e,n);t[0].apply(null,[r])},function(e){t[1]&&t[1].apply(null,e)},arguments[2]]):n.apply(this,arguments).then((function(t){return c(e,t)}))}}));var i=e.RTCPeerConnection.prototype.setLocalDescription;e.RTCPeerConnection.prototype.setLocalDescription=function(){return arguments.length&&arguments[0].type?(arguments[0]=u(this,arguments[0]),i.apply(this,arguments)):i.apply(this,arguments)};var s=Object.getOwnPropertyDescriptor(e.RTCPeerConnection.prototype,"localDescription");Object.defineProperty(e.RTCPeerConnection.prototype,"localDescription",{get:function(){var e=s.get.apply(this);return""===e.type?e:c(this,e)}}),e.RTCPeerConnection.prototype.removeTrack=function(e){var t=this;if("closed"===this.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");if(!e._pc)throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.","TypeError");if(e._pc!==this)throw new DOMException("Sender was not created by this connection.","InvalidAccessError");this._streams=this._streams||{};var n=void 0;Object.keys(this._streams).forEach((function(r){t._streams[r].getTracks().find((function(t){return e.track===t}))&&(n=t._streams[r])})),n&&(1===n.getTracks().length?this.removeStream(this._reverseStreams[n.id]):n.removeTrack(e.track),this.dispatchEvent(new Event("negotiationneeded")))}}function c(e,t){var n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach((function(t){var r=e._reverseStreams[t],o=e._streams[r.id];n=n.replace(new RegExp(o.id,"g"),r.id)})),new RTCSessionDescription({type:t.type,sdp:n})}function u(e,t){var n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach((function(t){var r=e._reverseStreams[t],o=e._streams[r.id];n=n.replace(new RegExp(r.id,"g"),o.id)})),new RTCSessionDescription({type:t.type,sdp:n})}},n.shimPeerConnection=function(e){if(!e.RTCPeerConnection&&e.webkitRTCPeerConnection&&(e.RTCPeerConnection=e.webkitRTCPeerConnection),e.RTCPeerConnection){var t=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(e,n,r){var o=this,i=arguments;if(arguments.length>0&&"function"==typeof e)return t.apply(this,arguments);if(0===t.length&&(0===arguments.length||"function"!=typeof arguments[0]))return t.apply(this,[]);var s=function(e){var t={};return e.result().forEach((function(e){var n={id:e.id,timestamp:e.timestamp,type:{localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[e.type]||e.type};e.names().forEach((function(t){n[t]=e.stat(t)})),t[n.id]=n})),t},a=function(e){return new Map(Object.keys(e).map((function(t){return[t,e[t]]})))};if(arguments.length>=2){var c=function(e){i[1](a(s(e)))};return t.apply(this,[c,arguments[0]])}return new Promise((function(e,n){t.apply(o,[function(t){e(a(s(t)))},n])})).then(n,r)},["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(t){var n=e.RTCPeerConnection.prototype[t];e.RTCPeerConnection.prototype[t]=function(){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}}));var n=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?n.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())}}},n.fixNegotiationNeeded=function(e){a.wrapPeerConnectionEvent(e,"negotiationneeded",(function(e){if("stable"===e.target.signalingState)return e}))};var a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(e("../utils.js"));function c(e,t,n){var r=n?"outbound-rtp":"inbound-rtp",o=new Map;if(null===t)return o;var i=[];return e.forEach((function(e){"track"===e.type&&e.trackIdentifier===t.id&&i.push(e)})),i.forEach((function(t){e.forEach((function(n){n.type===r&&n.trackId===t.id&&function e(t,n,r){n&&!r.has(n.id)&&(r.set(n.id,n),Object.keys(n).forEach((function(o){o.endsWith("Id")?e(t,t.get(n[o]),r):o.endsWith("Ids")&&n[o].forEach((function(n){e(t,t.get(n),r)}))})))}(e,n,o)}))})),o}},{"../utils.js":15,"./getdisplaymedia":4,"./getusermedia":5}],4:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.shimGetDisplayMedia=function(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&("function"==typeof t?e.navigator.mediaDevices.getDisplayMedia=function(n){return t(n).then((function(t){var r=n.video&&n.video.width,o=n.video&&n.video.height,i=n.video&&n.video.frameRate;return n.video={mandatory:{chromeMediaSource:"desktop",chromeMediaSourceId:t,maxFrameRate:i||3}},r&&(n.video.mandatory.maxWidth=r),o&&(n.video.mandatory.maxHeight=o),e.navigator.mediaDevices.getUserMedia(n)}))}:console.error("shimGetDisplayMedia: getSourceId argument is not a function"))}},{}],5:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)};n.shimGetUserMedia=function(e){var t=e&&e.navigator;if(t.mediaDevices){var n=i.detectBrowser(e),r=function(e){if("object"!==(void 0===e?"undefined":o(e))||e.mandatory||e.optional)return e;var t={};return Object.keys(e).forEach((function(n){if("require"!==n&&"advanced"!==n&&"mediaSource"!==n){var r="object"===o(e[n])?e[n]:{ideal:e[n]};void 0!==r.exact&&"number"==typeof r.exact&&(r.min=r.max=r.exact);var i=function(e,t){return e?e+t.charAt(0).toUpperCase()+t.slice(1):"deviceId"===t?"sourceId":t};if(void 0!==r.ideal){t.optional=t.optional||[];var s={};"number"==typeof r.ideal?(s[i("min",n)]=r.ideal,t.optional.push(s),(s={})[i("max",n)]=r.ideal,t.optional.push(s)):(s[i("",n)]=r.ideal,t.optional.push(s))}void 0!==r.exact&&"number"!=typeof r.exact?(t.mandatory=t.mandatory||{},t.mandatory[i("",n)]=r.exact):["min","max"].forEach((function(e){void 0!==r[e]&&(t.mandatory=t.mandatory||{},t.mandatory[i(e,n)]=r[e])}))}})),e.advanced&&(t.optional=(t.optional||[]).concat(e.advanced)),t},a=function(e,i){if(n.version>=61)return i(e);if((e=JSON.parse(JSON.stringify(e)))&&"object"===o(e.audio)){var a=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])};a((e=JSON.parse(JSON.stringify(e))).audio,"autoGainControl","googAutoGainControl"),a(e.audio,"noiseSuppression","googNoiseSuppression"),e.audio=r(e.audio)}if(e&&"object"===o(e.video)){var c=e.video.facingMode;c=c&&("object"===(void 0===c?"undefined":o(c))?c:{ideal:c});var u=n.version<66;if(c&&("user"===c.exact||"environment"===c.exact||"user"===c.ideal||"environment"===c.ideal)&&(!t.mediaDevices.getSupportedConstraints||!t.mediaDevices.getSupportedConstraints().facingMode||u)){delete e.video.facingMode;var l=void 0;if("environment"===c.exact||"environment"===c.ideal?l=["back","rear"]:"user"!==c.exact&&"user"!==c.ideal||(l=["front"]),l)return t.mediaDevices.enumerateDevices().then((function(t){var n=(t=t.filter((function(e){return"videoinput"===e.kind}))).find((function(e){return l.some((function(t){return e.label.toLowerCase().includes(t)}))}));return!n&&t.length&&l.includes("back")&&(n=t[t.length-1]),n&&(e.video.deviceId=c.exact?{exact:n.deviceId}:{ideal:n.deviceId}),e.video=r(e.video),s("chrome: "+JSON.stringify(e)),i(e)}))}e.video=r(e.video)}return s("chrome: "+JSON.stringify(e)),i(e)},c=function(e){return n.version>=64?e:{name:{PermissionDeniedError:"NotAllowedError",PermissionDismissedError:"NotAllowedError",InvalidStateError:"NotAllowedError",DevicesNotFoundError:"NotFoundError",ConstraintNotSatisfiedError:"OverconstrainedError",TrackStartError:"NotReadableError",MediaDeviceFailedDueToShutdown:"NotAllowedError",MediaDeviceKillSwitchOn:"NotAllowedError",TabCaptureError:"AbortError",ScreenCaptureError:"AbortError",DeviceCaptureError:"AbortError"}[e.name]||e.name,message:e.message,constraint:e.constraint||e.constraintName,toString:function(){return this.name+(this.message&&": ")+this.message}}};t.getUserMedia=function(e,n,r){a(e,(function(e){t.webkitGetUserMedia(e,n,(function(e){r&&r(c(e))}))}))}.bind(t);var u=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(e){return a(e,(function(e){return u(e).then((function(t){if(e.audio&&!t.getAudioTracks().length||e.video&&!t.getVideoTracks().length)throw t.getTracks().forEach((function(e){e.stop()})),new DOMException("","NotFoundError");return t}),(function(e){return Promise.reject(c(e))}))}))}}};var i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(e("../utils.js")),s=i.log},{"../utils.js":15}],6:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)};n.shimRTCIceCandidate=function(e){if(!(!e.RTCIceCandidate||e.RTCIceCandidate&&"foundation"in e.RTCIceCandidate.prototype)){var t=e.RTCIceCandidate;e.RTCIceCandidate=function(e){if("object"===(void 0===e?"undefined":o(e))&&e.candidate&&0===e.candidate.indexOf("a=")&&((e=JSON.parse(JSON.stringify(e))).candidate=e.candidate.substr(2)),e.candidate&&e.candidate.length){var n=new t(e),r=a.default.parseCandidate(e.candidate),i=Object.assign(n,r);return i.toJSON=function(){return{candidate:i.candidate,sdpMid:i.sdpMid,sdpMLineIndex:i.sdpMLineIndex,usernameFragment:i.usernameFragment}},i}return new t(e)},e.RTCIceCandidate.prototype=t.prototype,c.wrapPeerConnectionEvent(e,"icecandidate",(function(t){return t.candidate&&Object.defineProperty(t,"candidate",{value:new e.RTCIceCandidate(t.candidate),writable:"false"}),t}))}},n.shimMaxMessageSize=function(e){if(!e.RTCSctpTransport&&e.RTCPeerConnection){var t=c.detectBrowser(e);"sctp"in e.RTCPeerConnection.prototype||Object.defineProperty(e.RTCPeerConnection.prototype,"sctp",{get:function(){return void 0===this._sctp?null:this._sctp}});var n=function(e){var t=a.default.splitSections(e.sdp);return t.shift(),t.some((function(e){var t=a.default.parseMLine(e);return t&&"application"===t.kind&&-1!==t.protocol.indexOf("SCTP")}))},r=function(e){var t=e.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);if(null===t||t.length<2)return-1;var n=parseInt(t[1],10);return n!=n?-1:n},o=function(e){var n=65536;return"firefox"===t.browser&&(n=t.version<57?-1===e?16384:2147483637:t.version<60?57===t.version?65535:65536:2147483637),n},i=function(e,n){var r=65536;"firefox"===t.browser&&57===t.version&&(r=65535);var o=a.default.matchPrefix(e.sdp,"a=max-message-size:");return o.length>0?r=parseInt(o[0].substr(19),10):"firefox"===t.browser&&-1!==n&&(r=2147483637),r},s=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){if(this._sctp=null,n(arguments[0])){var e=r(arguments[0]),t=o(e),a=i(arguments[0],e),c=void 0;c=0===t&&0===a?Number.POSITIVE_INFINITY:0===t||0===a?Math.max(t,a):Math.min(t,a);var u={};Object.defineProperty(u,"maxMessageSize",{get:function(){return c}}),this._sctp=u}return s.apply(this,arguments)}}},n.shimSendThrowTypeError=function(e){if(e.RTCPeerConnection&&"createDataChannel"in e.RTCPeerConnection.prototype){var t=e.RTCPeerConnection.prototype.createDataChannel;e.RTCPeerConnection.prototype.createDataChannel=function(){var e=t.apply(this,arguments);return n(e,this),e},c.wrapPeerConnectionEvent(e,"datachannel",(function(e){return n(e.channel,e.target),e}))}function n(e,t){var n=e.send;e.send=function(){var r=arguments[0],o=r.length||r.size||r.byteLength;if("open"===e.readyState&&t.sctp&&o>t.sctp.maxMessageSize)throw new TypeError("Message too large (can send a maximum of "+t.sctp.maxMessageSize+" bytes)");return n.apply(e,arguments)}}},n.shimConnectionState=function(e){if(e.RTCPeerConnection&&!("connectionState"in e.RTCPeerConnection.prototype)){var t=e.RTCPeerConnection.prototype;Object.defineProperty(t,"connectionState",{get:function(){return{completed:"connected",checking:"connecting"}[this.iceConnectionState]||this.iceConnectionState},enumerable:!0,configurable:!0}),Object.defineProperty(t,"onconnectionstatechange",{get:function(){return this._onconnectionstatechange||null},set:function(e){this._onconnectionstatechange&&(this.removeEventListener("connectionstatechange",this._onconnectionstatechange),delete this._onconnectionstatechange),e&&this.addEventListener("connectionstatechange",this._onconnectionstatechange=e)},enumerable:!0,configurable:!0}),["setLocalDescription","setRemoteDescription"].forEach((function(e){var n=t[e];t[e]=function(){return this._connectionstatechangepoly||(this._connectionstatechangepoly=function(e){var t=e.target;if(t._lastConnectionState!==t.connectionState){t._lastConnectionState=t.connectionState;var n=new Event("connectionstatechange",e);t.dispatchEvent(n)}return e},this.addEventListener("iceconnectionstatechange",this._connectionstatechangepoly)),n.apply(this,arguments)}}))}};var i,s=e("sdp"),a=(i=s)&&i.__esModule?i:{default:i},c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(e("./utils"))},{"./utils":15,sdp:17}],7:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.shimGetDisplayMedia=n.shimGetUserMedia=void 0;var r=e("./getusermedia");Object.defineProperty(n,"shimGetUserMedia",{enumerable:!0,get:function(){return r.shimGetUserMedia}});var o=e("./getdisplaymedia");Object.defineProperty(n,"shimGetDisplayMedia",{enumerable:!0,get:function(){return o.shimGetDisplayMedia}}),n.shimPeerConnection=function(e){var t=s.detectBrowser(e);if(e.RTCIceGatherer&&(e.RTCIceCandidate||(e.RTCIceCandidate=function(e){return e}),e.RTCSessionDescription||(e.RTCSessionDescription=function(e){return e}),t.version<15025)){var n=Object.getOwnPropertyDescriptor(e.MediaStreamTrack.prototype,"enabled");Object.defineProperty(e.MediaStreamTrack.prototype,"enabled",{set:function(e){n.set.call(this,e);var t=new Event("enabled");t.enabled=e,this.dispatchEvent(t)}})}e.RTCRtpSender&&!("dtmf"in e.RTCRtpSender.prototype)&&Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get:function(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=new e.RTCDtmfSender(this):"video"===this.track.kind&&(this._dtmf=null)),this._dtmf}}),e.RTCDtmfSender&&!e.RTCDTMFSender&&(e.RTCDTMFSender=e.RTCDtmfSender);var r=(0,u.default)(e,t.version);e.RTCPeerConnection=function(e){return e&&e.iceServers&&(e.iceServers=(0,a.filterIceServers)(e.iceServers,t.version),s.log("ICE servers after filtering:",e.iceServers)),new r(e)},e.RTCPeerConnection.prototype=r.prototype},n.shimReplaceTrack=function(e){e.RTCRtpSender&&!("replaceTrack"in e.RTCRtpSender.prototype)&&(e.RTCRtpSender.prototype.replaceTrack=e.RTCRtpSender.prototype.setTrack)};var i,s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(e("../utils")),a=e("./filtericeservers"),c=e("rtcpeerconnection-shim"),u=(i=c)&&i.__esModule?i:{default:i}},{"../utils":15,"./filtericeservers":8,"./getdisplaymedia":9,"./getusermedia":10,"rtcpeerconnection-shim":16}],8:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.filterIceServers=function(e,t){var n=!1;return(e=JSON.parse(JSON.stringify(e))).filter((function(e){if(e&&(e.urls||e.url)){var t=e.urls||e.url;e.url&&!e.urls&&r.deprecated("RTCIceServer.url","RTCIceServer.urls");var o="string"==typeof t;return o&&(t=[t]),t=t.filter((function(e){if(0===e.indexOf("stun:"))return!1;var t=e.startsWith("turn")&&!e.startsWith("turn:[")&&e.includes("transport=udp");return t&&!n?(n=!0,!0):t&&!n})),delete e.url,e.urls=o?t[0]:t,!!t.length}}))};var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(e("../utils"))},{"../utils":15}],9:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.shimGetDisplayMedia=function(e){"getDisplayMedia"in e.navigator&&e.navigator.mediaDevices&&(e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||(e.navigator.mediaDevices.getDisplayMedia=e.navigator.getDisplayMedia.bind(e.navigator.mediaDevices)))}},{}],10:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.shimGetUserMedia=function(e){var t=e&&e.navigator,n=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(e){return n(e).catch((function(e){return Promise.reject(function(e){return{name:{PermissionDeniedError:"NotAllowedError"}[e.name]||e.name,message:e.message,constraint:e.constraint,toString:function(){return this.name}}}(e))}))}}},{}],11:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.shimGetDisplayMedia=n.shimGetUserMedia=void 0;var o="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)},i=e("./getusermedia");Object.defineProperty(n,"shimGetUserMedia",{enumerable:!0,get:function(){return i.shimGetUserMedia}});var s=e("./getdisplaymedia");Object.defineProperty(n,"shimGetDisplayMedia",{enumerable:!0,get:function(){return s.shimGetDisplayMedia}}),n.shimOnTrack=function(e){"object"===(void 0===e?"undefined":o(e))&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get:function(){return{receiver:this.receiver}}})},n.shimPeerConnection=function(e){var t=a.detectBrowser(e);if("object"===(void 0===e?"undefined":o(e))&&(e.RTCPeerConnection||e.mozRTCPeerConnection)){!e.RTCPeerConnection&&e.mozRTCPeerConnection&&(e.RTCPeerConnection=e.mozRTCPeerConnection),["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(t){var n=e.RTCPeerConnection.prototype[t];e.RTCPeerConnection.prototype[t]=function(){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}}));var n=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?n.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())};var r={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"},i=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(e,n,o){return i.apply(this,[e||null]).then((function(e){if(t.version<53&&!n)try{e.forEach((function(e){e.type=r[e.type]||e.type}))}catch(t){if("TypeError"!==t.name)throw t;e.forEach((function(t,n){e.set(n,Object.assign({},t,{type:r[t.type]||t.type}))}))}return e})).then(n,o)}}},n.shimSenderGetStats=function(e){if("object"===(void 0===e?"undefined":o(e))&&e.RTCPeerConnection&&e.RTCRtpSender&&(!e.RTCRtpSender||!("getStats"in e.RTCRtpSender.prototype))){var t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){var e=this,n=t.apply(this,[]);return n.forEach((function(t){return t._pc=e})),n});var n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){var e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){return this.track?this._pc.getStats(this.track):Promise.resolve(new Map)}}},n.shimReceiverGetStats=function(e){if("object"===(void 0===e?"undefined":o(e))&&e.RTCPeerConnection&&e.RTCRtpSender&&(!e.RTCRtpSender||!("getStats"in e.RTCRtpReceiver.prototype))){var t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){var e=this,n=t.apply(this,[]);return n.forEach((function(t){return t._pc=e})),n}),a.wrapPeerConnectionEvent(e,"track",(function(e){return e.receiver._pc=e.srcElement,e})),e.RTCRtpReceiver.prototype.getStats=function(){return this._pc.getStats(this.track)}}},n.shimRemoveStream=function(e){e.RTCPeerConnection&&!("removeStream"in e.RTCPeerConnection.prototype)&&(e.RTCPeerConnection.prototype.removeStream=function(e){var t=this;a.deprecated("removeStream","removeTrack"),this.getSenders().forEach((function(n){n.track&&e.getTracks().includes(n.track)&&t.removeTrack(n)}))})},n.shimRTCDataChannel=function(e){e.DataChannel&&!e.RTCDataChannel&&(e.RTCDataChannel=e.DataChannel)};var a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(e("../utils"))},{"../utils":15,"./getdisplaymedia":12,"./getusermedia":13}],12:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.shimGetDisplayMedia=function(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&(e.navigator.mediaDevices.getDisplayMedia=function(n){if(!n||!n.video){var r=new DOMException("getDisplayMedia without video constraints is undefined");return r.name="NotFoundError",r.code=8,Promise.reject(r)}return!0===n.video?n.video={mediaSource:t}:n.video.mediaSource=t,e.navigator.mediaDevices.getUserMedia(n)})}},{}],13:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)};n.shimGetUserMedia=function(e){var t=i.detectBrowser(e),n=e&&e.navigator,r=e&&e.MediaStreamTrack;if(n.getUserMedia=function(e,t,r){i.deprecated("navigator.getUserMedia","navigator.mediaDevices.getUserMedia"),n.mediaDevices.getUserMedia(e).then(t,r)},!(t.version>55&&"autoGainControl"in n.mediaDevices.getSupportedConstraints())){var s=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])},a=n.mediaDevices.getUserMedia.bind(n.mediaDevices);if(n.mediaDevices.getUserMedia=function(e){return"object"===(void 0===e?"undefined":o(e))&&"object"===o(e.audio)&&(e=JSON.parse(JSON.stringify(e)),s(e.audio,"autoGainControl","mozAutoGainControl"),s(e.audio,"noiseSuppression","mozNoiseSuppression")),a(e)},r&&r.prototype.getSettings){var c=r.prototype.getSettings;r.prototype.getSettings=function(){var e=c.apply(this,arguments);return s(e,"mozAutoGainControl","autoGainControl"),s(e,"mozNoiseSuppression","noiseSuppression"),e}}if(r&&r.prototype.applyConstraints){var u=r.prototype.applyConstraints;r.prototype.applyConstraints=function(e){return"audio"===this.kind&&"object"===(void 0===e?"undefined":o(e))&&(e=JSON.parse(JSON.stringify(e)),s(e,"autoGainControl","mozAutoGainControl"),s(e,"noiseSuppression","mozNoiseSuppression")),u.apply(this,[e])}}}};var i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(e("../utils"))},{"../utils":15}],14:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)};n.shimLocalStreamsAPI=function(e){if("object"===(void 0===e?"undefined":o(e))&&e.RTCPeerConnection){if("getLocalStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._localStreams||(this._localStreams=[]),this._localStreams}),!("addStream"in e.RTCPeerConnection.prototype)){var t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addStream=function(e){var n=this;this._localStreams||(this._localStreams=[]),this._localStreams.includes(e)||this._localStreams.push(e),e.getTracks().forEach((function(r){return t.call(n,r,e)}))},e.RTCPeerConnection.prototype.addTrack=function(e,n){return n&&(this._localStreams?this._localStreams.includes(n)||this._localStreams.push(n):this._localStreams=[n]),t.call(this,e,n)}}"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(e){var t=this;this._localStreams||(this._localStreams=[]);var n=this._localStreams.indexOf(e);if(-1!==n){this._localStreams.splice(n,1);var r=e.getTracks();this.getSenders().forEach((function(e){r.includes(e.track)&&t.removeTrack(e)}))}})}},n.shimRemoteStreamsAPI=function(e){if("object"===(void 0===e?"undefined":o(e))&&e.RTCPeerConnection&&("getRemoteStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getRemoteStreams=function(){return this._remoteStreams?this._remoteStreams:[]}),!("onaddstream"in e.RTCPeerConnection.prototype))){Object.defineProperty(e.RTCPeerConnection.prototype,"onaddstream",{get:function(){return this._onaddstream},set:function(e){var t=this;this._onaddstream&&(this.removeEventListener("addstream",this._onaddstream),this.removeEventListener("track",this._onaddstreampoly)),this.addEventListener("addstream",this._onaddstream=e),this.addEventListener("track",this._onaddstreampoly=function(e){e.streams.forEach((function(e){t._remoteStreams||(t._remoteStreams=[]),t._remoteStreams.push(e);var n=new Event("addstream");n.stream=e,t.dispatchEvent(n)}))})}});var t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){var e=this;return this._onaddstreampoly||this.addEventListener("track",this._onaddstreampoly=function(t){t.streams.forEach((function(t){if(e._remoteStreams||(e._remoteStreams=[]),!(e._remoteStreams.indexOf(t)>=0)){e._remoteStreams.push(t);var n=new Event("addstream");n.stream=t,e.dispatchEvent(n)}}))}),t.apply(e,arguments)}}},n.shimCallbacksAPI=function(e){if("object"===(void 0===e?"undefined":o(e))&&e.RTCPeerConnection){var t=e.RTCPeerConnection.prototype,n=t.createOffer,r=t.createAnswer,i=t.setLocalDescription,s=t.setRemoteDescription,a=t.addIceCandidate;t.createOffer=function(e,t){var r=arguments.length>=2?arguments[2]:arguments[0],o=n.apply(this,[r]);return t?(o.then(e,t),Promise.resolve()):o},t.createAnswer=function(e,t){var n=arguments.length>=2?arguments[2]:arguments[0],o=r.apply(this,[n]);return t?(o.then(e,t),Promise.resolve()):o};var c=function(e,t,n){var r=i.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r};t.setLocalDescription=c,c=function(e,t,n){var r=s.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.setRemoteDescription=c,c=function(e,t,n){var r=a.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.addIceCandidate=c}},n.shimGetUserMedia=function(e){var t=e&&e.navigator;!t.getUserMedia&&t.mediaDevices&&t.mediaDevices.getUserMedia&&(t.getUserMedia=function(e,n,r){t.mediaDevices.getUserMedia(e).then(n,r)}.bind(t))},n.shimRTCIceServerUrls=function(e){var t=e.RTCPeerConnection;e.RTCPeerConnection=function(e,n){if(e&&e.iceServers){for(var r=[],o=0;o<e.iceServers.length;o++){var s=e.iceServers[o];!s.hasOwnProperty("urls")&&s.hasOwnProperty("url")?(i.deprecated("RTCIceServer.url","RTCIceServer.urls"),(s=JSON.parse(JSON.stringify(s))).urls=s.url,delete s.url,r.push(s)):r.push(e.iceServers[o])}e.iceServers=r}return new t(e,n)},e.RTCPeerConnection.prototype=t.prototype,"generateCertificate"in e.RTCPeerConnection&&Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:function(){return t.generateCertificate}})},n.shimTrackEventTransceiver=function(e){"object"===(void 0===e?"undefined":o(e))&&e.RTCPeerConnection&&"receiver"in e.RTCTrackEvent.prototype&&!e.RTCTransceiver&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get:function(){return{receiver:this.receiver}}})},n.shimCreateOfferLegacy=function(e){var t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(e){if(e){void 0!==e.offerToReceiveAudio&&(e.offerToReceiveAudio=!!e.offerToReceiveAudio);var n=this.getTransceivers().find((function(e){return e.sender.track&&"audio"===e.sender.track.kind}));!1===e.offerToReceiveAudio&&n?"sendrecv"===n.direction?n.setDirection?n.setDirection("sendonly"):n.direction="sendonly":"recvonly"===n.direction&&(n.setDirection?n.setDirection("inactive"):n.direction="inactive"):!0!==e.offerToReceiveAudio||n||this.addTransceiver("audio"),void 0!==e.offerToReceiveVideo&&(e.offerToReceiveVideo=!!e.offerToReceiveVideo);var r=this.getTransceivers().find((function(e){return e.sender.track&&"video"===e.sender.track.kind}));!1===e.offerToReceiveVideo&&r?"sendrecv"===r.direction?r.setDirection?r.setDirection("sendonly"):r.direction="sendonly":"recvonly"===r.direction&&(r.setDirection?r.setDirection("inactive"):r.direction="inactive"):!0!==e.offerToReceiveVideo||r||this.addTransceiver("video")}return t.apply(this,arguments)}};var i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(e("../utils"))},{"../utils":15}],15:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)};n.extractVersion=a,n.wrapPeerConnectionEvent=function(e,t,n){if(e.RTCPeerConnection){var r=e.RTCPeerConnection.prototype,o=r.addEventListener;r.addEventListener=function(e,r){if(e!==t)return o.apply(this,arguments);var i=function(e){var t=n(e);t&&r(t)};return this._eventMap=this._eventMap||{},this._eventMap[r]=i,o.apply(this,[e,i])};var i=r.removeEventListener;r.removeEventListener=function(e,n){if(e!==t||!this._eventMap||!this._eventMap[n])return i.apply(this,arguments);var r=this._eventMap[n];return delete this._eventMap[n],i.apply(this,[e,r])},Object.defineProperty(r,"on"+t,{get:function(){return this["_on"+t]},set:function(e){this["_on"+t]&&(this.removeEventListener(t,this["_on"+t]),delete this["_on"+t]),e&&this.addEventListener(t,this["_on"+t]=e)},enumerable:!0,configurable:!0})}},n.disableLog=function(e){return"boolean"!=typeof e?new Error("Argument type: "+(void 0===e?"undefined":o(e))+". Please use a boolean."):(i=e,e?"adapter.js logging disabled":"adapter.js logging enabled")},n.disableWarnings=function(e){return"boolean"!=typeof e?new Error("Argument type: "+(void 0===e?"undefined":o(e))+". Please use a boolean."):(s=!e,"adapter.js deprecation warnings "+(e?"disabled":"enabled"))},n.log=function(){if("object"===("undefined"==typeof window?"undefined":o(window))){if(i)return;"undefined"!=typeof console&&"function"==typeof console.log&&console.log.apply(console,arguments)}},n.deprecated=function(e,t){s&&console.warn(e+" is deprecated, please use "+t+" instead.")},n.detectBrowser=function(e){var t=e.navigator,n={browser:null,version:null};if(void 0===e||!e.navigator)return n.browser="Not a browser.",n;if(t.mozGetUserMedia)n.browser="firefox",n.version=a(t.userAgent,/Firefox\/(\d+)\./,1);else if(t.webkitGetUserMedia)n.browser="chrome",n.version=a(t.userAgent,/Chrom(e|ium)\/(\d+)\./,2);else if(t.mediaDevices&&t.userAgent.match(/Edge\/(\d+).(\d+)$/))n.browser="edge",n.version=a(t.userAgent,/Edge\/(\d+).(\d+)$/,2);else{if(!e.RTCPeerConnection||!t.userAgent.match(/AppleWebKit\/(\d+)\./))return n.browser="Not a supported browser.",n;n.browser="safari",n.version=a(t.userAgent,/AppleWebKit\/(\d+)\./,1)}return n};var i=!0,s=!0;function a(e,t,n){var r=e.match(t);return r&&r.length>=n&&parseInt(r[n],10)}},{}],16:[function(e,t,n){var r=e("sdp");function o(e,t,n,o,i){var s=r.writeRtpDescription(e.kind,t);if(s+=r.writeIceParameters(e.iceGatherer.getLocalParameters()),s+=r.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===n?"actpass":i||"active"),s+="a=mid:"+e.mid+"\r\n",e.rtpSender&&e.rtpReceiver?s+="a=sendrecv\r\n":e.rtpSender?s+="a=sendonly\r\n":e.rtpReceiver?s+="a=recvonly\r\n":s+="a=inactive\r\n",e.rtpSender){var a=e.rtpSender._initialTrackId||e.rtpSender.track.id;e.rtpSender._initialTrackId=a;var c="msid:"+(o?o.id:"-")+" "+a+"\r\n";s+="a="+c,s+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+c,e.sendEncodingParameters[0].rtx&&(s+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+c,s+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return s+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+r.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(s+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+r.localCName+"\r\n"),s}function i(e,t){var n={codecs:[],headerExtensions:[],fecMechanisms:[]},r=function(e,t){e=parseInt(e,10);for(var n=0;n<t.length;n++)if(t[n].payloadType===e||t[n].preferredPayloadType===e)return t[n]},o=function(e,t,n,o){var i=r(e.parameters.apt,n),s=r(t.parameters.apt,o);return i&&s&&i.name.toLowerCase()===s.name.toLowerCase()};return e.codecs.forEach((function(r){for(var i=0;i<t.codecs.length;i++){var s=t.codecs[i];if(r.name.toLowerCase()===s.name.toLowerCase()&&r.clockRate===s.clockRate){if("rtx"===r.name.toLowerCase()&&r.parameters&&s.parameters.apt&&!o(r,s,e.codecs,t.codecs))continue;(s=JSON.parse(JSON.stringify(s))).numChannels=Math.min(r.numChannels,s.numChannels),n.codecs.push(s),s.rtcpFeedback=s.rtcpFeedback.filter((function(e){for(var t=0;t<r.rtcpFeedback.length;t++)if(r.rtcpFeedback[t].type===e.type&&r.rtcpFeedback[t].parameter===e.parameter)return!0;return!1}));break}}})),e.headerExtensions.forEach((function(e){for(var r=0;r<t.headerExtensions.length;r++){var o=t.headerExtensions[r];if(e.uri===o.uri){n.headerExtensions.push(o);break}}})),n}function s(e,t,n){return-1!=={offer:{setLocalDescription:["stable","have-local-offer"],setRemoteDescription:["stable","have-remote-offer"]},answer:{setLocalDescription:["have-remote-offer","have-local-pranswer"],setRemoteDescription:["have-local-offer","have-remote-pranswer"]}}[t][e].indexOf(n)}function a(e,t){var n=e.getRemoteCandidates().find((function(e){return t.foundation===e.foundation&&t.ip===e.ip&&t.port===e.port&&t.priority===e.priority&&t.protocol===e.protocol&&t.type===e.type}));return n||e.addRemoteCandidate(t),!n}function c(e,t){var n=new Error(t);return n.name=e,n.code={NotSupportedError:9,InvalidStateError:11,InvalidAccessError:15,TypeError:void 0,OperationError:void 0}[e],n}t.exports=function(e,t){function n(t,n){n.addTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("addtrack",{track:t}))}function u(t,n,r,o){var i=new Event("track");i.track=n,i.receiver=r,i.transceiver={receiver:r},i.streams=o,e.setTimeout((function(){t._dispatchEvent("track",i)}))}var l=function(n){var o=this,i=document.createDocumentFragment();if(["addEventListener","removeEventListener","dispatchEvent"].forEach((function(e){o[e]=i[e].bind(i)})),this.canTrickleIceCandidates=null,this.needNegotiation=!1,this.localStreams=[],this.remoteStreams=[],this._localDescription=null,this._remoteDescription=null,this.signalingState="stable",this.iceConnectionState="new",this.connectionState="new",this.iceGatheringState="new",n=JSON.parse(JSON.stringify(n||{})),this.usingBundle="max-bundle"===n.bundlePolicy,"negotiate"===n.rtcpMuxPolicy)throw c("NotSupportedError","rtcpMuxPolicy 'negotiate' is not supported");switch(n.rtcpMuxPolicy||(n.rtcpMuxPolicy="require"),n.iceTransportPolicy){case"all":case"relay":break;default:n.iceTransportPolicy="all"}switch(n.bundlePolicy){case"balanced":case"max-compat":case"max-bundle":break;default:n.bundlePolicy="balanced"}if(n.iceServers=function(e,t){var n=!1;return(e=JSON.parse(JSON.stringify(e))).filter((function(e){if(e&&(e.urls||e.url)){var r=e.urls||e.url;e.url&&!e.urls&&console.warn("RTCIceServer.url is deprecated! Use urls instead.");var o="string"==typeof r;return o&&(r=[r]),r=r.filter((function(e){return 0!==e.indexOf("turn:")||-1===e.indexOf("transport=udp")||-1!==e.indexOf("turn:[")||n?0===e.indexOf("stun:")&&t>=14393&&-1===e.indexOf("?transport=udp"):(n=!0,!0)})),delete e.url,e.urls=o?r[0]:r,!!r.length}}))}(n.iceServers||[],t),this._iceGatherers=[],n.iceCandidatePoolSize)for(var s=n.iceCandidatePoolSize;s>0;s--)this._iceGatherers.push(new e.RTCIceGatherer({iceServers:n.iceServers,gatherPolicy:n.iceTransportPolicy}));else n.iceCandidatePoolSize=0;this._config=n,this.transceivers=[],this._sdpSessionId=r.generateSessionId(),this._sdpSessionVersion=0,this._dtlsRole=void 0,this._isClosed=!1};Object.defineProperty(l.prototype,"localDescription",{configurable:!0,get:function(){return this._localDescription}}),Object.defineProperty(l.prototype,"remoteDescription",{configurable:!0,get:function(){return this._remoteDescription}}),l.prototype.onicecandidate=null,l.prototype.onaddstream=null,l.prototype.ontrack=null,l.prototype.onremovestream=null,l.prototype.onsignalingstatechange=null,l.prototype.oniceconnectionstatechange=null,l.prototype.onconnectionstatechange=null,l.prototype.onicegatheringstatechange=null,l.prototype.onnegotiationneeded=null,l.prototype.ondatachannel=null,l.prototype._dispatchEvent=function(e,t){this._isClosed||(this.dispatchEvent(t),"function"==typeof this["on"+e]&&this["on"+e](t))},l.prototype._emitGatheringStateChange=function(){var e=new Event("icegatheringstatechange");this._dispatchEvent("icegatheringstatechange",e)},l.prototype.getConfiguration=function(){return this._config},l.prototype.getLocalStreams=function(){return this.localStreams},l.prototype.getRemoteStreams=function(){return this.remoteStreams},l.prototype._createTransceiver=function(e,t){var n=this.transceivers.length>0,r={track:null,iceGatherer:null,iceTransport:null,dtlsTransport:null,localCapabilities:null,remoteCapabilities:null,rtpSender:null,rtpReceiver:null,kind:e,mid:null,sendEncodingParameters:null,recvEncodingParameters:null,stream:null,associatedRemoteMediaStreams:[],wantReceive:!0};if(this.usingBundle&&n)r.iceTransport=this.transceivers[0].iceTransport,r.dtlsTransport=this.transceivers[0].dtlsTransport;else{var o=this._createIceAndDtlsTransports();r.iceTransport=o.iceTransport,r.dtlsTransport=o.dtlsTransport}return t||this.transceivers.push(r),r},l.prototype.addTrack=function(t,n){if(this._isClosed)throw c("InvalidStateError","Attempted to call addTrack on a closed peerconnection.");var r;if(this.transceivers.find((function(e){return e.track===t})))throw c("InvalidAccessError","Track already exists.");for(var o=0;o<this.transceivers.length;o++)this.transceivers[o].track||this.transceivers[o].kind!==t.kind||(r=this.transceivers[o]);return r||(r=this._createTransceiver(t.kind)),this._maybeFireNegotiationNeeded(),-1===this.localStreams.indexOf(n)&&this.localStreams.push(n),r.track=t,r.stream=n,r.rtpSender=new e.RTCRtpSender(t,r.dtlsTransport),r.rtpSender},l.prototype.addStream=function(e){var n=this;if(t>=15025)e.getTracks().forEach((function(t){n.addTrack(t,e)}));else{var r=e.clone();e.getTracks().forEach((function(e,t){var n=r.getTracks()[t];e.addEventListener("enabled",(function(e){n.enabled=e.enabled}))})),r.getTracks().forEach((function(e){n.addTrack(e,r)}))}},l.prototype.removeTrack=function(t){if(this._isClosed)throw c("InvalidStateError","Attempted to call removeTrack on a closed peerconnection.");if(!(t instanceof e.RTCRtpSender))throw new TypeError("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.");var n=this.transceivers.find((function(e){return e.rtpSender===t}));if(!n)throw c("InvalidAccessError","Sender was not created by this connection.");var r=n.stream;n.rtpSender.stop(),n.rtpSender=null,n.track=null,n.stream=null,-1===this.transceivers.map((function(e){return e.stream})).indexOf(r)&&this.localStreams.indexOf(r)>-1&&this.localStreams.splice(this.localStreams.indexOf(r),1),this._maybeFireNegotiationNeeded()},l.prototype.removeStream=function(e){var t=this;e.getTracks().forEach((function(e){var n=t.getSenders().find((function(t){return t.track===e}));n&&t.removeTrack(n)}))},l.prototype.getSenders=function(){return this.transceivers.filter((function(e){return!!e.rtpSender})).map((function(e){return e.rtpSender}))},l.prototype.getReceivers=function(){return this.transceivers.filter((function(e){return!!e.rtpReceiver})).map((function(e){return e.rtpReceiver}))},l.prototype._createIceGatherer=function(t,n){var r=this;if(n&&t>0)return this.transceivers[0].iceGatherer;if(this._iceGatherers.length)return this._iceGatherers.shift();var o=new e.RTCIceGatherer({iceServers:this._config.iceServers,gatherPolicy:this._config.iceTransportPolicy});return Object.defineProperty(o,"state",{value:"new",writable:!0}),this.transceivers[t].bufferedCandidateEvents=[],this.transceivers[t].bufferCandidates=function(e){var n=!e.candidate||0===Object.keys(e.candidate).length;o.state=n?"completed":"gathering",null!==r.transceivers[t].bufferedCandidateEvents&&r.transceivers[t].bufferedCandidateEvents.push(e)},o.addEventListener("localcandidate",this.transceivers[t].bufferCandidates),o},l.prototype._gather=function(t,n){var o=this,i=this.transceivers[n].iceGatherer;if(!i.onlocalcandidate){var s=this.transceivers[n].bufferedCandidateEvents;this.transceivers[n].bufferedCandidateEvents=null,i.removeEventListener("localcandidate",this.transceivers[n].bufferCandidates),i.onlocalcandidate=function(e){if(!(o.usingBundle&&n>0)){var s=new Event("icecandidate");s.candidate={sdpMid:t,sdpMLineIndex:n};var a=e.candidate,c=!a||0===Object.keys(a).length;if(c)"new"!==i.state&&"gathering"!==i.state||(i.state="completed");else{"new"===i.state&&(i.state="gathering"),a.component=1,a.ufrag=i.getLocalParameters().usernameFragment;var u=r.writeCandidate(a);s.candidate=Object.assign(s.candidate,r.parseCandidate(u)),s.candidate.candidate=u,s.candidate.toJSON=function(){return{candidate:s.candidate.candidate,sdpMid:s.candidate.sdpMid,sdpMLineIndex:s.candidate.sdpMLineIndex,usernameFragment:s.candidate.usernameFragment}}}var l=r.getMediaSections(o._localDescription.sdp);l[s.candidate.sdpMLineIndex]+=c?"a=end-of-candidates\r\n":"a="+s.candidate.candidate+"\r\n",o._localDescription.sdp=r.getDescription(o._localDescription.sdp)+l.join("");var d=o.transceivers.every((function(e){return e.iceGatherer&&"completed"===e.iceGatherer.state}));"gathering"!==o.iceGatheringState&&(o.iceGatheringState="gathering",o._emitGatheringStateChange()),c||o._dispatchEvent("icecandidate",s),d&&(o._dispatchEvent("icecandidate",new Event("icecandidate")),o.iceGatheringState="complete",o._emitGatheringStateChange())}},e.setTimeout((function(){s.forEach((function(e){i.onlocalcandidate(e)}))}),0)}},l.prototype._createIceAndDtlsTransports=function(){var t=this,n=new e.RTCIceTransport(null);n.onicestatechange=function(){t._updateIceConnectionState(),t._updateConnectionState()};var r=new e.RTCDtlsTransport(n);return r.ondtlsstatechange=function(){t._updateConnectionState()},r.onerror=function(){Object.defineProperty(r,"state",{value:"failed",writable:!0}),t._updateConnectionState()},{iceTransport:n,dtlsTransport:r}},l.prototype._disposeIceAndDtlsTransports=function(e){var t=this.transceivers[e].iceGatherer;t&&(delete t.onlocalcandidate,delete this.transceivers[e].iceGatherer);var n=this.transceivers[e].iceTransport;n&&(delete n.onicestatechange,delete this.transceivers[e].iceTransport);var r=this.transceivers[e].dtlsTransport;r&&(delete r.ondtlsstatechange,delete r.onerror,delete this.transceivers[e].dtlsTransport)},l.prototype._transceive=function(e,n,o){var s=i(e.localCapabilities,e.remoteCapabilities);n&&e.rtpSender&&(s.encodings=e.sendEncodingParameters,s.rtcp={cname:r.localCName,compound:e.rtcpParameters.compound},e.recvEncodingParameters.length&&(s.rtcp.ssrc=e.recvEncodingParameters[0].ssrc),e.rtpSender.send(s)),o&&e.rtpReceiver&&s.codecs.length>0&&("video"===e.kind&&e.recvEncodingParameters&&t<15019&&e.recvEncodingParameters.forEach((function(e){delete e.rtx})),e.recvEncodingParameters.length?s.encodings=e.recvEncodingParameters:s.encodings=[{}],s.rtcp={compound:e.rtcpParameters.compound},e.rtcpParameters.cname&&(s.rtcp.cname=e.rtcpParameters.cname),e.sendEncodingParameters.length&&(s.rtcp.ssrc=e.sendEncodingParameters[0].ssrc),e.rtpReceiver.receive(s))},l.prototype.setLocalDescription=function(e){var t,n,o=this;if(-1===["offer","answer"].indexOf(e.type))return Promise.reject(c("TypeError",'Unsupported type "'+e.type+'"'));if(!s("setLocalDescription",e.type,o.signalingState)||o._isClosed)return Promise.reject(c("InvalidStateError","Can not set local "+e.type+" in state "+o.signalingState));if("offer"===e.type)t=r.splitSections(e.sdp),n=t.shift(),t.forEach((function(e,t){var n=r.parseRtpParameters(e);o.transceivers[t].localCapabilities=n})),o.transceivers.forEach((function(e,t){o._gather(e.mid,t)}));else if("answer"===e.type){t=r.splitSections(o._remoteDescription.sdp),n=t.shift();var a=r.matchPrefix(n,"a=ice-lite").length>0;t.forEach((function(e,t){var s=o.transceivers[t],c=s.iceGatherer,u=s.iceTransport,l=s.dtlsTransport,d=s.localCapabilities,f=s.remoteCapabilities;if(!(r.isRejected(e)&&0===r.matchPrefix(e,"a=bundle-only").length||s.rejected)){var p=r.getIceParameters(e,n),g=r.getDtlsParameters(e,n);a&&(g.role="server"),o.usingBundle&&0!==t||(o._gather(s.mid,t),"new"===u.state&&u.start(c,p,a?"controlling":"controlled"),"new"===l.state&&l.start(g));var h=i(d,f);o._transceive(s,h.codecs.length>0,!1)}}))}return o._localDescription={type:e.type,sdp:e.sdp},"offer"===e.type?o._updateSignalingState("have-local-offer"):o._updateSignalingState("stable"),Promise.resolve()},l.prototype.setRemoteDescription=function(o){var l=this;if(-1===["offer","answer"].indexOf(o.type))return Promise.reject(c("TypeError",'Unsupported type "'+o.type+'"'));if(!s("setRemoteDescription",o.type,l.signalingState)||l._isClosed)return Promise.reject(c("InvalidStateError","Can not set remote "+o.type+" in state "+l.signalingState));var d={};l.remoteStreams.forEach((function(e){d[e.id]=e}));var f=[],p=r.splitSections(o.sdp),g=p.shift(),h=r.matchPrefix(g,"a=ice-lite").length>0,m=r.matchPrefix(g,"a=group:BUNDLE ").length>0;l.usingBundle=m;var v=r.matchPrefix(g,"a=ice-options:")[0];return l.canTrickleIceCandidates=!!v&&v.substr(14).split(" ").indexOf("trickle")>=0,p.forEach((function(s,c){var u=r.splitLines(s),p=r.getKind(s),v=r.isRejected(s)&&0===r.matchPrefix(s,"a=bundle-only").length,y=u[0].substr(2).split(" ")[2],C=r.getDirection(s,g),R=r.parseMsid(s),T=r.getMid(s)||r.generateIdentifier();if(v||"application"===p&&("DTLS/SCTP"===y||"UDP/DTLS/SCTP"===y))l.transceivers[c]={mid:T,kind:p,protocol:y,rejected:!0};else{var I,S,E,M,_,b,O,N,A;!v&&l.transceivers[c]&&l.transceivers[c].rejected&&(l.transceivers[c]=l._createTransceiver(p,!0));var w,P,L=r.parseRtpParameters(s);v||(w=r.getIceParameters(s,g),(P=r.getDtlsParameters(s,g)).role="client"),O=r.parseRtpEncodingParameters(s);var U=r.parseRtcpParameters(s),k=r.matchPrefix(s,"a=end-of-candidates",g).length>0,D=r.matchPrefix(s,"a=candidate:").map((function(e){return r.parseCandidate(e)})).filter((function(e){return 1===e.component}));if(("offer"===o.type||"answer"===o.type)&&!v&&m&&c>0&&l.transceivers[c]&&(l._disposeIceAndDtlsTransports(c),l.transceivers[c].iceGatherer=l.transceivers[0].iceGatherer,l.transceivers[c].iceTransport=l.transceivers[0].iceTransport,l.transceivers[c].dtlsTransport=l.transceivers[0].dtlsTransport,l.transceivers[c].rtpSender&&l.transceivers[c].rtpSender.setTransport(l.transceivers[0].dtlsTransport),l.transceivers[c].rtpReceiver&&l.transceivers[c].rtpReceiver.setTransport(l.transceivers[0].dtlsTransport)),"offer"!==o.type||v)"answer"!==o.type||v||(S=(I=l.transceivers[c]).iceGatherer,E=I.iceTransport,M=I.dtlsTransport,_=I.rtpReceiver,b=I.sendEncodingParameters,N=I.localCapabilities,l.transceivers[c].recvEncodingParameters=O,l.transceivers[c].remoteCapabilities=L,l.transceivers[c].rtcpParameters=U,D.length&&"new"===E.state&&(!h&&!k||m&&0!==c?D.forEach((function(e){a(I.iceTransport,e)})):E.setRemoteCandidates(D)),m&&0!==c||("new"===E.state&&E.start(S,w,"controlling"),"new"===M.state&&M.start(P)),!i(I.localCapabilities,I.remoteCapabilities).codecs.filter((function(e){return"rtx"===e.name.toLowerCase()})).length&&I.sendEncodingParameters[0].rtx&&delete I.sendEncodingParameters[0].rtx,l._transceive(I,"sendrecv"===C||"recvonly"===C,"sendrecv"===C||"sendonly"===C),!_||"sendrecv"!==C&&"sendonly"!==C?delete I.rtpReceiver:(A=_.track,R?(d[R.stream]||(d[R.stream]=new e.MediaStream),n(A,d[R.stream]),f.push([A,_,d[R.stream]])):(d.default||(d.default=new e.MediaStream),n(A,d.default),f.push([A,_,d.default]))));else{(I=l.transceivers[c]||l._createTransceiver(p)).mid=T,I.iceGatherer||(I.iceGatherer=l._createIceGatherer(c,m)),D.length&&"new"===I.iceTransport.state&&(!k||m&&0!==c?D.forEach((function(e){a(I.iceTransport,e)})):I.iceTransport.setRemoteCandidates(D)),N=e.RTCRtpReceiver.getCapabilities(p),t<15019&&(N.codecs=N.codecs.filter((function(e){return"rtx"!==e.name}))),b=I.sendEncodingParameters||[{ssrc:1001*(2*c+2)}];var x,B=!1;"sendrecv"===C||"sendonly"===C?(B=!I.rtpReceiver,_=I.rtpReceiver||new e.RTCRtpReceiver(I.dtlsTransport,p),B&&(A=_.track,R&&"-"===R.stream||(R?(d[R.stream]||(d[R.stream]=new e.MediaStream,Object.defineProperty(d[R.stream],"id",{get:function(){return R.stream}})),Object.defineProperty(A,"id",{get:function(){return R.track}}),x=d[R.stream]):(d.default||(d.default=new e.MediaStream),x=d.default)),x&&(n(A,x),I.associatedRemoteMediaStreams.push(x)),f.push([A,_,x]))):I.rtpReceiver&&I.rtpReceiver.track&&(I.associatedRemoteMediaStreams.forEach((function(t){var n=t.getTracks().find((function(e){return e.id===I.rtpReceiver.track.id}));n&&function(t,n){n.removeTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("removetrack",{track:t}))}(n,t)})),I.associatedRemoteMediaStreams=[]),I.localCapabilities=N,I.remoteCapabilities=L,I.rtpReceiver=_,I.rtcpParameters=U,I.sendEncodingParameters=b,I.recvEncodingParameters=O,l._transceive(l.transceivers[c],!1,B)}}})),void 0===l._dtlsRole&&(l._dtlsRole="offer"===o.type?"active":"passive"),l._remoteDescription={type:o.type,sdp:o.sdp},"offer"===o.type?l._updateSignalingState("have-remote-offer"):l._updateSignalingState("stable"),Object.keys(d).forEach((function(t){var n=d[t];if(n.getTracks().length){if(-1===l.remoteStreams.indexOf(n)){l.remoteStreams.push(n);var r=new Event("addstream");r.stream=n,e.setTimeout((function(){l._dispatchEvent("addstream",r)}))}f.forEach((function(e){var t=e[0],r=e[1];n.id===e[2].id&&u(l,t,r,[n])}))}})),f.forEach((function(e){e[2]||u(l,e[0],e[1],[])})),e.setTimeout((function(){l&&l.transceivers&&l.transceivers.forEach((function(e){e.iceTransport&&"new"===e.iceTransport.state&&e.iceTransport.getRemoteCandidates().length>0&&(console.warn("Timeout for addRemoteCandidate. Consider sending an end-of-candidates notification"),e.iceTransport.addRemoteCandidate({}))}))}),4e3),Promise.resolve()},l.prototype.close=function(){this.transceivers.forEach((function(e){e.iceTransport&&e.iceTransport.stop(),e.dtlsTransport&&e.dtlsTransport.stop(),e.rtpSender&&e.rtpSender.stop(),e.rtpReceiver&&e.rtpReceiver.stop()})),this._isClosed=!0,this._updateSignalingState("closed")},l.prototype._updateSignalingState=function(e){this.signalingState=e;var t=new Event("signalingstatechange");this._dispatchEvent("signalingstatechange",t)},l.prototype._maybeFireNegotiationNeeded=function(){var t=this;"stable"===this.signalingState&&!0!==this.needNegotiation&&(this.needNegotiation=!0,e.setTimeout((function(){if(t.needNegotiation){t.needNegotiation=!1;var e=new Event("negotiationneeded");t._dispatchEvent("negotiationneeded",e)}}),0))},l.prototype._updateIceConnectionState=function(){var e,t={new:0,closed:0,checking:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach((function(e){e.iceTransport&&!e.rejected&&t[e.iceTransport.state]++})),e="new",t.failed>0?e="failed":t.checking>0?e="checking":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0?e="connected":t.completed>0&&(e="completed"),e!==this.iceConnectionState){this.iceConnectionState=e;var n=new Event("iceconnectionstatechange");this._dispatchEvent("iceconnectionstatechange",n)}},l.prototype._updateConnectionState=function(){var e,t={new:0,closed:0,connecting:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach((function(e){e.iceTransport&&e.dtlsTransport&&!e.rejected&&(t[e.iceTransport.state]++,t[e.dtlsTransport.state]++)})),t.connected+=t.completed,e="new",t.failed>0?e="failed":t.connecting>0?e="connecting":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0&&(e="connected"),e!==this.connectionState){this.connectionState=e;var n=new Event("connectionstatechange");this._dispatchEvent("connectionstatechange",n)}},l.prototype.createOffer=function(){var n=this;if(n._isClosed)return Promise.reject(c("InvalidStateError","Can not call createOffer after close"));var i=n.transceivers.filter((function(e){return"audio"===e.kind})).length,s=n.transceivers.filter((function(e){return"video"===e.kind})).length,a=arguments[0];if(a){if(a.mandatory||a.optional)throw new TypeError("Legacy mandatory/optional constraints not supported.");void 0!==a.offerToReceiveAudio&&(i=!0===a.offerToReceiveAudio?1:!1===a.offerToReceiveAudio?0:a.offerToReceiveAudio),void 0!==a.offerToReceiveVideo&&(s=!0===a.offerToReceiveVideo?1:!1===a.offerToReceiveVideo?0:a.offerToReceiveVideo)}for(n.transceivers.forEach((function(e){"audio"===e.kind?--i<0&&(e.wantReceive=!1):"video"===e.kind&&--s<0&&(e.wantReceive=!1)}));i>0||s>0;)i>0&&(n._createTransceiver("audio"),i--),s>0&&(n._createTransceiver("video"),s--);var u=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.transceivers.forEach((function(o,i){var s=o.track,a=o.kind,c=o.mid||r.generateIdentifier();o.mid=c,o.iceGatherer||(o.iceGatherer=n._createIceGatherer(i,n.usingBundle));var u=e.RTCRtpSender.getCapabilities(a);t<15019&&(u.codecs=u.codecs.filter((function(e){return"rtx"!==e.name}))),u.codecs.forEach((function(e){"H264"===e.name&&void 0===e.parameters["level-asymmetry-allowed"]&&(e.parameters["level-asymmetry-allowed"]="1"),o.remoteCapabilities&&o.remoteCapabilities.codecs&&o.remoteCapabilities.codecs.forEach((function(t){e.name.toLowerCase()===t.name.toLowerCase()&&e.clockRate===t.clockRate&&(e.preferredPayloadType=t.payloadType)}))})),u.headerExtensions.forEach((function(e){(o.remoteCapabilities&&o.remoteCapabilities.headerExtensions||[]).forEach((function(t){e.uri===t.uri&&(e.id=t.id)}))}));var l=o.sendEncodingParameters||[{ssrc:1001*(2*i+1)}];s&&t>=15019&&"video"===a&&!l[0].rtx&&(l[0].rtx={ssrc:l[0].ssrc+1}),o.wantReceive&&(o.rtpReceiver=new e.RTCRtpReceiver(o.dtlsTransport,a)),o.localCapabilities=u,o.sendEncodingParameters=l})),"max-compat"!==n._config.bundlePolicy&&(u+="a=group:BUNDLE "+n.transceivers.map((function(e){return e.mid})).join(" ")+"\r\n"),u+="a=ice-options:trickle\r\n",n.transceivers.forEach((function(e,t){u+=o(e,e.localCapabilities,"offer",e.stream,n._dtlsRole),u+="a=rtcp-rsize\r\n",!e.iceGatherer||"new"===n.iceGatheringState||0!==t&&n.usingBundle||(e.iceGatherer.getLocalCandidates().forEach((function(e){e.component=1,u+="a="+r.writeCandidate(e)+"\r\n"})),"completed"===e.iceGatherer.state&&(u+="a=end-of-candidates\r\n"))}));var l=new e.RTCSessionDescription({type:"offer",sdp:u});return Promise.resolve(l)},l.prototype.createAnswer=function(){var n=this;if(n._isClosed)return Promise.reject(c("InvalidStateError","Can not call createAnswer after close"));if("have-remote-offer"!==n.signalingState&&"have-local-pranswer"!==n.signalingState)return Promise.reject(c("InvalidStateError","Can not call createAnswer in signalingState "+n.signalingState));var s=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.usingBundle&&(s+="a=group:BUNDLE "+n.transceivers.map((function(e){return e.mid})).join(" ")+"\r\n"),s+="a=ice-options:trickle\r\n";var a=r.getMediaSections(n._remoteDescription.sdp).length;n.transceivers.forEach((function(e,r){if(!(r+1>a)){if(e.rejected)return"application"===e.kind?"DTLS/SCTP"===e.protocol?s+="m=application 0 DTLS/SCTP 5000\r\n":s+="m=application 0 "+e.protocol+" webrtc-datachannel\r\n":"audio"===e.kind?s+="m=audio 0 UDP/TLS/RTP/SAVPF 0\r\na=rtpmap:0 PCMU/8000\r\n":"video"===e.kind&&(s+="m=video 0 UDP/TLS/RTP/SAVPF 120\r\na=rtpmap:120 VP8/90000\r\n"),void(s+="c=IN IP4 0.0.0.0\r\na=inactive\r\na=mid:"+e.mid+"\r\n");var c;e.stream&&("audio"===e.kind?c=e.stream.getAudioTracks()[0]:"video"===e.kind&&(c=e.stream.getVideoTracks()[0]),c&&t>=15019&&"video"===e.kind&&!e.sendEncodingParameters[0].rtx&&(e.sendEncodingParameters[0].rtx={ssrc:e.sendEncodingParameters[0].ssrc+1}));var u=i(e.localCapabilities,e.remoteCapabilities);!u.codecs.filter((function(e){return"rtx"===e.name.toLowerCase()})).length&&e.sendEncodingParameters[0].rtx&&delete e.sendEncodingParameters[0].rtx,s+=o(e,u,"answer",e.stream,n._dtlsRole),e.rtcpParameters&&e.rtcpParameters.reducedSize&&(s+="a=rtcp-rsize\r\n")}}));var u=new e.RTCSessionDescription({type:"answer",sdp:s});return Promise.resolve(u)},l.prototype.addIceCandidate=function(e){var t,n=this;return e&&void 0===e.sdpMLineIndex&&!e.sdpMid?Promise.reject(new TypeError("sdpMLineIndex or sdpMid required")):new Promise((function(o,i){if(!n._remoteDescription)return i(c("InvalidStateError","Can not add ICE candidate without a remote description"));if(e&&""!==e.candidate){var s=e.sdpMLineIndex;if(e.sdpMid)for(var u=0;u<n.transceivers.length;u++)if(n.transceivers[u].mid===e.sdpMid){s=u;break}var l=n.transceivers[s];if(!l)return i(c("OperationError","Can not add ICE candidate"));if(l.rejected)return o();var d=Object.keys(e.candidate).length>0?r.parseCandidate(e.candidate):{};if("tcp"===d.protocol&&(0===d.port||9===d.port))return o();if(d.component&&1!==d.component)return o();if((0===s||s>0&&l.iceTransport!==n.transceivers[0].iceTransport)&&!a(l.iceTransport,d))return i(c("OperationError","Can not add ICE candidate"));var f=e.candidate.trim();0===f.indexOf("a=")&&(f=f.substr(2)),(t=r.getMediaSections(n._remoteDescription.sdp))[s]+="a="+(d.type?f:"end-of-candidates")+"\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join("")}else for(var p=0;p<n.transceivers.length&&(n.transceivers[p].rejected||(n.transceivers[p].iceTransport.addRemoteCandidate({}),(t=r.getMediaSections(n._remoteDescription.sdp))[p]+="a=end-of-candidates\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join(""),!n.usingBundle));p++);o()}))},l.prototype.getStats=function(t){if(t&&t instanceof e.MediaStreamTrack){var n=null;if(this.transceivers.forEach((function(e){e.rtpSender&&e.rtpSender.track===t?n=e.rtpSender:e.rtpReceiver&&e.rtpReceiver.track===t&&(n=e.rtpReceiver)})),!n)throw c("InvalidAccessError","Invalid selector.");return n.getStats()}var r=[];return this.transceivers.forEach((function(e){["rtpSender","rtpReceiver","iceGatherer","iceTransport","dtlsTransport"].forEach((function(t){e[t]&&r.push(e[t].getStats())}))})),Promise.all(r).then((function(e){var t=new Map;return e.forEach((function(e){e.forEach((function(e){t.set(e.id,e)}))})),t}))},["RTCRtpSender","RTCRtpReceiver","RTCIceGatherer","RTCIceTransport","RTCDtlsTransport"].forEach((function(t){var n=e[t];if(n&&n.prototype&&n.prototype.getStats){var r=n.prototype.getStats;n.prototype.getStats=function(){return r.apply(this).then((function(e){var t=new Map;return Object.keys(e).forEach((function(n){var r;e[n].type={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[(r=e[n]).type]||r.type,t.set(n,e[n])})),t}))}}}));var d=["createOffer","createAnswer"];return d.forEach((function(e){var t=l.prototype[e];l.prototype[e]=function(){var e=arguments;return"function"==typeof e[0]||"function"==typeof e[1]?t.apply(this,[arguments[2]]).then((function(t){"function"==typeof e[0]&&e[0].apply(null,[t])}),(function(t){"function"==typeof e[1]&&e[1].apply(null,[t])})):t.apply(this,arguments)}})),(d=["setLocalDescription","setRemoteDescription","addIceCandidate"]).forEach((function(e){var t=l.prototype[e];l.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]||"function"==typeof e[2]?t.apply(this,arguments).then((function(){"function"==typeof e[1]&&e[1].apply(null)}),(function(t){"function"==typeof e[2]&&e[2].apply(null,[t])})):t.apply(this,arguments)}})),["getStats"].forEach((function(e){var t=l.prototype[e];l.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]?t.apply(this,arguments).then((function(){"function"==typeof e[1]&&e[1].apply(null)})):t.apply(this,arguments)}})),l}},{sdp:17}],17:[function(e,t,n){var o={generateIdentifier:function(){return Math.random().toString(36).substr(2,10)}};o.localCName=o.generateIdentifier(),o.splitLines=function(e){return e.trim().split("\n").map((function(e){return e.trim()}))},o.splitSections=function(e){return e.split("\nm=").map((function(e,t){return(t>0?"m="+e:e).trim()+"\r\n"}))},o.getDescription=function(e){var t=o.splitSections(e);return t&&t[0]},o.getMediaSections=function(e){var t=o.splitSections(e);return t.shift(),t},o.matchPrefix=function(e,t){return o.splitLines(e).filter((function(e){return 0===e.indexOf(t)}))},o.parseCandidate=function(e){for(var t,n={foundation:(t=0===e.indexOf("a=candidate:")?e.substring(12).split(" "):e.substring(10).split(" "))[0],component:parseInt(t[1],10),protocol:t[2].toLowerCase(),priority:parseInt(t[3],10),ip:t[4],address:t[4],port:parseInt(t[5],10),type:t[7]},r=8;r<t.length;r+=2)switch(t[r]){case"raddr":n.relatedAddress=t[r+1];break;case"rport":n.relatedPort=parseInt(t[r+1],10);break;case"tcptype":n.tcpType=t[r+1];break;case"ufrag":n.ufrag=t[r+1],n.usernameFragment=t[r+1];break;default:n[t[r]]=t[r+1]}return n},o.writeCandidate=function(e){var t=[];t.push(e.foundation),t.push(e.component),t.push(e.protocol.toUpperCase()),t.push(e.priority),t.push(e.address||e.ip),t.push(e.port);var n=e.type;return t.push("typ"),t.push(n),"host"!==n&&e.relatedAddress&&e.relatedPort&&(t.push("raddr"),t.push(e.relatedAddress),t.push("rport"),t.push(e.relatedPort)),e.tcpType&&"tcp"===e.protocol.toLowerCase()&&(t.push("tcptype"),t.push(e.tcpType)),(e.usernameFragment||e.ufrag)&&(t.push("ufrag"),t.push(e.usernameFragment||e.ufrag)),"candidate:"+t.join(" ")},o.parseIceOptions=function(e){return e.substr(14).split(" ")},o.parseRtpMap=function(e){var t=e.substr(9).split(" "),n={payloadType:parseInt(t.shift(),10)};return t=t[0].split("/"),n.name=t[0],n.clockRate=parseInt(t[1],10),n.channels=3===t.length?parseInt(t[2],10):1,n.numChannels=n.channels,n},o.writeRtpMap=function(e){var t=e.payloadType;void 0!==e.preferredPayloadType&&(t=e.preferredPayloadType);var n=e.channels||e.numChannels||1;return"a=rtpmap:"+t+" "+e.name+"/"+e.clockRate+(1!==n?"/"+n:"")+"\r\n"},o.parseExtmap=function(e){var t=e.substr(9).split(" ");return{id:parseInt(t[0],10),direction:t[0].indexOf("/")>0?t[0].split("/")[1]:"sendrecv",uri:t[1]}},o.writeExtmap=function(e){return"a=extmap:"+(e.id||e.preferredId)+(e.direction&&"sendrecv"!==e.direction?"/"+e.direction:"")+" "+e.uri+"\r\n"},o.parseFmtp=function(e){for(var t,n={},r=e.substr(e.indexOf(" ")+1).split(";"),o=0;o<r.length;o++)n[(t=r[o].trim().split("="))[0].trim()]=t[1];return n},o.writeFmtp=function(e){var t="",n=e.payloadType;if(void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.parameters&&Object.keys(e.parameters).length){var r=[];Object.keys(e.parameters).forEach((function(t){e.parameters[t]?r.push(t+"="+e.parameters[t]):r.push(t)})),t+="a=fmtp:"+n+" "+r.join(";")+"\r\n"}return t},o.parseRtcpFb=function(e){var t=e.substr(e.indexOf(" ")+1).split(" ");return{type:t.shift(),parameter:t.join(" ")}},o.writeRtcpFb=function(e){var t="",n=e.payloadType;return void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.rtcpFeedback&&e.rtcpFeedback.length&&e.rtcpFeedback.forEach((function(e){t+="a=rtcp-fb:"+n+" "+e.type+(e.parameter&&e.parameter.length?" "+e.parameter:"")+"\r\n"})),t},o.parseSsrcMedia=function(e){var t=e.indexOf(" "),n={ssrc:parseInt(e.substr(7,t-7),10)},r=e.indexOf(":",t);return r>-1?(n.attribute=e.substr(t+1,r-t-1),n.value=e.substr(r+1)):n.attribute=e.substr(t+1),n},o.parseSsrcGroup=function(e){var t=e.substr(13).split(" ");return{semantics:t.shift(),ssrcs:t.map((function(e){return parseInt(e,10)}))}},o.getMid=function(e){var t=o.matchPrefix(e,"a=mid:")[0];if(t)return t.substr(6)},o.parseFingerprint=function(e){var t=e.substr(14).split(" ");return{algorithm:t[0].toLowerCase(),value:t[1]}},o.getDtlsParameters=function(e,t){return{role:"auto",fingerprints:o.matchPrefix(e+t,"a=fingerprint:").map(o.parseFingerprint)}},o.writeDtlsParameters=function(e,t){var n="a=setup:"+t+"\r\n";return e.fingerprints.forEach((function(e){n+="a=fingerprint:"+e.algorithm+" "+e.value+"\r\n"})),n},o.getIceParameters=function(e,t){var n=o.splitLines(e);return{usernameFragment:(n=n.concat(o.splitLines(t))).filter((function(e){return 0===e.indexOf("a=ice-ufrag:")}))[0].substr(12),password:n.filter((function(e){return 0===e.indexOf("a=ice-pwd:")}))[0].substr(10)}},o.writeIceParameters=function(e){return"a=ice-ufrag:"+e.usernameFragment+"\r\na=ice-pwd:"+e.password+"\r\n"},o.parseRtpParameters=function(e){for(var t={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]},n=o.splitLines(e)[0].split(" "),r=3;r<n.length;r++){var i=n[r],s=o.matchPrefix(e,"a=rtpmap:"+i+" ")[0];if(s){var a=o.parseRtpMap(s),c=o.matchPrefix(e,"a=fmtp:"+i+" ");switch(a.parameters=c.length?o.parseFmtp(c[0]):{},a.rtcpFeedback=o.matchPrefix(e,"a=rtcp-fb:"+i+" ").map(o.parseRtcpFb),t.codecs.push(a),a.name.toUpperCase()){case"RED":case"ULPFEC":t.fecMechanisms.push(a.name.toUpperCase())}}}return o.matchPrefix(e,"a=extmap:").forEach((function(e){t.headerExtensions.push(o.parseExtmap(e))})),t},o.writeRtpDescription=function(e,t){var n="";n+="m="+e+" ",n+=t.codecs.length>0?"9":"0",n+=" UDP/TLS/RTP/SAVPF ",n+=t.codecs.map((function(e){return void 0!==e.preferredPayloadType?e.preferredPayloadType:e.payloadType})).join(" ")+"\r\n",n+="c=IN IP4 0.0.0.0\r\n",n+="a=rtcp:9 IN IP4 0.0.0.0\r\n",t.codecs.forEach((function(e){n+=o.writeRtpMap(e),n+=o.writeFmtp(e),n+=o.writeRtcpFb(e)}));var r=0;return t.codecs.forEach((function(e){e.maxptime>r&&(r=e.maxptime)})),r>0&&(n+="a=maxptime:"+r+"\r\n"),n+="a=rtcp-mux\r\n",t.headerExtensions&&t.headerExtensions.forEach((function(e){n+=o.writeExtmap(e)})),n},o.parseRtpEncodingParameters=function(e){var t,n=[],r=o.parseRtpParameters(e),i=-1!==r.fecMechanisms.indexOf("RED"),s=-1!==r.fecMechanisms.indexOf("ULPFEC"),a=o.matchPrefix(e,"a=ssrc:").map((function(e){return o.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute})),c=a.length>0&&a[0].ssrc,u=o.matchPrefix(e,"a=ssrc-group:FID").map((function(e){return e.substr(17).split(" ").map((function(e){return parseInt(e,10)}))}));u.length>0&&u[0].length>1&&u[0][0]===c&&(t=u[0][1]),r.codecs.forEach((function(e){if("RTX"===e.name.toUpperCase()&&e.parameters.apt){var r={ssrc:c,codecPayloadType:parseInt(e.parameters.apt,10)};c&&t&&(r.rtx={ssrc:t}),n.push(r),i&&((r=JSON.parse(JSON.stringify(r))).fec={ssrc:c,mechanism:s?"red+ulpfec":"red"},n.push(r))}})),0===n.length&&c&&n.push({ssrc:c});var l=o.matchPrefix(e,"b=");return l.length&&(l=0===l[0].indexOf("b=TIAS:")?parseInt(l[0].substr(7),10):0===l[0].indexOf("b=AS:")?1e3*parseInt(l[0].substr(5),10)*.95-16e3:void 0,n.forEach((function(e){e.maxBitrate=l}))),n},o.parseRtcpParameters=function(e){var t={},n=o.matchPrefix(e,"a=ssrc:").map((function(e){return o.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute}))[0];n&&(t.cname=n.value,t.ssrc=n.ssrc);var r=o.matchPrefix(e,"a=rtcp-rsize");t.reducedSize=r.length>0,t.compound=0===r.length;var i=o.matchPrefix(e,"a=rtcp-mux");return t.mux=i.length>0,t},o.parseMsid=function(e){var t,n=o.matchPrefix(e,"a=msid:");if(1===n.length)return{stream:(t=n[0].substr(7).split(" "))[0],track:t[1]};var r=o.matchPrefix(e,"a=ssrc:").map((function(e){return o.parseSsrcMedia(e)})).filter((function(e){return"msid"===e.attribute}));return r.length>0?{stream:(t=r[0].value.split(" "))[0],track:t[1]}:void 0},o.generateSessionId=function(){return Math.random().toString().substr(2,21)},o.writeSessionBoilerplate=function(e,t,n){var r=void 0!==t?t:2;return"v=0\r\no="+(n||"thisisadapterortc")+" "+(e||o.generateSessionId())+" "+r+" IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n"},o.writeMediaSection=function(e,t,n,r){var i=o.writeRtpDescription(e.kind,t);if(i+=o.writeIceParameters(e.iceGatherer.getLocalParameters()),i+=o.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===n?"actpass":"active"),i+="a=mid:"+e.mid+"\r\n",e.direction?i+="a="+e.direction+"\r\n":e.rtpSender&&e.rtpReceiver?i+="a=sendrecv\r\n":e.rtpSender?i+="a=sendonly\r\n":e.rtpReceiver?i+="a=recvonly\r\n":i+="a=inactive\r\n",e.rtpSender){var s="msid:"+r.id+" "+e.rtpSender.track.id+"\r\n";i+="a="+s,i+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+s,e.sendEncodingParameters[0].rtx&&(i+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+s,i+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return i+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+o.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(i+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+o.localCName+"\r\n"),i},o.getDirection=function(e,t){for(var n=o.splitLines(e),r=0;r<n.length;r++)switch(n[r]){case"a=sendrecv":case"a=sendonly":case"a=recvonly":case"a=inactive":return n[r].substr(2)}return t?o.getDirection(t):"sendrecv"},o.getKind=function(e){return o.splitLines(e)[0].split(" ")[0].substr(2)},o.isRejected=function(e){return"0"===e.split(" ",2)[1]},o.parseMLine=function(e){var t=o.splitLines(e)[0].substr(2).split(" ");return{kind:t[0],port:parseInt(t[1],10),protocol:t[2],fmt:t.slice(3).join(" ")}},o.parseOLine=function(e){var t=o.matchPrefix(e,"o=")[0].substr(2).split(" ");return{username:t[0],sessionId:t[1],sessionVersion:parseInt(t[2],10),netType:t[3],addressType:t[4],address:t[5]}},o.isValidSDP=function(e){if("string"!=typeof e||0===e.length)return!1;for(var t=o.splitLines(e),n=0;n<t.length;n++)if(t[n].length<2||"="!==t[n].charAt(1))return!1;return!0},"object"===(void 0===t?"undefined":r(t))&&(t.exports=o)},{}]},{},[1])(1)}var no=function(){window.adapter=to()};function ro(e){var t=null,n=0,r=N.Cache(),o=N.Cache(),i=function(t){var n=t.googTrackId,i=t.mediaType;if(N.isEqual(i,"audio")){var s=t.audioOutputLevel||t.audioInputLevel;s=function(e){e=e||0;var t=Math.floor(e/1e3);return t>=Ye.length&&(t=0),Ye[t]}(s);var a=o.get(n);if(!N.isEqual(a,s)){var c=r.get(n);N.isObject(c)&&(N.extend(c.stream,{audioLevel:s}),o.set(n,s),e.emit(q,c))}}},s=function(){n&&clearInterval(n)},a=Tr.getInstance();a&&(t=a),e.on(qn,(function(e,n){if(e)throw e;t=n})),e.on(Gn,(function(e){if(e)throw e;s()})),e.on(Bn,(function(){r.clear(),o.clear(),s()})),e.on(Kn,(function(e,t){if(e)throw e;!function(e,t){var n=e.getTracks(),o=t.id,i=t.stream.tag;N.forEach(n,(function(e){var t=e.id;r.set(t,{id:o,stream:{tag:i}})}))}(t.mediaStream,t.user)}));var c=function(e){var r={frequency:1e3};if(N.isObject(e)&&N.extend(r,e),!hn())return n&&s(),n=setInterval((function(){if(!t)return s();t.getStats((function(e){!function(e){N.forEach(e,(function(e){var t=e.type;N.isInclude(t,"ssrc")&&i(e)}))}(e)}))}),r.frequency),N.Defer.resolve()},l=function(){return s(),N.Defer.resolve()};return{dispatch:function(e,t){switch(e){case pe:return c.apply(void 0,u(t));case ge:return l.apply(void 0,u(t))}}}}var oo=function(e){function t(e,n){o(this,t);var r=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));no();var i=r,s=new qr(e),c={room:zr(s,e),stream:Qr(s,e,n),storage:Xr(s),message:$r(s),device:Zr(),report:ro(s)};eo(s,e);var u=e.RongIMLib;N.extend(i,{RongIMLib:u,option:e,destroyed:!1,im:s,RequestHandler:c,rongRTC:n}),N.forEach(he,(function(e){var t=e.name;s.on(t,(function(e,n){i.emit(t,n,e)}))})),s.on(xn,(function(){var t=s.getMSUrl(),n=e.url;if(N.isEmpty(n)||mr(n),N.isEmpty(t)){var r=Re.Inner.ENGINE_ERROR;return i.emit(j,r)}!vr(t)&&hr(t),i.emit(V)})),s.on(Bn,(function(){N.forEach(he,(function(e){var t=e.name;i.off(t)})),i.emit(H)})),s.on(jn,(function(e,t){i.emit(j,t,e)})),s.on(F,(function(e,t){i.emit(F,t,e)})),s.on(q,(function(e,t){i.emit(q,t,e)})),s.on(G,(function(e,t){i.emit(G,t,e)}));var l=function(e,t,n){var r=t.id,o=t.stream,s={id:r,stream:{tag:o.tag,type:function(e){var t=function(t){return N.some(e,(function(e){var n=e.mediaType;return N.isEqual(t,n)}))},n=Te.NODE,r=t(Te.AUDIO),o=t(Te.VIDEO);return r&&(n=Te.AUDIO),o&&(n=Te.VIDEO),o&&r&&(n=Te.AUDIO_AND_VIDEO),n}(o.uris)}};i.emit(e,s,n)};return s.on(L,(function(e,t){l(L,t,e)})),s.on(U,(function(e,t){l(U,t,e)})),s.on(k,(function(e,t){l(k,t,e)})),s.on(D,(function(e,t){l(D,t,e)})),s.on(x,(function(e,t){l(x,t,e)})),s.on(B,(function(e,t){l(B,t,e)})),r}return s(t,e),i(t,[{key:"exec",value:function(e){var t=this.im,n=this.rongRTC,r=vn(n);if(this.isDestroyed())return N.Defer.reject(Re.Inner.INSTANCE_IS_DESTROYED);if(!t.isSupportRTC())return N.Defer.reject(Re.Inner.IM_SDK_VER_NOT_MATCH);var o=e.type,i=e.args,s=e.event,a=[K,fe,ne],c=!N.isInclude(a,s),u=[Z,ee],l=N.isInclude(u,s);if(!t.isIMReady()&&c)return N.Defer.reject(Re.Inner.IM_NOT_CONNECTED);if(c&&!t.isJoined()&&!r)return N.Defer.reject(Re.Inner.RTC_NOT_JOIN_ROOM);if(r&&!l)return N.Defer.reject(Re.Inner.WRONG_AUDIENCE_EVENT);var d=this.RequestHandler;Tn.log(o,{func:s,type:qe,args:i});var f=d[o].dispatch(s,i);return N.isPromise(f)?f.then((function(e){return Tn.log(o,{func:s,type:Ge,result:e}),e}),(function(e){throw Tn.error(o,{func:s,type:Ge,error:e}),e=N.rename(e,{resultCode:"code"})})):f}},{key:"isDestroyed",value:function(){return this.destroyed}},{key:"extendOption",value:function(e){N.extend(this.option,e)}},{key:"destroy",value:function(){N.extend(this,{destroyed:!0}),this.teardown(),this.im.teardown()}}]),t}(bn),io=function(){function e(t){o(this,e),t=t||{};var n=this.getClient(),r={type:Ke.ROOM};N.extend(r,t),N.extend(this,{option:r,client:n})}return i(e,[{key:"set",value:function(e,t,n){var r=un({key:e,value:t},["key","value"]),o=r.isIllegal,i=r.name;if(o){var s=ln(i);return N.Defer.reject(s)}var a=this.client,c=this.option.type;return a.exec({event:ce,type:"storage",args:[c,e,t,n]})}},{key:"get",value:function(e){var t=un({key:e},["key"]),n=t.isIllegal,r=t.name;if(n){var o=ln(r);return N.Defer.reject(o)}var i=this.client,s=this.option.type;return i.exec({event:ue,type:"storage",args:[s,e]})}},{key:"remove",value:function(e,t){var n=un({key:e},["key"]),r=n.isIllegal,o=n.name;if(r){var i=ln(o);return N.Defer.reject(i)}var s=this.client,a=this.option.type;return s.exec({event:le,type:"storage",args:[a,e,t]})}}]),e}(),so=function(){function e(t){o(this,e);var n=this.getClient(),r={received:function(){}};N.extend(r,t),N.extend(this,{client:n,option:r}),N.forEach(ve,(function(e){var t=e,o=t.name,i=t.type;n.on(o,(function(t,n){(e=r[i]||N.noop)(n,t),Tn.log(De,{event:i,message:n})}))}))}return i(e,[{key:"send",value:function(e){var t=un(e,["name","content"]),n=t.isIllegal,r=t.name;if(n){var o=ln(r);return N.Defer.reject(o)}return this.client.exec({event:de,type:"message",args:[e]})}}]),e}(),ao=function(){function e(){o(this,e);var t=this.getClient();N.extend(this,{client:t})}return i(e,[{key:"get",value:function(){return this.client.exec({event:fe,type:"device",args:[]})}}]),e}(),co=function(){function e(t){o(this,e);var n=this.getClient(),r={received:function(){}};N.extend(r,t),N.extend(this,{client:n,option:r}),N.forEach(ye,(function(e){var t=e,o=t.name,i=t.type;n.on(o,(function(t,n){(e=r[i]||N.noop)(n,t)}))}))}return i(e,[{key:"start",value:function(e){return this.client.exec({event:pe,type:"report",args:[e]})}},{key:"stop",value:function(){return this.client.exec({event:ge,type:"report",args:[]})}}]),e}(),uo=function e(t){o(this,e);var n=this.getClient(),r={stats:function(){}};N.extend(r,t),N.extend(this,{client:n,option:r}),N.forEach(Ce,(function(e){var t=e,o=t.name,i=t.type;n.on(o,(function(t,n){(e=r[i]||N.noop)(n,t)}))}))},lo=function(){function e(t){o(this,e);var n={url:"",debug:!1,bitrate:{max:0,min:0,start:0},mode:Qe.RTC,liveRole:Xe.ANCHOR,liveType:ze.AUDIO_AND_VIDEO,setUserId:!0,created:function(){},mounted:function(){},unmounted:function(){},destroyed:function(){},error:function(){}};N.extend(n,t);var r=n.logger,i=n.debug,s=Re.Outer;N.isFunction(r)&&Tn.watch(r,!0),i&&Tn.watch((function(e){N.Log.log(e)})),N.extend(this,{Room:Sn,Stream:_n,Storage:io,StreamType:Te,StreamSize:Ie,StorageType:Ke,Mode:Qe,ROLE:Xe,LiveType:ze,LayoutMode:$e,RenderMode:Ze,Resolution:nn,RongRTCVideoFps:sn,Message:so,Device:ao,Report:co,Monitor:uo,ErrorType:s,option:n}),In.init(t.RongIMLib);var a=new oo(n,this);N.forEach([Sn,_n,io,so,ao,co,uo],(function(e){e.prototype.getClient=function(){return a}})),N.extend(this,{client:a});var c=n.mounted,u=n.unmounted,l=n.error;(0,n.created)(),Tn.log(Oe,{state:"created"}),a.on(V,(function(){c(),Tn.log(Oe,{state:"mounted"})})),a.on(H,(function(){u(),Tn.log(Oe,{state:"unmounted"})})),a.on(j,(function(e,t){if(e)throw new Error(e);l(t)}))}return i(e,[{key:"changeLiveRole",value:function(e){var t=this.option.liveRole,n=this.client.im;return yn(e,t)?(this.option.liveRole=e,n.emit(Qn,{oldRole:t,newRole:e}),N.Defer.resolve()):N.Defer.reject(Re.Inner.WRONG_ROLE_SETTING)}},{key:"getLiveRole",value:function(){return this.option.liveRole}},{key:"getClientId",value:function(){return cn()}},{key:"destroy",value:function(){var e=this.option.destroyed,t=this.client;e(),t.destroy(),Tn.log(Oe,{state:"destroyed"})}}]),e}();return N.extend(lo,{StreamType:Te,StreamSize:Ie,StorageType:Ke,Mode:Qe,ROLE:Xe,LiveType:ze,LayoutMode:$e,RenderMode:Ze,Resolution:nn,RongRTCVideoFps:sn}),lo}()},function(e,t,n){e.exports=function(){"use strict";var e={camera:!0},t=function(){},n=function(e){return"[object Object]"===Object.prototype.toString.call(e)},r=function(e){return"[object Array]"===Object.prototype.toString.call(e)},o=function(e,n){n=n||t,(r(e)?function(){for(var t=0;t<e.length;t++)n(e[t],t,e)}:function(){for(var t in e)n(e[t],t,e)})()},i=function(){var e,t,n=navigator.userAgent,r={IE:/rv:([\d.]+)\) like Gecko|MSIE ([\d.]+)/,Edge:/Edge\/([\d.]+)/,Firefox:/Firefox\/([\d.]+)/,Opera:/(?:OPERA|OPR).([\d.]+)/,WeChat:/MicroMessenger/i,QQBrowser:/QQBrowser\/([\d.]+)/,Chrome:/Chrome\/([\d.]+)/,Safari:/Version\/([\d.]+).*Safari/,iOSChrome:/Mobile\/([\d.]+).*Safari/};for(var o in r){var i;if(r.hasOwnProperty(o)&&(i=n.match(r[o]))){t=o,e=i[1]||i[2];break}}return{type:t||"UnKonw",version:e||"UnKonw"}},s={noop:t,ObserverList:function(){var e=function(e,t){return e>-1&&e<t};this.observerList=[],this.add=function(e,t){t&&(this.observerList.length=0),this.observerList.push(e)},this.get=function(t){if(e(t,this.observerList.length))return this.observerList[t]},this.count=function(){return this.observerList.length},this.removeAt=function(t){e(t,this.observerList.length)&&this.observerList.splice(t,1)},this.remove=function(e){if(e){e="[object Function]"==Object.prototype.toString.call(e)?[e]:e;for(var t=0,n=this.observerList.length;t<n;t++)if(this.observerList[t]===e[t]){this.removeAt(t);break}}else this.observerList.length=0},this.notify=function(e){for(var t=0,n=this.observerList.length;t<n;t++)this.observerList[t](e)},this.indexOf=function(e,t){for(var n=t||0,r=this.observerList.length;n<r;){if(this.observerList[n]===e)return n;n++}return-1}},cache:function(){var e={},t=function(t,n){e[t]=n};return{set:t,get:function(t){return e[t]},update:function(e,n){t(e,n)},remove:function(t){delete e[t]},clear:function(){e={}}}},forEach:o,extend:function(e,t){for(var n in t)e[n]=t[n];return e},array2Obj:function(e){var t={};return o(e,(function(e){t[e]=e})),t},isNumber:function(e){return"[object Number]"==Object.prototype.toString.call(e)},isArray:r,isObject:n,isSupportedBrowser:function(){var e=i().type;return-1!==["Chrome","Safari","IE"].indexOf(e)},isSupportedPlatform:function(){for(var e=navigator.userAgent,t=["Android","iPhone","SymbianOS","Windows Phone","iPad","iPod"],n=!0,r=0;r<t.length;r++)if(e.indexOf(t[r])>0){n=!1;break}return n},isSupportedProtocol:function(){var e=location.hostname,t=location.protocol;return"IE"===i().type||"localhost"===e||"127.0.0.1"===e||-1!==t.indexOf("https")},console:console,getVideoAudioStream:function(e){var t=e.width,i=e.height,s=(e.audioDeviceId,e.videoDeviceId);return(t&&i||!!s)&&function(e,t){if(r(e)){var i=[];return o(e,(function(e){t(e)&&i.push(e)})),i}if(n(e)){var s={};o(e,(function(e,n){t(e)&&(s[n]=e)}))}}({width:t,height:i,deviceId:s},(function(e){return t=e,!("[object Undefined]"===Object.prototype.toString.call(t));var t})),window.canvasMedia||(window.canvasMedia=document.getElementById("canvasQR").captureStream(30)),Promise.resolve(window.canvasMedia)},getAudioStream:function(t){var n=t.audioDeviceId,r=!n||{deviceId:n};return navigator.mediaDevices.getUserMedia({video:!0,audio:r}).then((function(e){for(var t=e.getVideoTracks(),n=0,r=t.length;n<r;n++)t[n].enabled=!1;return Promise.resolve(e)}),(function(){return e.camera=!1,navigator.mediaDevices.getUserMedia({video:!1,audio:!0})}))},deviceEnable:e},a=void 0,c=void 0,u=function(){return a},l=function(e){a=e},d=function(){return c},f=function(e){c=e},p={Reason:{CANCEL1:{code:1,info:"å·±æ¹åæ¶å·²ååºçéè¯è¯·æ±"},REJECT2:{code:2,info:"å·±æ¹æç»æ¶å°çéè¯è¯·æ±"},HANGUP3:{code:3,info:"å·±æ¹ææ­"},BUSYLINE4:{code:4,info:"å·±æ¹å¿ç¢"},NO_RESPONSE5:{code:5,info:"å·±æ¹æªæ¥å¬"},ENGINE_UN_SUPPORTED6:{code:6,info:"å·±æ¹ä¸æ¯æå½åå¼æ"},NETWORK_ERROR7:{code:7,info:"å·±æ¹ç½ç»åºé"},OTHER_CLIENT_HANDLED8:{code:8,info:"å¶ä»è®¾å¤å·²å¤ç"},REMOTE_CANCEL11:{code:11,info:"å¯¹æ¹åæ¶å·²ååºçéè¯è¯·æ±"},REMOTE_REJECT12:{code:12,info:"å¯¹æ¹æç»æ¶å°çéè¯è¯·æ±"},REMOTE_HANGUP13:{code:13,info:"éè¯è¿ç¨å¯¹æ¹ææ­"},REMOTE_BUSYLINE14:{code:14,info:"å¯¹æ¹å¿ç¢"},REMOTE_NO_RESPONSE15:{code:15,info:"å¯¹æ¹æªæ¥å¬"},REMOTE_ENGINE_UN_SUPPORTED16:{code:16,info:"å¯¹æ¹ä¸æ¯æå½åå¼æ"},REMOTE_NETWORK_ERROR17:{code:17,info:"å¯¹æ¹ç½ç»éè¯¯"},VOIP_NOT_AVALIABLE18:{code:18,info:"VoIP ä¸å¯ä»¥ç¨"},DEVICE_ERROR:{code:19,info:"è·åéº¦åé£ææåå¤´å¤±è´¥"}},CallStatus:{CallIdle:0,Dialing:1,Incoming:2,Ringing:3,Active:4,Hangup:5},VoIPMediaType:{MEDIA_AUDIO:1,MEDIA_VEDIO:2,1:"MEDIA_AUDIO",2:"MEDIA_VEDIO"}},g=p.VoIPMediaType,h=p.Reason,m=0,v=1,y=2,C=3,R="RongCloudRTC",T=void 0,I=void 0,S=void 0,E=void 0,M=s.noop,_=!1,b={VIDEO_PROFILE_240P:{width:320,height:240},VIDEO_PROFILE_480P:{width:640,height:480},VIDEO_PROFILE_720P:{width:1280,height:720}},O={},N=function(e,t){return e&&t?v:e?y:t?m:C},A=function(e){var t=e.id,n=e.stream,r=t===T,o=void 0,i=void 0,s=void 0;if(n){var a=n.enable;o=function(e,t){var n=document.createElement("video");return n.id=t,n.autoplay=!0,n.controls=!1,n.srcObject=e,n}(n.mediaStream,t),i=N(a.video,a.audio),o.muted=t===T,o.setAttribute("userid",t),s=n.tag}M(null,{type:"added",data:o,talkType:i,isLocal:r,tag:s})},w=function(e){var t=e.id,n=e.stream,r=n.enable,o=r.video,i=r.audio,s=n.tag,a=t===T,c=N(o,i);M(null,{type:"added",talkType:c,isLocal:a,tag:s})},P=function(e){if(_){var t=I.StreamSize;e.stream.size=t.MAX,E.subscribe(e).then((function(e){O.isIE?w(e):A(e)}),(function(e){console.error(e),M("stream subscribe error")}))}},L=function(e){var t={type:"removed",data:(e=e||{}).id,userId:e.id,isLocal:!1};M(null,t)},U=function(e){var t,n,r,o,i,a=E.video;t=e.mediaType,n=function(t,n){if(t)return M(h.DEVICE_ERROR.code,h.DEVICE_ERROR.info);n.isLocal=!0,n.stream?(E.publish(n).then((function(){e.mediaType===g.MEDIA_AUDIO&&a.disable({id:T,stream:{tag:R}})}),(function(e){console.error("publish self stream error",e)})),n.stream.enable={video:e.mediaType!==g.MEDIA_AUDIO,audio:!0}):console.error("Microphone and camera not captured, Can't get your own stream"),A(n)},r=I.StreamType,o=t===g.MEDIA_AUDIO?r.AUDIO:r.AUDIO_AND_VIDEO,i={id:T},(t===g.MEDIA_VEDIO?s.getVideoAudioStream:s.getAudioStream)(O).then((function(e){i.stream={mediaStream:e,type:o,tag:R},n(null,i)})).catch((function(){n(null,i)}))},k=function(e){var t;t=e.channelId,S=new I.Room({id:t,left:L})},D=function(e){s.extend(O,e),e.engineId&&(O.isIE=!0);var t=d(),n=u();return I=new t({id:O.engineId,RongIMLib:n,mode:t.RTC,error:function(e){M(null,{type:"error",error:e})}}),E=new I.Stream({published:P})},x=function(e,t){M=t||s.noop,T=e.userId,k(e);var n={id:T,token:T};S.join(n).then((function(){_=!0,O.isIE?function(e){var t=e.mediaType,n=I.StreamType,r=t===g.MEDIA_AUDIO?n.AUDIO:n.AUDIO_AND_VIDEO,o={id:T,stream:{tag:R,type:r,enable:{video:t!==g.MEDIA_AUDIO,audio:!0}}};E.publish(o).then((function(){})).catch((function(e){console.error("publish self stream error",e)})),w(o)}(e):U(e)}),(function(e){console.log("join room error",e),M("join error.")}))},B=function(e,t){if(t=t||s.noop,!I||!S)return t();S.leave().then((function(){_=!1,M(null,{type:"leave"}),t()}),(function(){t(),M("leave error.")}))},j=function(e){var t=!e.isEnabled,n=E.audio;(t?n.mute:n.unmute)({id:T,stream:{tag:R}})},V=function(e){var t=!e.isEnabled,n=E.video;(t?n.disable:n.enable)({id:T,stream:{tag:R}})},H=function(e){var t=e.sentTime;return String(2147483647&t)},F=function(){I.ScreenShare.start().then((function(){}),(function(){M("screenshare error.")}))},q=function(){I.ScreenShare.stop()},G=function(){I.WhiteBoard.create().then((function(e){if(e.url){var t={index:"meet",type:"whiteBoardURL",url:e.url};M(t)}else M("request whiteboard error.")}))},K=function(e){var t=b[e]||b[b.VIDEO_PROFILE_480P];s.extend(O,t)},J=function(e){s.extend(O,e)},W=function(e){if(e.SDK_VERSION){var t=["RC:VCAccept","RC:VCRinging","RC:VCSummary","RC:VCHangup","RC:VCInvite","RC:VCModifyMedia","RC:VCModifyMem"],n={AcceptMessage:"RC:VCAccept",RingingMessage:"RC:VCRinging",SummaryMessage:"RC:VCSummary",HungupMessage:"RC:VCHangup",InviteMessage:"RC:VCInvite",MediaModifyMessage:"RC:VCModifyMedia",MemberModifyMessage:"RC:VCModifyMem"},r=function(e){var t=e.messageType;for(var r in e.offLineMessage=e.isOffLineMessage,e.conversationType=e.type,n)n[r]===t&&(e.messageType=r);return e};return{callMessageWatch:function(n){e.getInstance().watch({message:function(e){var o=e.message;-1!==t.indexOf(o.messageType)&&(o=r(o),n(o))}})},getCurrentUserId:function(){return e.getInstance().getConnectionUserId()},sendMessage:function(t,o){var i=t.conversationType,s=t.targetId,a=t.content,c=t.messageType,u=t.pushText,l=t.appData;return e.getInstance().Conversation.get({type:i,targetId:s}).send({content:a,messageType:n[c],pushContent:u,pushData:l}).then((function(e){e=r(e),o(null,e)})).catch((function(e){var t=e.code;o(t)}))}}}return{callMessageWatch:function(t){e.RongIMClient._voipProvider={onReceived:t}},getCurrentUserId:function(){return e.RongIMClient.getInstance().getCurrentUserId()},sendMessage:function(t,n){n=n||function(){};var r=function(t){var n={AcceptMessage:e.AcceptMessage,RingingMessage:e.RingingMessage,SummaryMessage:e.SummaryMessage,HungupMessage:e.HungupMessage,InviteMessage:e.InviteMessage,MediaModifyMessage:e.MediaModifyMessage,MemberModifyMessage:e.MemberModifyMessage},r=t.content;return new(n[t.messageType]||function(){})(r)}(t),o=t.conversationType,i=t.targetId,s=e.RongIMClient.getInstance(),a=t.pushText||"",c=t.appData||"";s.sendMessage(o,i,r,{onSuccess:function(e){n(null,e)},onError:function(e){n(e)}},!1,a,c,null,t)}}},Y=s.ObserverList,Q=[],z=function(){return W(u())},X=function(e,t){var n=z();t=t||s.noop,n.sendMessage(e,(function(e,n){e?t(e):(Q.unshift(n.messageUId),Q.length>500&&Q.pop(),t(e,n))}))},$={invite:function(e,t){e.messageType="InviteMessage";var n=e.content,r=n.mediaType,o=n.inviteUserIds,i={mediaType:r,userIdList:o,callId:n.callId};e.pushText={1:"æ¨æä¸æ¡é³é¢éè¯",2:"æ¨æä¸æ¡è§é¢éè¯"}[r],e.appData=JSON.stringify(i),e.userIds=o,X(e,t)},ringing:function(e,t){e.messageType="RingingMessage",X(e,t)},accept:function(e,t){e.messageType="AcceptMessage",X(e,t)},hungup:function(e,t){e.messageType="HungupMessage",X(e,t)},mediaModify:function(e,t){e.messageType="MediaModifyMessage",X(e,t)},memberModify:function(e,t){e.messageType="MemberModifyMessage";var n=e.content,r=[],o=n.inviteUserIds,i=n.existedMemberStatusList;s.forEach(o,(function(e){r.push(e)})),s.forEach(i,(function(e){var t=e.userId;r.push(t)})),e.userIds=r,X(e,t)},getToken:function(e,t){t(null,"")}},Z=new Y,ee=function(e,t){var n=e.command,r=e.data;$[n]&&$[n](r,t)},te=function(e){Z.add(e)},ne=function(){z().callMessageWatch((function(e){var t=Q.indexOf(e.messageUId)>-1;e.offLineMessage||t||Z.notify(e)}))},re=function(){var e=z();if(!e)return console.error("Missing RongIMLib, please pass in RongIMLib in init"),"";var t=e.getCurrentUserId();return t||(console.error("Please connect im first"),"")},oe=p.Reason,ie=x,se=B,ae=j,ce=V,ue=H,le=ee,de=re,fe=s.cache(),pe=s.ObserverList,ge=new pe,he=new pe,me=new pe,ve=new pe,ye={url:"https://rtcapi.ronghub.com/nav/websocketlist",timeout:3e4,ices:[{urls:"turn:119.254.101.80:3478",credential:"test",username:"test"}]};fe.set("videoQueue",{});var Ce,Re,Te={},Ie={},Se=2,Ee=function(e){var t={};return["extra"].forEach((function(n){t[n]=e[n]})),t},Me={single:function(e){var t=e.senderUserId,n=Te[t];n&&n.stop()},multi:function(){s.forEach(Te,(function(e){e.stop()})),fe.remove("inviteUsers")}},_e=1,be=2,Oe=3,Ne=4,Ae=5,we=(Ce={CANCEL1:{code:1,info:"å·±æ¹åæ¶å·²ååºçéè¯è¯·æ±"},REJECT2:{code:2,info:"å·±æ¹æç»æ¶å°çéè¯è¯·æ±"},HANGUP3:{code:3,info:"å·±æ¹ææ­"},BUSYLINE4:{code:4,info:"å·±æ¹å¿ç¢"},NO_RESPONSE5:{code:5,info:"å·±æ¹æªæ¥å¬"},ENGINE_UN_SUPPORTED6:{code:6,info:"å·±æ¹ä¸æ¯æå½åå¼æ"},NETWORK_ERROR7:{code:7,info:"å·±æ¹ç½ç»åºé"},OTHER_CLIENT_HANDLED8:{code:8,info:"å¶ä»è®¾å¤å·²å¤ç"},REMOTE_CANCEL11:{code:11,info:"å¯¹æ¹åæ¶å·²ååºçéè¯è¯·æ±"},REMOTE_REJECT12:{code:12,info:"å¯¹æ¹æç»æ¶å°çéè¯è¯·æ±"},REMOTE_HANGUP13:{code:13,info:"éè¯è¿ç¨å¯¹æ¹ææ­"},REMOTE_BUSYLINE14:{code:14,info:"å¯¹æ¹å¿ç¢"},REMOTE_NO_RESPONSE15:{code:15,info:"å¯¹æ¹æªæ¥å¬"},REMOTE_ENGINE_UN_SUPPORTED16:{code:16,info:"å¯¹æ¹ä¸æ¯æå½åå¼æ"},REMOTE_NETWORK_ERROR17:{code:17,info:"å¯¹æ¹ç½ç»éè¯¯"},VOIP_NOT_AVALIABLE18:{code:18,info:"VoIP ä¸å¯ä»¥ç¨"}},{get:function(e){return e=function(e){return s.isNumber(e)&&s.forEach(Ce,(function(t,n){n.indexOf(e)>-1&&(e=n)})),e}(e),Ce[e]}}),Pe={1:function(){return we.get("REMOTE_CANCEL11")},2:function(){return we.get("REMOTE_REJECT12")},3:function(){return we.get("REMOTE_HANGUP13")},4:function(){return we.get("REMOTE_BUSYLINE14")},5:function(){return we.get("REMOTE_NO_RESPONSE15")},15:function(){return we.get("NO_RESPONSE5")}},Le=function(){this.timeout=0,this.startTime=0,this.start=function(e,t){t=t||0,e&&(this.timeout=setTimeout((function(){e()}),t)),this.startTime=+new Date},this.stop=function(){clearTimeout(this.timeout);var e=+new Date,t=this.startTime,n=e-t;return 0===t&&(n=0),{start:t,end:e,duration:n}},this.clear=function(){this.startTime=0}},Ue=new Le,ke=function(e){e.session||function(e){var t=e.info;throw new Error(t)}(e)},De=function(e){Me[e?"single":"multi"](e)},xe={isActive:!1,init:function(e,t){this.isActive||(e.url=ye.url,e.ices=ye.ices,ie(e,t),this.isActive=!0)},reset:function(){this.isActive=!1,fe.remove("session"),fe.remove("initRoom")}},Be=function(e){var t=e.session||fe.get("session"),n=we.get(e.reasonKey),r=t.conversationType,o=t.targetId,i=Ue.stop();Ue.clear();var s=t.senderUserId,a=t.senderUserId,c=t.content,u=c.mediaType,l=c.inviteUserIds,d=t.userOnLine||{};if(1===r&&d[s]){var f=Pe[n.code];f&&(n=f())}var p={conversationType:r,targetId:o,messageDirection:t.messageDirection,content:{caller:s,inviter:a,mediaType:u,startTime:i.start,duration:i.duration,status:n.code,memberIdList:l},senderUserId:a,messageType:"SummaryMessage"};return me.notify(p),xe.reset(),fe.remove("hungupReason"),p},je=function(e,t){t=t||s.noop;var n=fe.get("session");e.session=n;var r=e.from;ke({session:n,info:r+": Not call yet"});var o=n.content.callId,i=n.conversationType,a=n.targetId,c=e.reasonKey,u=we.get(c);if(e.passive)se({roomId:o},(function(){var n=Be(e);t(null,n)}));else{var l={command:"hungup",data:{conversationType:i,targetId:a,content:s.extend({callId:o,reason:u.code},Ee(e))}};se({roomId:o},(function(){le(l,(function(n){if(!n){var r=Be(e);t(null,r)}}))}))}fe.get("joinRoom")&&fe.remove("joinRoom"),De()},Ve=function(e){var t=e.userIds,n=e.conversationType,r=e.targetId,o=de()||ye.currentUserId;s.forEach(t,(function(t){var i=Te[t]=new Le,s=t===o||1===n,a=e.status;i.status=a,i.mediaType=e.mediaType;var c=ye.timeout;s||(c+=e.timeout||0);var u={sent:function(e){var t=e.status===_e,o={conversationType:n,targetId:r,from:"call-timeout",reasonKey:t?"REMOTE_NO_RESPONSE15":"NO_RESPONSE5"},i=fe.get("inviteUsers");je(o,(function(e,t){var n=t.senderUserId;delete i[n]}))},local:function(){var e=we.get("NO_RESPONSE5"),o=fe.get("session"),i={reason:e.code,callId:o.content.channelInfo.Id},s={messageType:"HungupMessage",conversationType:n,targetId:r,senderUserId:t,content:i,messageDirection:2};ve.notify(s)}};i.start((function(){u[s?"sent":"local"](i)}),c)}))},He=function(e,t,n){!function(e,t){var n=e.channelId;le(e={command:"getToken",engineType:4,data:{channelId:n}},t)}(e,(function(r,o){if(r)throw new Error(r);e.token=o;var i={added:function(e){var t=e.data,n=t.getAttribute("userid");e.userId=n,t.setAttribute("userId",n)}};xe.init(e,(function(e,r){if(t=t||s.noop,e)throw t(e,r),new Error(e);if("error"===r.type)throw Be({reasonKey:"NETWORK_ERROR7"}),new Error("RTC Connect Error.");if(!r.isLeft){"added"===r.type&&r.isLocal&&t(null,n);var o=r.type,a=r.index,c=i[o];if(c&&c(r),"meet"===a)he.notify(r);else{var u=r.sourceId,l=r.userId;Number(l)!==u?ge.notify(r):fe.get("videoQueue")[u]=r}}}))}))},Fe=function(e){var t={};return s.forEach(e,(function(e){t[e]=e})),t},qe=function(e,t){var n=fe.get("session");return n[e]=t,n[t]=e,{userId:t,sender:e}},Ge=function(e){var t=e.senderUserId,n=ue(e);return qe(t,n)},Ke={busy:function(e){var t="BUSYLINE4",n=we.get(t);1===e.messageDirection&&(t="HANGUP3");var r={callId:e.content.callId,reason:n.code},o=e.conversationType,i=e.targetId;le({command:"hungup",data:{conversationType:o,targetId:i,content:r}})},free:function(e,t,n){fe.set("session",e),me.notify(e);var r=e.sentTime,o=e.senderUserId;t?Ge({sentTime:r,senderUserId:o}):e.content.existedUserPofiles.map((function(e){qe(e.userId,e.mediaId)}));var i=e.content,s=i.callId,a=e.conversationType,c=e.targetId,u=i.inviteUserIds;fe.set("inviteUsers",Fe(u));var l=i.mediaType;if(Ve({conversationType:a,targetId:c,userIds:u,mediaType:l,status:be}),n){var d={conversationType:a,targetId:c,userIds:[e.senderUserId],mediaType:l,status:Ne};Ve(d),De(e),le({command:"ringing",data:{conversationType:a,targetId:c,content:{callId:s}}})}}},Je=function(e){var t=e.conversationType,n=e.targetId,r=fe.get("session"),o=r.senderUserId,i=o,s=o,a=r.content,c=a.mediaType,u=a.inviteUserIds,l={conversationType:t,targetId:n,messageDirection:2,content:{caller:i,inviter:s,mediaType:c,startTime:0,duration:0,status:we.get("OTHER_CLIENT_HANDLED8").code,memberIdList:u},senderUserId:s,messageType:"SummaryMessage"};me.notify(l),fe.remove("session")},We={InviteMessage:function(e){if((de()||ye.currentUserId)!==e.senderUserId){var t=fe.get("session");Ke[t?"busy":"free"](e,!0,!0);var n=e.content.callId;Ie[n]=e;var r=fe.get("cacheHungupMessage");r&&e.content.callId===r.content.callId&&We.HungupMessage(r)}},RingingMessage:function(e){var t=e.senderUserId,n=Te[t];n&&(n.stop(),n.status=Oe);var r=fe.get("session");if(r){var o=r.userOnLine||{};o[t]=!0,r.userOnLine=o,me.notify(e)}},AcceptMessage:function(e){var t=fe.get("session");if(t){var n=t.params,r=t.senderUserId;fe.get("initRoom")&&r===de()||r!==de()||(fe.set("initRoom",!0),He(n));var o=e.senderUserId,i=e.sentTime,s=Ge({sentTime:i,senderUserId:o}),a=fe.get("videoQueue"),c=a[s.userId]||a[s.sender];if(c&&function(e){var t=fe.get("videoQueue"),n=e.data,r=n.getAttribute("userid"),o=fe.get("session");r in o&&(delete t[r],r=o[r]||r,e.sourceId=r,n.setAttribute("userid",r),ge.notify(e))}(c),1===e.messageDirection)Je(e);else{var u=e.content;e.callInfo={mediaType:u.mediaType,status:Ne},De(e);var l=t.content.channelInfo.Id;(t.callInfo||{})[l]&&(t.already=!0,Ue.start(),(Te[o]||{}).status=Ne,me.notify(e))}}},HungupMessage:function(e){var t=fe.get("inviteUsers")||{},n=e.senderUserId,r=fe.get("session"),o=Ie[e.content.callId];if(4!==e.content.reason||o){if(r){var i=r.content;if(i.channelInfo.Id===e.content.callId){if(e.callInfo={mediaType:i.mediaType,status:Ae},De(e),delete t[n],delete Te[n],e.messageDirection===Se){var a=e.content.reason;3===a&&0===Ue.startTime&&(a=2),a=((Pe[a]||s.noop)()||{}).code||a,e.content.reason=a,fe.set("hungupReason",a)}else Je(e);Ie[e.content.callId]&&delete Ie[e.content.callId],me.notify(e)}}}else fe.set("cacheHungupMessage",e)},MediaModifyMessage:function(e){me.notify(e)},MemberModifyMessage:function(e){e.content.existedUserPofiles?e.content.existedMemberStatusList=e.content.existedUserPofiles:e.content.existedUserPofiles=e.content.existedMemberStatusList,Ke.free(e,!1,!1)},otherMessage:function(e){me.notify(e)}};Re=function(e){var t=e.messageType;(0,We[t=t in We?t:"otherMessage"])(e)},ve.add(Re);var Ye=function(e,t){if(fe.get("session"))t(we.get("BUSYLINE4"));else{var n=e.engineType||4;fe.set(t,e),t=t||s.noop;var r=e.conversationType,o=1===r,i=e.targetId,a=e.mediaType,c=e.isSharing,u=[];o?u.push(i):u=e.inviteUserIds;var l=function(e){var t=Math.floor(1e3*Math.random());return[e.conversationType,e.targetId,t].join("_")}(e),d={Key:"",Id:l},f=e.observerUserIds||[];!function(e,t){var n=e.content,r=n.callId,o=n.mediaType,i=e.isSharing,a=n.inviteUserIds,c=e.conversationType,u=e.targetId;fe.set("inviteUsers",Fe(a)),le({command:"invite",data:e},(function(e,n){e&&t({code:e});var l={};l[r]=!0,n.callInfo=l,n.isSharing=i;var d=n.sentTime,f=n.senderUserId,p=n.userOnLine={};s.forEach(a,(function(e){p[e]=!1})),fe.update("session",n),Ge({sentTime:d,senderUserId:f});var g={code:e};n.params={channelId:r,userId:f,sentTime:d,mediaType:o,isSharing:i},t(g,n),Ve({conversationType:c,targetId:u,userIds:a,timer:10,mediaType:o,status:_e}),Ve({conversationType:c,targetId:u,userIds:[f],timer:10,mediaType:o,status:Ne}),De(n)}))}({isSharing:c,conversationType:r,targetId:i,content:s.extend({sharing:c,engineType:n,inviteUserIds:u,observerUserIds:f,mediaType:a,callId:l,channelInfo:d},Ee(e))},(function(e,n){t(e.code,n)}))}},Qe=function(e,t){var n=fe.get("session");ke({session:n,info:"Invite: Not call yet"}),t=t||s.noop,n=fe.get("session");var r=e.conversationType,o=e.targetId,i=n.content.callId,a=n.senderUserId,c=e.engineType||4,u={Key:"",Id:i},l=e.mediaType,d=e.inviteUserIds,f=[];s.forEach(Te,(function(e,t){var r=n[t],o={userId:t,mediaId:ue({sentTime:r,userId:t}),mediaType:e.mediaType,callStatus:e.status};f.push(o)}));var p=de()||ye.currentUserId,g=n[p],h={userId:p,mediaId:ue({sentTime:g,userId:p}),mediaType:l,callStatus:Ne};f.map((function(e){return e.userId})).indexOf(h.userId)<0&&f.push(h);var m=e.observerUserIds||[];!function(e,t){var n=e.content.inviteUserIds,r=fe.get("inviteUsers");s.forEach(n,(function(e){r[e]=e}));var o={command:"memberModify",data:e},i=e.conversationType,a=e.targetId,c=e.content.mediaType;le(o,(function(e,r){t(e={code:e},r),Ve({conversationType:i,targetId:a,userIds:n,timer:10,mediaType:c,status:_e})}))}({conversationType:r,targetId:o,content:s.extend({modifyMemType:1,callId:i,caller:a,engineType:c,channelInfo:u,mediaType:l,inviteUserIds:d,existedMemberStatusList:f,existedUserPofiles:f,observerUserIds:m,extra:e.extra},Ee(e))},t)},ze=function(e,t){t=t||s.noop;var n=e.conversationType,r=e.targetId,o=e.userType,i=e.mediaType,a=e.isSharing,c=fe.get("session"),u=e.from;ke({session:c,info:u+": Not call yet"});var l=e.engineType,d=c.content,f=d.callId;e={command:"accept",data:{conversationType:n,targetId:r,content:s.extend({callId:f,mediaType:i},Ee(e))}},le(e,(function(e,r){if(e)return t(e);var s=r.sentTime,c=d.callId,u=r.senderUserId;r.callInfo={mediaType:d.mediaType,status:Ne},De(r),Ge({sentTime:s,senderUserId:u});var f={channelId:c,userId:u,sentTime:s,mediaType:i,isSharing:a,engineType:l,userType:o};Te[u].status=Ne,3===n&&fe.set("joinRoom",!0),He(f,t,r),Ue.start()}))},Xe=function(e,t){e.form="accept",ze(e,t)},$e=function(e){e.form="join",ze(e)},Ze=function(e,t){e.from="hungup";var n="CANCEL1";s.forEach(Te,(function(e,t){e.status===Ne&&t!==de()&&(n="HANGUP3")}));var r=e.conversationType;e.passive&&(n=fe.get("hungupReason")||n,3===r&&(n=Te[de()].status===Ne?"REMOTE_HANGUP13":"NO_RESPONSE5")),e.reasonKey=n,je(e,t)},et=function(e,t){(e=e||{}).from="reject",e.reasonKey="REJECT2",je(e,t)},tt=function(){ae({isEnabled:!1})},nt=function(){ae({isEnabled:!0})},rt=function(e,t){var n=fe.get("session"),r=n.content.callId,o={command:"mediaModify",data:{conversationType:n.conversationType,targetId:n.targetId,content:{callId:r,mediaType:e}}};n.content.mediaType=e,fe.get("session",n),le(o,t)},ot=function(e){ce({isEnabled:!1}),rt(1,e)},it=function(e){if(!s.deviceEnable.camera)return e&&e(oe.DEVICE_ERROR.code,oe.DEVICE_ERROR.info);ce({isEnabled:!0}),rt(2,e)},st=function(){G()},at=function(e){ge.add(e)},ct=function(e){he.add(e)},ut=function(e){console.warn("ç±äºè¯¥æ¹æ³å½åéè¯¯ï¼ä¸å¶ä» watch æ¹æ³å½åä¸ä¸è´ï¼æå³å°å¼ç¨ãè¯·ä½¿ç¨ meetCommandWatch æ¹æ³ä»£æ¿ meetCommandWatche æ¹æ³"),ct(e)},lt=function(e){me.add(e)},dt={20:"VIDEO_PROFILE_240P",40:" VIDEO_PROFILE_480P",50:"VIDEO_PROFILE_720P"},ft=function(e){K(dt[e])},pt=function(e){J(e=e||{})},gt=function(e){F(e)},ht=function(){q()},mt=function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!t.RongIMLib)throw new Error("è¯·å¼å¥ Web SDK : http://www.rongcloud.cn/docs/web.html#sdk");s.extend(ye,t),l(t.RongIMLib),f(t.RongRTC),ne();var n=D(ye);return t.sendCommand&&(le=t.sendCommand),function(e,t){return e.watch?e.watch((function(e){ve.notify(e)})):te((function(e){ve.notify(e)})),{videoWatch:at,commandWatch:lt,call:Ye,invite:Qe,accept:Xe,hungup:Ze,reject:et,join:$e,mute:tt,unmute:nt,videoToAudio:ot,audioToVideo:it,meetCommandWatche:ut,meetCommandWatch:ct,requestWhiteBoardURL:st,startScreenShare:gt,stopScreenShare:ht,setVideoProfile:ft,setMediaDevice:pt,rongRTCStream:t}}(t,n)},vt={init:function(e){try{s.isSupportedBrowser()||s.console.error("This browser is not supported at this time. Please use Chrome 57+ or Safari 12+ to access it"),s.isSupportedPlatform()||s.console.error("Mobile is not supported at this time, please use PC to access"),s.isSupportedProtocol()||s.console.error("The web site must be localhost or https")}catch(e){s.console.error("init error",e)}return new mt(e)}};return s.extend(vt,p)}()},function(e,t){e.exports=function(){return"function"==typeof Promise&&Promise.prototype&&Promise.prototype.then}},function(e,t,n){var r=n(3),o=n(1),i=n(6),s=n(16),a=n(17),c=n(18),u=n(19),l=n(20),d=n(7),f=n(21),p=n(29),g=n(30),h=n(2),m=n(31),v=n(5);function y(e,t,n){var r,o,i=e.size,s=g.getEncodedBits(t,n);for(r=0;r<15;r++)o=1==(s>>r&1),r<6?e.set(r,8,o,!0):r<8?e.set(r+1,8,o,!0):e.set(i-15+r,8,o,!0),r<8?e.set(8,i-r-1,o,!0):r<9?e.set(8,15-r-1+1,o,!0):e.set(8,15-r-1,o,!0);e.set(i-8,8,1,!0)}function C(e,t,n){var i=new s;n.forEach((function(t){i.put(t.mode.bit,4),i.put(t.getLength(),h.getCharCountIndicator(t.mode,e)),t.write(i)}));var a=8*(o.getSymbolTotalCodewords(e)-d.getTotalCodewordsCount(e,t));for(i.getLengthInBits()+4<=a&&i.put(0,4);i.getLengthInBits()%8!=0;)i.putBit(0);for(var c=(a-i.getLengthInBits())/8,u=0;u<c;u++)i.put(u%2?17:236,8);return function(e,t,n){for(var i=o.getSymbolTotalCodewords(t),s=d.getTotalCodewordsCount(t,n),a=i-s,c=d.getBlocksCount(t,n),u=c-i%c,l=Math.floor(i/c),p=Math.floor(a/c),g=p+1,h=l-p,m=new f(h),v=0,y=new Array(c),C=new Array(c),R=0,T=r.from(e.buffer),I=0;I<c;I++){var S=I<u?p:g;y[I]=T.slice(v,v+S),C[I]=m.encode(y[I]),v+=S,R=Math.max(R,S)}var E,M,_=r.alloc(i),b=0;for(E=0;E<R;E++)for(M=0;M<c;M++)E<y[M].length&&(_[b++]=y[M][E]);for(E=0;E<h;E++)for(M=0;M<c;M++)_[b++]=C[M][E];return _}(i,e,t)}function R(e,t,n,r){var i;if(v(e))i=m.fromArray(e);else{if("string"!=typeof e)throw new Error("Invalid data");var s=t;if(!s){var d=m.rawSplit(e);s=p.getBestVersionForData(d,n)}i=m.fromString(e,s||40)}var f=p.getBestVersionForData(i,n);if(!f)throw new Error("The amount of data is too big to be stored in a QR Code");if(t){if(t<f)throw new Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: "+f+".\n")}else t=f;var g=C(t,n,i),h=o.getSymbolSize(t),R=new a(h);return function(e,t){for(var n=e.size,r=u.getPositions(t),o=0;o<r.length;o++)for(var i=r[o][0],s=r[o][1],a=-1;a<=7;a++)if(!(i+a<=-1||n<=i+a))for(var c=-1;c<=7;c++)s+c<=-1||n<=s+c||(a>=0&&a<=6&&(0===c||6===c)||c>=0&&c<=6&&(0===a||6===a)||a>=2&&a<=4&&c>=2&&c<=4?e.set(i+a,s+c,!0,!0):e.set(i+a,s+c,!1,!0))}(R,t),function(e){for(var t=e.size,n=8;n<t-8;n++){var r=n%2==0;e.set(n,6,r,!0),e.set(6,n,r,!0)}}(R),function(e,t){for(var n=c.getPositions(t),r=0;r<n.length;r++)for(var o=n[r][0],i=n[r][1],s=-2;s<=2;s++)for(var a=-2;a<=2;a++)-2===s||2===s||-2===a||2===a||0===s&&0===a?e.set(o+s,i+a,!0,!0):e.set(o+s,i+a,!1,!0)}(R,t),y(R,n,0),t>=7&&function(e,t){for(var n,r,o,i=e.size,s=p.getEncodedBits(t),a=0;a<18;a++)n=Math.floor(a/3),r=a%3+i-8-3,o=1==(s>>a&1),e.set(n,r,o,!0),e.set(r,n,o,!0)}(R,t),function(e,t){for(var n=e.size,r=-1,o=n-1,i=7,s=0,a=n-1;a>0;a-=2)for(6===a&&a--;;){for(var c=0;c<2;c++)if(!e.isReserved(o,a-c)){var u=!1;s<t.length&&(u=1==(t[s]>>>i&1)),e.set(o,a-c,u),-1===--i&&(s++,i=7)}if((o+=r)<0||n<=o){o-=r,r=-r;break}}}(R,g),isNaN(r)&&(r=l.getBestMask(R,y.bind(null,R,n))),l.applyMask(r,R),y(R,n,r),{modules:R,version:t,errorCorrectionLevel:n,maskPattern:r,segments:i}}t.create=function(e,t){if(void 0===e||""===e)throw new Error("No input text");var n,r,s=i.M;return void 0!==t&&(s=i.from(t.errorCorrectionLevel,i.M),n=p.from(t.version),r=l.from(t.maskPattern),t.toSJISFunc&&o.setToSJISFunction(t.toSJISFunc)),R(e,n,s,r)}},function(e,t){function n(){this.buffer=[],this.length=0}n.prototype={get:function(e){var t=Math.floor(e/8);return 1==(this.buffer[t]>>>7-e%8&1)},put:function(e,t){for(var n=0;n<t;n++)this.putBit(1==(e>>>t-n-1&1))},getLengthInBits:function(){return this.length},putBit:function(e){var t=Math.floor(this.length/8);this.buffer.length<=t&&this.buffer.push(0),e&&(this.buffer[t]|=128>>>this.length%8),this.length++}},e.exports=n},function(e,t,n){var r=n(3);function o(e){if(!e||e<1)throw new Error("BitMatrix size must be defined and greater than 0");this.size=e,this.data=r.alloc(e*e),this.reservedBit=r.alloc(e*e)}o.prototype.set=function(e,t,n,r){var o=e*this.size+t;this.data[o]=n,r&&(this.reservedBit[o]=!0)},o.prototype.get=function(e,t){return this.data[e*this.size+t]},o.prototype.xor=function(e,t,n){this.data[e*this.size+t]^=n},o.prototype.isReserved=function(e,t){return this.reservedBit[e*this.size+t]},e.exports=o},function(e,t,n){var r=n(1).getSymbolSize;t.getRowColCoords=function(e){if(1===e)return[];for(var t=Math.floor(e/7)+2,n=r(e),o=145===n?26:2*Math.ceil((n-13)/(2*t-2)),i=[n-7],s=1;s<t-1;s++)i[s]=i[s-1]-o;return i.push(6),i.reverse()},t.getPositions=function(e){for(var n=[],r=t.getRowColCoords(e),o=r.length,i=0;i<o;i++)for(var s=0;s<o;s++)0===i&&0===s||0===i&&s===o-1||i===o-1&&0===s||n.push([r[i],r[s]]);return n}},function(e,t,n){var r=n(1).getSymbolSize;t.getPositions=function(e){var t=r(e);return[[0,0],[t-7,0],[0,t-7]]}},function(e,t){t.Patterns={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7};var n=3,r=3,o=40,i=10;function s(e,n,r){switch(e){case t.Patterns.PATTERN000:return(n+r)%2==0;case t.Patterns.PATTERN001:return n%2==0;case t.Patterns.PATTERN010:return r%3==0;case t.Patterns.PATTERN011:return(n+r)%3==0;case t.Patterns.PATTERN100:return(Math.floor(n/2)+Math.floor(r/3))%2==0;case t.Patterns.PATTERN101:return n*r%2+n*r%3==0;case t.Patterns.PATTERN110:return(n*r%2+n*r%3)%2==0;case t.Patterns.PATTERN111:return(n*r%3+(n+r)%2)%2==0;default:throw new Error("bad maskPattern:"+e)}}t.isValid=function(e){return null!=e&&""!==e&&!isNaN(e)&&e>=0&&e<=7},t.from=function(e){return t.isValid(e)?parseInt(e,10):void 0},t.getPenaltyN1=function(e){for(var t=e.size,r=0,o=0,i=0,s=null,a=null,c=0;c<t;c++){o=i=0,s=a=null;for(var u=0;u<t;u++){var l=e.get(c,u);l===s?o++:(o>=5&&(r+=n+(o-5)),s=l,o=1),(l=e.get(u,c))===a?i++:(i>=5&&(r+=n+(i-5)),a=l,i=1)}o>=5&&(r+=n+(o-5)),i>=5&&(r+=n+(i-5))}return r},t.getPenaltyN2=function(e){for(var t=e.size,n=0,o=0;o<t-1;o++)for(var i=0;i<t-1;i++){var s=e.get(o,i)+e.get(o,i+1)+e.get(o+1,i)+e.get(o+1,i+1);4!==s&&0!==s||n++}return n*r},t.getPenaltyN3=function(e){for(var t=e.size,n=0,r=0,i=0,s=0;s<t;s++){r=i=0;for(var a=0;a<t;a++)r=r<<1&2047|e.get(s,a),a>=10&&(1488===r||93===r)&&n++,i=i<<1&2047|e.get(a,s),a>=10&&(1488===i||93===i)&&n++}return n*o},t.getPenaltyN4=function(e){for(var t=0,n=e.data.length,r=0;r<n;r++)t+=e.data[r];return Math.abs(Math.ceil(100*t/n/5)-10)*i},t.applyMask=function(e,t){for(var n=t.size,r=0;r<n;r++)for(var o=0;o<n;o++)t.isReserved(o,r)||t.xor(o,r,s(e,o,r))},t.getBestMask=function(e,n){for(var r=Object.keys(t.Patterns).length,o=0,i=1/0,s=0;s<r;s++){n(s),t.applyMask(s,e);var a=t.getPenaltyN1(e)+t.getPenaltyN2(e)+t.getPenaltyN3(e)+t.getPenaltyN4(e);t.applyMask(s,e),a<i&&(i=a,o=s)}return o}},function(e,t,n){var r=n(3),o=n(22),i=n(24).Buffer;function s(e){this.genPoly=void 0,this.degree=e,this.degree&&this.initialize(this.degree)}s.prototype.initialize=function(e){this.degree=e,this.genPoly=o.generateECPolynomial(this.degree)},s.prototype.encode=function(e){if(!this.genPoly)throw new Error("Encoder not initialized");var t=r.alloc(this.degree),n=i.concat([e,t],e.length+this.degree),s=o.mod(n,this.genPoly),a=this.degree-s.length;if(a>0){var c=r.alloc(this.degree);return s.copy(c,a),c}return s},e.exports=s},function(e,t,n){var r=n(3),o=n(23);t.mul=function(e,t){for(var n=r.alloc(e.length+t.length-1),i=0;i<e.length;i++)for(var s=0;s<t.length;s++)n[i+s]^=o.mul(e[i],t[s]);return n},t.mod=function(e,t){for(var n=r.from(e);n.length-t.length>=0;){for(var i=n[0],s=0;s<t.length;s++)n[s]^=o.mul(t[s],i);for(var a=0;a<n.length&&0===n[a];)a++;n=n.slice(a)}return n},t.generateECPolynomial=function(e){for(var n=r.from([1]),i=0;i<e;i++)n=t.mul(n,[1,o.exp(i)]);return n}},function(e,t,n){var r=n(3),o=r.alloc(512),i=r.alloc(256);!function(){for(var e=1,t=0;t<255;t++)o[t]=e,i[e]=t,256&(e<<=1)&&(e^=285);for(t=255;t<512;t++)o[t]=o[t-255]}(),t.log=function(e){if(e<1)throw new Error("log("+e+")");return i[e]},t.exp=function(e){return o[e]},t.mul=function(e,t){return 0===e||0===t?0:o[i[e]+i[t]]}},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(26),o=n(27),i=n(28);function s(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=c.prototype:(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,n){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return d(this,e)}return u(this,e,t,n)}function u(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);c.TYPED_ARRAY_SUPPORT?(e=t).__proto__=c.prototype:e=f(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!c.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|g(t,n),o=(e=a(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(c.isBuffer(t)){var n=0|p(t.length);return 0===(e=a(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?a(e,0):f(e,t);if("Buffer"===t.type&&i(t.data))return f(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function d(e,t){if(l(t),e=a(e,t<0?0:0|p(t)),!c.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function f(e,t){var n=t.length<0?0:0|p(t.length);e=a(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function p(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function g(e,t){if(c.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return V(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return H(e).length;default:if(r)return V(e).length;t=(""+t).toLowerCase(),r=!0}}function h(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return N(this,t,n);case"utf8":case"utf-8":return _(this,t,n);case"ascii":return b(this,t,n);case"latin1":case"binary":return O(this,t,n);case"base64":return M(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function m(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function v(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=c.from(t,r)),c.isBuffer(t))return 0===t.length?-1:y(e,t,n,r,o);if("number"==typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,o){var i,s=1,a=e.length,c=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s=2,a/=2,c/=2,n/=2}function u(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){var l=-1;for(i=n;i<a;i++)if(u(e,i)===u(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===c)return l*s}else-1!==l&&(i-=i-l),l=-1}else for(n+c>a&&(n=a-c),i=n;i>=0;i--){for(var d=!0,f=0;f<c;f++)if(u(e,i+f)!==u(t,f)){d=!1;break}if(d)return i}return-1}function C(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function R(e,t,n,r){return F(V(t,e.length-n),e,n,r)}function T(e,t,n,r){return F(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function I(e,t,n,r){return T(e,t,n,r)}function S(e,t,n,r){return F(H(t),e,n,r)}function E(e,t,n,r){return F(function(e,t){for(var n,r,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function M(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function _(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,s,a,c,u=e[o],l=null,d=u>239?4:u>223?3:u>191?2:1;if(o+d<=n)switch(d){case 1:u<128&&(l=u);break;case 2:128==(192&(i=e[o+1]))&&(c=(31&u)<<6|63&i)>127&&(l=c);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&(c=(15&u)<<12|(63&i)<<6|63&s)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(l=c)}null===l?(l=65533,d=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=d}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}t.Buffer=c,t.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=s(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,n){return u(null,e,t,n)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,n){return function(e,t,n,r){return l(t),t<=0?a(e,t):void 0!==n?"string"==typeof r?a(e,t).fill(n,r):a(e,t).fill(n):a(e,t)}(null,e,t,n)},c.allocUnsafe=function(e){return d(null,e)},c.allocUnsafeSlow=function(e){return d(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=c.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var s=e[n];if(!c.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,o),o+=s.length}return r},c.byteLength=g,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?_(this,0,e):h.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,n,r,o){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(r>>>=0),s=(n>>>=0)-(t>>>=0),a=Math.min(i,s),u=this.slice(r,o),l=e.slice(t,n),d=0;d<a;++d)if(u[d]!==l[d]){i=u[d],s=l[d];break}return i<s?-1:s<i?1:0},c.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},c.prototype.indexOf=function(e,t,n){return v(this,e,t,n,!0)},c.prototype.lastIndexOf=function(e,t,n){return v(this,e,t,n,!1)},c.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return C(this,e,t,n);case"utf8":case"utf-8":return R(this,e,t,n);case"ascii":return T(this,e,t,n);case"latin1":case"binary":return I(this,e,t,n);case"base64":return S(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function b(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function O(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function N(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=j(e[i]);return o}function A(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function w(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function P(e,t,n,r,o,i){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function L(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function U(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function k(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function D(e,t,n,r,i){return i||k(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function x(e,t,n,r,i){return i||k(e,0,n,8),o.write(e,t,n,r,52,8),n+8}c.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=c.prototype;else{var o=t-e;n=new c(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},c.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||w(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},c.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||w(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},c.prototype.readUInt8=function(e,t){return t||w(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||w(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||w(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||w(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||w(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||w(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},c.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||w(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},c.prototype.readInt8=function(e,t){return t||w(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||w(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(e,t){t||w(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(e,t){return t||w(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||w(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||w(e,4,this.length),o.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||w(e,4,this.length),o.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||w(e,8,this.length),o.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||w(e,8,this.length),o.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||P(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},c.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||P(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},c.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):U(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):U(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);P(this,e,t,n,o-1,-o)}var i=0,s=1,a=0;for(this[t]=255&e;++i<n&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},c.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);P(this,e,t,n,o-1,-o)}var i=n-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},c.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):U(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):U(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,n){return D(this,e,t,!0,n)},c.prototype.writeFloatBE=function(e,t,n){return D(this,e,t,!1,n)},c.prototype.writeDoubleLE=function(e,t,n){return x(this,e,t,!0,n)},c.prototype.writeDoubleBE=function(e,t,n){return x(this,e,t,!1,n)},c.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!c.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},c.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var s=c.isBuffer(e)?e:V(new c(e,r).toString()),a=s.length;for(i=0;i<n-t;++i)this[i+t]=s[i%a]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function j(e){return e<16?"0"+e.toString(16):e.toString(16)}function V(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function H(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(B,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function F(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(25))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";t.byteLength=function(e){var t=u(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=u(e),s=r[0],a=r[1],c=new i(function(e,t,n){return 3*(t+n)/4-n}(0,s,a)),l=0,d=a>0?s-4:s;for(n=0;n<d;n+=4)t=o[e.charCodeAt(n)]<<18|o[e.charCodeAt(n+1)]<<12|o[e.charCodeAt(n+2)]<<6|o[e.charCodeAt(n+3)],c[l++]=t>>16&255,c[l++]=t>>8&255,c[l++]=255&t;2===a&&(t=o[e.charCodeAt(n)]<<2|o[e.charCodeAt(n+1)]>>4,c[l++]=255&t);1===a&&(t=o[e.charCodeAt(n)]<<10|o[e.charCodeAt(n+1)]<<4|o[e.charCodeAt(n+2)]>>2,c[l++]=t>>8&255,c[l++]=255&t);return c},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],s=0,a=n-o;s<a;s+=16383)i.push(l(e,s,s+16383>a?a:s+16383));1===o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,c=s.length;a<c;++a)r[a]=s[a],o[s.charCodeAt(a)]=a;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,n){for(var o,i,s=[],a=t;a<n;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,o){var i,s,a=8*o-r-1,c=(1<<a)-1,u=c>>1,l=-7,d=n?o-1:0,f=n?-1:1,p=e[t+d];for(d+=f,i=p&(1<<-l)-1,p>>=-l,l+=a;l>0;i=256*i+e[t+d],d+=f,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=r;l>0;s=256*s+e[t+d],d+=f,l-=8);if(0===i)i=1-u;else{if(i===c)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,r),i-=u}return(p?-1:1)*s*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var s,a,c,u=8*i-o-1,l=(1<<u)-1,d=l>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:i-1,g=r?1:-1,h=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-s))<1&&(s--,c*=2),(t+=s+d>=1?f/c:f*Math.pow(2,1-d))*c>=2&&(s++,c/=2),s+d>=l?(a=0,s=l):s+d>=1?(a=(t*c-1)*Math.pow(2,o),s+=d):(a=t*Math.pow(2,d-1)*Math.pow(2,o),s=0));o>=8;e[n+p]=255&a,p+=g,a/=256,o-=8);for(s=s<<o|a,u+=o;u>0;e[n+p]=255&s,p+=g,s/=256,u-=8);e[n+p-g]|=128*h}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){var r=n(1),o=n(7),i=n(6),s=n(2),a=n(8),c=n(5),u=r.getBCHDigit(7973);function l(e,t){return s.getCharCountIndicator(e,t)+4}function d(e,t){var n=0;return e.forEach((function(e){var r=l(e.mode,t);n+=r+e.getBitsLength()})),n}t.from=function(e,t){return a.isValid(e)?parseInt(e,10):t},t.getCapacity=function(e,t,n){if(!a.isValid(e))throw new Error("Invalid QR Code version");void 0===n&&(n=s.BYTE);var i=8*(r.getSymbolTotalCodewords(e)-o.getTotalCodewordsCount(e,t));if(n===s.MIXED)return i;var c=i-l(n,e);switch(n){case s.NUMERIC:return Math.floor(c/10*3);case s.ALPHANUMERIC:return Math.floor(c/11*2);case s.KANJI:return Math.floor(c/13);case s.BYTE:default:return Math.floor(c/8)}},t.getBestVersionForData=function(e,n){var r,o=i.from(n,i.M);if(c(e)){if(e.length>1)return function(e,n){for(var r=1;r<=40;r++){if(d(e,r)<=t.getCapacity(r,n,s.MIXED))return r}}(e,o);if(0===e.length)return 1;r=e[0]}else r=e;return function(e,n,r){for(var o=1;o<=40;o++)if(n<=t.getCapacity(o,r,e))return o}(r.mode,r.getLength(),o)},t.getEncodedBits=function(e){if(!a.isValid(e)||e<7)throw new Error("Invalid QR Code version");for(var t=e<<12;r.getBCHDigit(t)-u>=0;)t^=7973<<r.getBCHDigit(t)-u;return e<<12|t}},function(e,t,n){var r=n(1),o=r.getBCHDigit(1335);t.getEncodedBits=function(e,t){for(var n=e.bit<<3|t,i=n<<10;r.getBCHDigit(i)-o>=0;)i^=1335<<r.getBCHDigit(i)-o;return 21522^(n<<10|i)}},function(e,t,n){var r=n(2),o=n(32),i=n(33),s=n(34),a=n(35),c=n(9),u=n(1),l=n(36);function d(e){return unescape(encodeURIComponent(e)).length}function f(e,t,n){for(var r,o=[];null!==(r=e.exec(n));)o.push({data:r[0],index:r.index,mode:t,length:r[0].length});return o}function p(e){var t,n,o=f(c.NUMERIC,r.NUMERIC,e),i=f(c.ALPHANUMERIC,r.ALPHANUMERIC,e);return u.isKanjiModeEnabled()?(t=f(c.BYTE,r.BYTE,e),n=f(c.KANJI,r.KANJI,e)):(t=f(c.BYTE_KANJI,r.BYTE,e),n=[]),o.concat(i,t,n).sort((function(e,t){return e.index-t.index})).map((function(e){return{data:e.data,mode:e.mode,length:e.length}}))}function g(e,t){switch(t){case r.NUMERIC:return o.getBitsLength(e);case r.ALPHANUMERIC:return i.getBitsLength(e);case r.KANJI:return a.getBitsLength(e);case r.BYTE:return s.getBitsLength(e)}}function h(e,t){var n,c=r.getBestModeForData(e);if((n=r.from(t,c))!==r.BYTE&&n.bit<c.bit)throw new Error('"'+e+'" cannot be encoded with mode '+r.toString(n)+".\n Suggested mode is: "+r.toString(c));switch(n!==r.KANJI||u.isKanjiModeEnabled()||(n=r.BYTE),n){case r.NUMERIC:return new o(e);case r.ALPHANUMERIC:return new i(e);case r.KANJI:return new a(e);case r.BYTE:return new s(e)}}t.fromArray=function(e){return e.reduce((function(e,t){return"string"==typeof t?e.push(h(t,null)):t.data&&e.push(h(t.data,t.mode)),e}),[])},t.fromString=function(e,n){for(var o=function(e,t){for(var n={},o={start:{}},i=["start"],s=0;s<e.length;s++){for(var a=e[s],c=[],u=0;u<a.length;u++){var l=a[u],d=""+s+u;c.push(d),n[d]={node:l,lastCount:0},o[d]={};for(var f=0;f<i.length;f++){var p=i[f];n[p]&&n[p].node.mode===l.mode?(o[p][d]=g(n[p].lastCount+l.length,l.mode)-g(n[p].lastCount,l.mode),n[p].lastCount+=l.length):(n[p]&&(n[p].lastCount=l.length),o[p][d]=g(l.length,l.mode)+4+r.getCharCountIndicator(l.mode,t))}}i=c}for(f=0;f<i.length;f++)o[i[f]].end=0;return{map:o,table:n}}(function(e){for(var t=[],n=0;n<e.length;n++){var o=e[n];switch(o.mode){case r.NUMERIC:t.push([o,{data:o.data,mode:r.ALPHANUMERIC,length:o.length},{data:o.data,mode:r.BYTE,length:o.length}]);break;case r.ALPHANUMERIC:t.push([o,{data:o.data,mode:r.BYTE,length:o.length}]);break;case r.KANJI:t.push([o,{data:o.data,mode:r.BYTE,length:d(o.data)}]);break;case r.BYTE:t.push([{data:o.data,mode:r.BYTE,length:d(o.data)}])}}return t}(p(e,u.isKanjiModeEnabled())),n),i=l.find_path(o.map,"start","end"),s=[],a=1;a<i.length-1;a++)s.push(o.table[i[a]].node);return t.fromArray(function(e){return e.reduce((function(e,t){var n=e.length-1>=0?e[e.length-1]:null;return n&&n.mode===t.mode?(e[e.length-1].data+=t.data,e):(e.push(t),e)}),[])}(s))},t.rawSplit=function(e){return t.fromArray(p(e,u.isKanjiModeEnabled()))}},function(e,t,n){var r=n(2);function o(e){this.mode=r.NUMERIC,this.data=e.toString()}o.getBitsLength=function(e){return 10*Math.floor(e/3)+(e%3?e%3*3+1:0)},o.prototype.getLength=function(){return this.data.length},o.prototype.getBitsLength=function(){return o.getBitsLength(this.data.length)},o.prototype.write=function(e){var t,n,r;for(t=0;t+3<=this.data.length;t+=3)n=this.data.substr(t,3),r=parseInt(n,10),e.put(r,10);var o=this.data.length-t;o>0&&(n=this.data.substr(t),r=parseInt(n,10),e.put(r,3*o+1))},e.exports=o},function(e,t,n){var r=n(2),o=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"," ","$","%","*","+","-",".","/",":"];function i(e){this.mode=r.ALPHANUMERIC,this.data=e}i.getBitsLength=function(e){return 11*Math.floor(e/2)+e%2*6},i.prototype.getLength=function(){return this.data.length},i.prototype.getBitsLength=function(){return i.getBitsLength(this.data.length)},i.prototype.write=function(e){var t;for(t=0;t+2<=this.data.length;t+=2){var n=45*o.indexOf(this.data[t]);n+=o.indexOf(this.data[t+1]),e.put(n,11)}this.data.length%2&&e.put(o.indexOf(this.data[t]),6)},e.exports=i},function(e,t,n){var r=n(3),o=n(2);function i(e){this.mode=o.BYTE,this.data=r.from(e)}i.getBitsLength=function(e){return 8*e},i.prototype.getLength=function(){return this.data.length},i.prototype.getBitsLength=function(){return i.getBitsLength(this.data.length)},i.prototype.write=function(e){for(var t=0,n=this.data.length;t<n;t++)e.put(this.data[t],8)},e.exports=i},function(e,t,n){var r=n(2),o=n(1);function i(e){this.mode=r.KANJI,this.data=e}i.getBitsLength=function(e){return 13*e},i.prototype.getLength=function(){return this.data.length},i.prototype.getBitsLength=function(){return i.getBitsLength(this.data.length)},i.prototype.write=function(e){var t;for(t=0;t<this.data.length;t++){var n=o.toSJIS(this.data[t]);if(n>=33088&&n<=40956)n-=33088;else{if(!(n>=57408&&n<=60351))throw new Error("Invalid SJIS character: "+this.data[t]+"\nMake sure your charset is UTF-8");n-=49472}n=192*(n>>>8&255)+(255&n),e.put(n,13)}},e.exports=i},function(e,t,n){"use strict";var r={single_source_shortest_paths:function(e,t,n){var o={},i={};i[t]=0;var s,a,c,u,l,d,f,p=r.PriorityQueue.make();for(p.push(t,0);!p.empty();)for(c in a=(s=p.pop()).value,u=s.cost,l=e[a]||{})l.hasOwnProperty(c)&&(d=u+l[c],f=i[c],(void 0===i[c]||f>d)&&(i[c]=d,p.push(c,d),o[c]=a));if(void 0!==n&&void 0===i[n]){var g=["Could not find a path from ",t," to ",n,"."].join("");throw new Error(g)}return o},extract_shortest_path_from_predecessor_list:function(e,t){for(var n=[],r=t;r;)n.push(r),e[r],r=e[r];return n.reverse(),n},find_path:function(e,t,n){var o=r.single_source_shortest_paths(e,t,n);return r.extract_shortest_path_from_predecessor_list(o,n)},PriorityQueue:{make:function(e){var t,n=r.PriorityQueue,o={};for(t in e=e||{},n)n.hasOwnProperty(t)&&(o[t]=n[t]);return o.queue=[],o.sorter=e.sorter||n.default_sorter,o},default_sorter:function(e,t){return e.cost-t.cost},push:function(e,t){var n={value:e,cost:t};this.queue.push(n),this.queue.sort(this.sorter)},pop:function(){return this.queue.shift()},empty:function(){return 0===this.queue.length}}};e.exports=r},function(e,t,n){var r=n(10);t.render=function(e,t,n){var o=n,i=t;void 0!==o||t&&t.getContext||(o=t,t=void 0),t||(i=function(){try{return document.createElement("canvas")}catch(e){throw new Error("You need to specify a canvas element")}}()),o=r.getOptions(o);var s=r.getImageWidth(e.modules.size,o),a=i.getContext("2d"),c=a.createImageData(s,s);return r.qrToImageData(c.data,e,o),function(e,t,n){e.clearRect(0,0,t.width,t.height),t.style||(t.style={}),t.height=n,t.width=n,t.style.height=n+"px",t.style.width=n+"px"}(a,i,s),a.putImageData(c,0,0),i},t.renderToDataURL=function(e,n,r){var o=r;void 0!==o||n&&n.getContext||(o=n,n=void 0),o||(o={});var i=t.render(e,n,o),s=o.type||"image/png",a=o.rendererOpts||{};return i.toDataURL(s,a.quality)}},function(e,t,n){var r=n(10);function o(e,t){var n=e.a/255,r=t+'="'+e.hex+'"';return n<1?r+" "+t+'-opacity="'+n.toFixed(2).slice(1)+'"':r}function i(e,t,n){var r=e+t;return void 0!==n&&(r+=" "+n),r}t.render=function(e,t,n){var s=r.getOptions(t),a=e.modules.size,c=e.modules.data,u=a+2*s.margin,l=s.color.light.a?"<path "+o(s.color.light,"fill")+' d="M0 0h'+u+"v"+u+'H0z"/>':"",d="<path "+o(s.color.dark,"stroke")+' d="'+function(e,t,n){for(var r="",o=0,s=!1,a=0,c=0;c<e.length;c++){var u=Math.floor(c%t),l=Math.floor(c/t);u||s||(s=!0),e[c]?(a++,c>0&&u>0&&e[c-1]||(r+=s?i("M",u+n,.5+l+n):i("m",o,0),o=0,s=!1),u+1<t&&e[c+1]||(r+=i("h",a),a=0)):o++}return r}(c,a,s.margin)+'"/>',f='viewBox="0 0 '+u+" "+u+'"',p='<svg xmlns="http://www.w3.org/2000/svg" '+(s.width?'width="'+s.width+'" height="'+s.width+'" ':"")+f+' shape-rendering="crispEdges">'+l+d+"</svg>\n";return"function"==typeof n&&n(null,p),p}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(11),s=n.n(i),a=n(4),c=n.n(a),u=n(12),l=n.n(u),d=n(13),f=n.n(d),p=[{answer:"èäº",path:n.p+"c2681abd8a6902eeb540e7fc992d5e16.png"},{answer:"é©¬éå¥¥",path:n.p+"c51e84b34a56d7fa7743e7d863d72ec9.png"},{answer:"å­æ³£çå¥³äºº",path:n.p+"1b4e5d797900440ab56ec7098dbd026f.png"}];let g=null,h=null,m=null,v=null,y=null,C=null,R=5,T=5,I=null,S=null,E=null,M=0,_=null,b=null,O=[],N=5,A=null;const w=async()=>{m&&(m.remove(),m=null,v=null)},P=async()=>{await(async()=>new Promise(e=>{window.$img=o()(`<img src="${p[_].path}" style="float: left; display:none;">`),$img.appendTo(o()("#wrapper2")),w(),$img.on("load",()=>{y=$img.width(),C=$img.height(),console.log("Img Loaded",y,C),g.attr("width",y),g.attr("height",C),h.drawImage($img[0],0,0,y,C),M=0,e()})}))();let e=Date.now();const t=()=>{const n=Math.floor(1e3/N);A=setTimeout(async()=>{await(async(e,t)=>{const n=Date.now();isFinite(e)||(e=R*(M%Math.ceil(y/R)),t=T*Math.floor(M/Math.ceil(y/R))%C),M++;const r=[];for(let n=t;n<t+T;n++)for(let t=e;t<e+R;t++){const e=h.getImageData(t,n,1,1).data;r.push(`${e[0].toString(16).padStart(2,"0")}${e[1].toString(16).padStart(2,"0")}${e[2].toString(16).padStart(2,"0")}`)}S||(S=o()('<canvas id="canvasQR" width="500" height="500" style="float: left;"></canvas>'),S.appendTo(o()(o()("#qrWrapper"))),E=S[0].getContext("2d"));await s.a.toCanvas(S[0],`https://dimgai.wrtc.dev:8443?i=${M}&x=${e}&y=${t}&w=${y}&t=${Date.now()}&h=${C}&d=${r.join("")}`);const i={pieceCnt:M,sx:e,sy:t,PIECE_WIDTH:R,PIECE_HEIGHT:T,start:Date.now(),spent:Date.now()-n};O.push(i),O.length>100&&O.shift(),I||(I=o()("<div>"),I.appendTo(o()("#wrapper2"))),I.css({position:"absolute",outline:"4px solid blue",width:R,height:T,left:g.position().left+e,top:g.position().top+t})})(),e=Date.now(),A&&t()},n-(Date.now()-e))};t(),setTimeout(()=>{(async()=>{new Promise(async e=>{c.a.RongIMClient.init("sfci50a7sxcgi");var t={timeout:2e3,RongIMLib:c.a,RongRTC:l.a},n=f.a.init(t);RongIMClient.connect("aLS51cHek47x8Pm22/4Mpn+vWfe9h5N8oOwJC3JHFHo=@9ekk.cn.rongnav.com;9ekk.cn.rongcfg.com",{onSuccess:function(e){console.log("Connect successfully. "+e)},onTokenIncorrect:function(){console.log("token æ æ")},onError:function(e){console.log(e)}});n.videoWatch((function(e){console.log("videoWatcher",e);var t=e.type;if("added"===t)var n=e.data;else if("removed"===t){n=e.data;console.log("Video",n)}}));let r=null;n.commandWatch((function(e){e.messageType;console.log("commandWatcher",e.messageType,e),"InviteMessage"===e.messageType&&(r&&Date.now()-r<1e3?console.log("ignoring call",e):(r=Date.now(),o(e),console.log("acceptCall",e)))}));const o=function(e){var t={conversationType:e.conversationType,targetId:e.targetId,mediaType:c.a.VoIPMediaType.MEDIA_VIDEO};n.accept(t,(function(e){console.log("accept",e),e&&console.error("æ¥å¬éè¯å¤±è´¥",e)}))}})})()},1e3)};(async()=>{(()=>{o()('<div id="wrapper1"></div>').appendTo("body"),o()('<div id="wrapper2" style="display: none;"></div>').appendTo("body"),o()("<h1>ç¹è§£ââåéç«¯</h1>").appendTo(o()("#wrapper1")),o()("<h3>1. è¯·å¨æ¡é¢çChromeä¸ï¼ä¿ææ¬é¡µé¢æå¼ï¼å¹¶ä¸åªæå¼ä¸ä¸ª</h3>").appendTo(o()("#wrapper1")),o()("<h3>2. è¯·è¾å¥ä¸ä¸ªIDãè¯¥IDä¼ä»¥åºé¢äººçèº«ä»½ä¸çº¿èäºRTC(é»è®¤ä¸ºpublisher)ï¼</h3>").appendTo(o()("#wrapper1")),o()('<input type="text" id="publisherName" value="publisher" disabled>').appendTo(o()("#wrapper1")),o()("<h3>3. è¯·ä»é¢åºä¸­éæ©è°é¢ï¼</h3>").appendTo(o()("#wrapper1")),o()('<select id="myth" style="float: left"></select><br/><br/>').appendTo(o()("#wrapper1")),o()('<label>æ¼å¾è¾¹é¿ï¼ <select id="pieceWidthHeight">\n        <option value="1">1x1</option>\n        <option value="3"selected>3x3</option>\n        <option value="5">5x5</option>\n        <option value="6">6x6</option>\n        <option value="10">10x10</option>\n    </select></label><br/><br/>').appendTo(o()("#wrapper1")),o()('<button id="go" style="float: left">ç¡®å®</button>').appendTo(o()("#wrapper1")),p.forEach((e,t)=>{o()("#myth").append(`<option value="${t}">${t+1}. ${e.answer}</option>`)}),g=o()('<canvas id="canvasFull" style="float: left;"></canvas>'),g.appendTo(o()("#wrapper2")),h=g[0].getContext("2d"),o()("#go").on("click",async()=>{_=parseInt(o()("#myth").val()),console.log("éæ©ï¼",p[_]),b=o()("#publisherName").val(),o()("#wrapper1").hide("slow"),o()("#wrapper2").show("slow"),R=T=parseInt(o()("#pieceWidthHeight").val()),P(),o()(`<h3>4. <i>${b}å·²ä¸çº¿ãå¿«å»é¢éåå¼å«å®ã</i> </h3>`).prependTo(o()("#wrapper2")),o()(`<div id="discription" style="max-width: 900px;"><ul>\n        <li>å½åå¾çå·²è¢«æåæ <span class="pieceSum"></span>åï¼å¹¶æ­£ä»¥<span class="frameRate"></span>åæ¯ç§çéåº¦åéãRGBç ç\b\b<span class="rbgBitrate"></span>kbps</li>\n        <li>ä½ å¯ä»¥ä»¥ä»»ææ¹å¼ï¼iOS/Android/Webï¼å å¥èäºRTCï¼å¹¶å¼å«ç¨æ· ${b} æ¥çãè¯¥ç¨æ·ä¼èªå¨æ¥èµ·éè¯ã\n        ï¼<a target="_blank" href="https://dimgai.wrtc.dev:8443/demo/">Webççä¾å­<a>ï¼\n        </li>\n        <li>ä½ä¸ºç¨åºåçä½ ï¼ä¸å®å¯ä»¥ç¨åæ¬¢çç¼ç¨è¯­è¨éæ°æ¼åå¹¶è¿åæ´å¹ç»ã</li>\n        </ul></div>`).appendTo(o()("#wrapper2")),o()('<div id="qrWrapper" style="float: left;width: 420px;"></div>').appendTo(o()("#wrapper2")),o()(`<div id="debugArea" style="color: grey; max-width: 900px;">\n            <h3>è°è¯åºå</h3>\n            <div><label>ç®æ å¸§çï¼<input type="number" step=5 id="targetFrameRate" value="${N}"></abel></div>\n            <button id="changeSettings">ç¡®å®</button>\n            <div><br/><br/>ââââä½ä¸ºGeekOnlineæ´»å¨çä¸é¨åï¼ä½èå·²ç»åå¤äºä¸ä¸ªè§£ãä½¿ç¨ç³»ç»èªå¸¦ç¸æºæ«æäºç»´ç æå¼å³å¯ï¼å¾®ä¿¡ä¸å¯ï¼ã</div>\n        </div>`).appendTo(o()("#wrapper2")),setInterval(e,500),o()("#changeSettings").on("click",()=>{N=parseInt(o()("#targetFrameRate").val()),O.splice(0,O.length-1)})});const e=()=>{if(O.length>1){const e=O[O.length-1].start-O[0].start,t=Math.ceil(1e3*O.length/e);o()(".frameRate").text(t),o()(".pieceSum").text(Math.floor(y*C/R/T)),o()(".rbgBitrate").text(Math.floor(t*R*T*3*8)/1e3)}}})()})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,